Question 1
  Found [return] with compatible type.
  Found [>>=] with compatible type.
  Found [fail] with compatible type.
  Found [choose] with compatible type.
  Found [at_most_once] with compatible type.
  Found [map] with compatible type.
  Found [>>] with compatible type.
  Found [any] with compatible type.
  Found [eof] with compatible type.
  Found [char] with compatible type.
  Success 1: The code seems correct. Tested 1534 parsers on 31 input strings.
Question 2
  Found [return] with compatible type.
  Found [>>=] with compatible type.
  Found [fail] with compatible type.
  Found [choose] with compatible type.
  Found [at_most_once] with compatible type.
  Found [map] with compatible type.
  Found [>>] with compatible type.
  Found [any] with compatible type.
  Found [eof] with compatible type.
  Found [char] with compatible type.
  Found [digit] with compatible type.
  Found [number_lax] with compatible type.
  Found [number] with compatible type.
  Success 1: The code seems correct. Tested 5 parsers on 185 input strings.
Question 3
  Found [return] with compatible type.
  Found [>>=] with compatible type.
  Found [fail] with compatible type.
  Found [choose] with compatible type.
  Found [at_most_once] with compatible type.
  Found [map] with compatible type.
  Found [>>] with compatible type.
  Found [any] with compatible type.
  Found [eof] with compatible type.
  Found [char] with compatible type.
  Found [sum] with compatible type.
  Failure: Something is wrong. The following expression:
    
     | "1+1+1" |> run (sum >>= fun a -> eof >> return a) |> Seq.take 2
     | |> Seq.to_list
     | |> List.sort compare
    produces the following result: [[]] This is invalid. Producing the
    following result is valid: [[3]]

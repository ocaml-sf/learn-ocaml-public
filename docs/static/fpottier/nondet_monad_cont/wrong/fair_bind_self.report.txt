Question 1
  Found [return] with compatible type.
  Found [>>=] with compatible type.
  Found [fail] with compatible type.
  Found [choose] with compatible type.
  Found [sols] with compatible type.
  Functional correctness
    Success 1: The code seems correct. Tested 2411 scenarios.
  Laziness
    Success 1: The code seems lazy.
Question 2
  Found [return] with compatible type.
  Found [>>=] with compatible type.
  Found [fail] with compatible type.
  Found [choose] with compatible type.
  Found [sols] with compatible type.
  Found [at_most_once] with compatible type.
  Functional correctness
    Success 1: The code seems correct. Tested 2486 scenarios.
  Laziness
    Success 1: The code seems lazy.
Question 3
  Found [return] with compatible type.
  Found [>>=] with compatible type.
  Found [fail] with compatible type.
  Found [choose] with compatible type.
  Found [sols] with compatible type.
  Found [at_most_once] with compatible type.
  Found [interleave] with compatible type.
  Functional correctness
    Success 1: The code seems correct. Tested 2867 scenarios.
  Laziness
    Success 1: The code seems lazy.
Question 4
  Found [return] with compatible type.
  Found [>>=] with compatible type.
  Found [fail] with compatible type.
  Found [choose] with compatible type.
  Found [sols] with compatible type.
  Found [at_most_once] with compatible type.
  Found [interleave] with compatible type.
  Found [>>-] with compatible type.
  Functional correctness
    Failure: Something is wrong. The following expression:
      
       | sols (
       |   choose (interleave (return 0) (return 0)) (return 0) >>- fun a ->
       |   choose (return 1 >>= fun b -> return b) (return 0)
       | )
       | |> Seq.take 20
       | |> Seq.to_list
      produces the following result: [[1; 1; 0; 0; 1; 0]] This is invalid.
      Producing the following result is valid: [[1; 1; 0; 1; 0; 0]]

[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Random access lists",
    "stars": 3,
    "backward_exercises": [
      "fpottier/pprint"
    ]
  },
  {
    "id": "random_access_lists",
    "prelude": "(* The algebraic data type of random access lists. *)\n\ntype 'a seq =\n| Nil\n| Zero of     ('a * 'a) seq\n| One of 'a * ('a * 'a) seq\n\n(* An algebraic data type of arithmetic expressions. *)\n\ntype constant =\n  int\n\ntype var =\n  int (* a de Bruijn index *)\n\ntype op =\n  int -> int -> int\n\ntype expr =\n  | EConstant of constant\n  | EBinOp of expr * op * expr\n  | EVar of var\n  | ELet of expr * expr\n\ntype env =\n  constant seq\n",
    "template": "(* TO DO: define the constant [empty]. *)\n\n(* TO DO: define the constant [test24]. *)\n\n(* TO DO: define the constant [digits]. *)\n\n(* Measuring the length of a sequence. *)\n\nlet rec length : 'a . 'a seq -> int =\n  fun xs ->\n    (* TO DO: implement [length]. *)\n    raise TODO\n\n(* TO DO: define the function [cons]. *)\n\n(* TO DO: define the function [uncons]. *)\n\n(* TO DO: define the function [get]. *)\n\n(* TO DO: define the function [update]. *)\n\n(* An application of random access lists. *)\n\nlet rec eval (env : env) (e : expr) : constant =\n  (* TO DO: implement [eval]. *)\n  raise TODO\n",
    "descr": [
      [
        "",
        "<h1 id=\"Random-access-lists\">Random access lists</h1>\n\n<p>This problem is based on Chapter 10.1.2 of Chris Okasaki&#39;s book,\n<a href=\"https://www.cambridge.org/fr/academic/subjects/computer-science/programming-languages-and-applied-logic/purely-functional-data-structures?format=PB&amp;isbn=9780521663502\" target=\"_blank\" rel=\"noopener noreferrer\">Purely Functional Data Structures</a>.</p>\n<h2 id=\"Data-structure\">Data structure</h2>\n\n<p>A <strong>random access list</strong> is a data structure that represents a <strong>sequence</strong> of\nelements. It is so named because it allows fast random access, that is, fast\naccess to an element at an arbitrary index.</p>\n<p>A sequence either is empty, or has an even number of elements, or has an odd\nnumber of elements. These three cases are reflected in the definition of the\ntype <code>&#39;a seq</code>:</p>\n<pre><code>type &#39;a seq =\n| Nil\n| Zero of     (&#39;a * &#39;a) seq\n| One of &#39;a * (&#39;a * &#39;a) seq</code></pre>\n\n<p>An empty sequence is represented by the data constructor <code>Nil</code>.</p>\n<p>A nonempty sequence of even length is represented as an application of the\ndata constructor <code>Zero</code>. Because the sequence has even length <code>n</code>, it can be\norganized as <em>a sequence of pairs</em> of length <code>n/2</code>, whose type is <code>(&#39;a * &#39;a) seq</code>.</p>\n<p>A nonempty sequence of odd length is represented as an application of the\ndata constructor <code>One</code>. The first element of the sequence, whose type is <code>&#39;a</code>,\ns stored at the root of the random access list. The remainder of the sequence,\nwhich has even length, is again organized as a sequence of pairs,\nwhose type is <code>(&#39;a * &#39;a) seq</code>.</p>\n<p>As a result of these decisions, a sequence of <code>n</code> elements is represented in\nmemory as a list of <code>Zero</code> and <code>One</code> digits, which corresponds to the\nrepresentation of the number <code>n</code> in binary notation. (The least significant\ndigit is at the head of this list.) The length of this list is obviously\nlogarithmic in <code>n</code>. Furthermore, each element of this list is a pair of pairs\nof pairs (...) whose depth is also logarithmic in <code>n</code>. This is why the random\naccess operations <code>get</code> and <code>update</code> have logarithmic time complexity.\nThis is much better than access in an ordinary linked list:\n<code>List.nth</code> has linear time complexity.</p>\n<p>Since <code>Zero</code> and <code>One</code> are used only when the sequence is nonempty,\n<code>Zero</code> is never followed with <code>Nil</code>.</p>\n<h2 id=\"Examples\">Examples</h2>\n\n<p><strong>Question 1.</strong>\nDefine a random access list <code>empty</code> of type <code>&#39;a seq</code> which represents\nthe empty sequence.</p>\n<p>The number <em>two</em> is written <code>10</code> in ordinary binary notation (most significant\ndigit first), hence <code>01</code> in reverse (least significant digit first).\nTherefore, a sequence of <em>two</em> elements is represented by a random access list\nwhose shape is <code>Zero (One (_, Nil))</code>.</p>\n<p><strong>Question 2.</strong>\nDefine a random access list <code>test24</code> of type <code>int seq</code> which represents\nthe sequence of integers <code>2, 4</code>.</p>\n<p><strong>Question 3.</strong>\nDefine a random access list <code>digits</code> of type <code>int seq</code> which represents\nthe sequence of integers <code>0, 1, 2, 3, 4, 5, 6, 7, 8, 9</code>.</p>\n<h2 id=\"Length\">Length</h2>\n\n<p>We now wish to define a function <code>length</code> such that <code>length xs</code> is the number\nof elements of the random access list <code>xs</code>. In other words, <code>length xs</code> is the\nlength of the sequence represented by <code>xs</code>.</p>\n<p>The type of <code>length</code> is <code>&#39;a seq -&gt; int</code>. This function is <strong>polymorphic</strong>: it\nworks for every element type <code>&#39;a</code>. This can be emphasized by using an explicit\n<strong>universal quantification</strong>: the type of <code>length</code> can also be written as <code>&#39;a\n. &#39;a seq -&gt; int</code>. Indeed, <strong>for every</strong> <code>&#39;a</code>, applying <code>length</code> to a value of\ntype <code>&#39;a seq</code> produces an integer result.</p>\n<p>When <code>length</code> is applied to a sequence of type <code>&#39;a seq</code>, it may need to apply\nitself, recursively, to a (shorter) sequence of type <code>(&#39;a * &#39;a) seq</code>. This\nphenomenon is known as <strong>polymorphic recursion</strong>. Fortunately, because\n<code>length</code> is polymorphic, this is permitted, provided the recursive function is\nexplicitly annotated with a polymorphic type: this helps the OCaml\ntype-checker understand what is going on.</p>\n<p><strong>Question 4.</strong>\nDefine the function <code>length</code>.</p>\n<h2 id=\"Insertion-and-extraction-at-the-front\">Insertion and extraction at the front</h2>\n\n<p><strong>Question 5.</strong>\nDefine a function <code>cons</code> of type <code>&#39;a . &#39;a -&gt; &#39;a seq -&gt; &#39;a seq</code>\nsuch that the sequence <code>cons x xs</code>\nbegins with the element <code>x</code>\nand continues with the elements of the sequence <code>xs</code>.</p>\n<p><strong>Question 6.</strong>\nDefine a function <code>uncons</code> of type <code>&#39;a . &#39;a seq -&gt; (&#39;a * &#39;a seq) option</code>\nsuch that <code>uncons empty</code> is <code>None</code>\nand <code>uncons (cons x xs)</code> is <code>Some (x, xs)</code>.</p>\n<h2 id=\"Random-access\">Random access</h2>\n\n<p>In the following,\na valid index into a random access list <code>xs</code>\nis an integer <code>i</code> that lies between <code>0</code> included and <code>length xs</code> excluded.</p>\n<p>We begin with read access:</p>\n<p><strong>Question 7.</strong>\nDefine a function <code>get</code> of type <code>&#39;a . int -&gt; &#39;a seq -&gt; &#39;a</code>\nsuch that <code>get i xs</code> is the element at index <code>i</code> in the sequence <code>xs</code>.\nOne can assume that <code>i</code> is a valid index into <code>xs</code>.</p>\n<p>We continue with write access.</p>\n<p>We wish to define a function\n<code>update</code> of type <code>&#39;a . int -&gt; &#39;a -&gt; &#39;a seq -&gt; &#39;a seq</code>\nwhose behavior can be described as follows:</p>\n<ul><li><p>The length of <code>update i x xs</code> is the length of <code>xs</code>.\n (<code>i</code> must be a valid index into <code>xs</code>.)</p>\n</li><li><p>The <code>i</code>-th element of <code>update i x xs</code> is <code>x</code>.</p>\n</li><li><p>For every index <code>j</code> other than <code>i</code>,\n the <code>j</code>-th element of <code>update i x xs</code> is the <code>j</code>-th element of <code>xs</code>.</p>\n</li></ul>\n\n<p><strong>Question 8.</strong>\nTry giving a direct recursive definition of <code>update</code>.\nYou will find that this approach does not work.\nYet, this is not a waste of time; this attempt\nserves as a preparation for the next question.</p>\n<p>To work around this problem,\nwe first define a more general function\n<code>fupdate</code> of type <code>&#39;a . int -&gt; (&#39;a -&gt; &#39;a) -&gt; &#39;a seq -&gt; &#39;a seq</code>\nwhose behavior can be described as follows:</p>\n<ul><li><p>The length of <code>fupdate i f xs</code> is the length of <code>xs</code>.\n (<code>i</code> must be a valid index into <code>xs</code>.)</p>\n</li><li><p>The <code>i</code>-th element of <code>fupdate i f xs</code> is <code>f (get i xs)</code>.</p>\n</li><li><p>For every index <code>j</code> other than <code>i</code>,\n the <code>j</code>-th element of <code>fupdate i f xs</code> is the <code>j</code>-th element of <code>xs</code>.</p>\n</li></ul>\n\n<p>In other words, the job of <code>fupdate</code> is to apply the function <code>f</code>\nto the <code>i</code>-th element of the sequence <code>xs</code>,\nproducing a new sequence.</p>\n<p><strong>Question 9.</strong>\nBuilding on the failed attempt of the previous question,\ndefine the function <code>fupdate</code>.\nThen, using <code>fupdate</code>, define <code>update</code>.</p>\n<h2 id=\"Application\">Application</h2>\n\n<p>As an application of random access lists,\nwe wish to write an <strong>evaluator</strong>\nof arithmetic expressions.\nOur arithmetic expressions involve constants,\nbinary operators,\nand variables,\nwhich are locally defined by a <code>let</code> construct.\nFor instance, <code>let x = 24 + 18 in x * x</code> is a\nvalid arithmetic expression, expressed in concrete syntax.</p>\n<p>The algebraic data type <code>expr</code> of arithmetic expressions is defined as follows:</p>\n<pre><code>type constant =\n  int\n\ntype var =\n  int (* a de Bruijn index, see below. *)\n\ntype op =\n  int -&gt; int -&gt; int\n\ntype expr =\n  | EConstant of constant\n  | EBinOp of expr * op * expr\n  | EVar of var\n  | ELet of expr * expr</code></pre>\n\n<p>The expression <code>let x = 24 + 18 in x * x</code>\nis expressed as follows in this abstract syntax:</p>\n<pre><code>  Let (\n    EBinOp (\n      EConstant 24,\n      ( + ),\n      EConstant 18\n    ),\n    EBinOp (\n      EVar 0,\n      ( * ),\n      EVar 0\n    )\n  )</code></pre>\n\n<p>The index carried by <code>EVar</code> is a <strong>de Bruijn index</strong>. <code>0</code> denotes the variable\nthat was defined by the nearest enclosing <code>ELet</code> construct; <code>1</code> denotes the\nvariable that was defined by the second-nearest enclosing <code>ELet</code> construct;\nand so on.</p>\n<p>We now wish to write an evaluator, that is, a function <code>eval</code> that accepts an\narithmetic expression <code>e</code> and computes its value.</p>\n<p>An evaluator also takes an <strong>environment</strong> <code>env</code> as a parameter.\nThis environment maps each of the variables that appear free in <code>e</code>\nto the value of this variable.</p>\n<p>For efficiency,\nan environment is represented in memory as a random access list:</p>\n<pre><code>type env =\n  constant seq</code></pre>\n\n<p>The value at index <code>0</code> in the environment represents the value of the\nvariable <code>0</code>, and so on.</p>\n<p><strong>Question 10.</strong>\nDefine a function <code>eval</code> of type <code>env -&gt; expr -&gt; constant</code>,\nsuch that <code>eval env e</code>\nis the value of the expression <code>e</code> under the environment <code>env</code>.\nIn particular,\nif the expression <code>e</code> has no free variables,\nthen <code>eval empty e</code> is the value of <code>e</code>.</p>\n<p><em>Note.</em> When writing <code>eval</code>, one can assume that every variable is in scope:\nthat is, if the expression <code>e</code> contains a free occurrence of the index <code>i</code>,\nthen <code>i</code> is a valid index into <code>env</code>. Symmetrically, at every call of <code>eval</code>,\none must ensure that every variable is in scope by providing a suitable\nenvironment.</p>\n"
      ]
    ],
    "prepare": "pm4t2TwGx2wi+ZcWDRX9",
    "test": "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",
    "solution": "ktNKD0ybCFTpd+dRPxmJun1OAEoQW/w1O9MRWVyvqMYetE5X4nn3CiMchPmwxrMfoDPV4jkne3O6DJoAx8+cq9JYSokIOxhB7ZEyuM/QKL2oHNQB64p1qHlWVZlRp7LIC17OusgPHLXfHy3WGmE1qfP1//KBERX5f6/Mjxe4cCDlnUxDsO/HE0XOsQlbkxDm0lFZRRlZ2kA/GR5aOqWsyDqbCHx1NI64+X89hryetGWVNI/VYiKQgaMQjRzIKg4RDHMCWWxA75rYaXPH6AA3snMB/U4utkHT16AWlEvZKwZMzdyliEd3vNplLswGPU8nbJfIRwYCG+ztVUCJlx4cNNL8Syz4d9Qeq+HnQT4XxtsuSll6VF6KTDsZXkIQe+CNOaYE1oIl9kddPvisq+7z1ZFoj8pz4OvxvHXmX32a/bpH2QI2JkeBXdHlZ3jDQWTd1UyUTgLjALpoSo+RDMU7zWv0jurFAR095mQjmWUoSPupo1USp9MVd42NGdC4oshcit/KJ4HVQVjcx4sIPsfIhWNMUlpRGR9Z+RARFRCgfM5er9EcRUu0XiNhd+mHquFqoGmH4jNnfvKtQ29Rx7rXuEIdA6lyXtF4p4QyqvhAZPJoEwU58aZRsENZFxARzCKJXwqLa2sPBLm+NH3WAXY1tqDQkjnuAobwmQM4mJy+qXOZnQtid4gEVPD9sRpb/d06JRMCA9UZV/cwURFGV37c8XXgBDNV+sJkWTTxbLjwwzPE2ctoMHLpxvY3jRb7LN+bTn5CV7MQkUeYcHLm6A1/d7ILoEa1zVGd35BYjBvR3c2A/tTXlEdWqJkk0gAHMRGwdNaNEt96F+z9TRCJw13hP2PXYHyorp5Rq+HeJiC07O9eTUl7WFUQMj9QERVMrZKN+4VBZAZ5k9FZ3Kjtq4q8IMR0j8w83uKrxQ+KGI5u/egC+5IbLFWGAcDh4eTXCWTa0jSVTdGmU0pdVWn2ENh78APU/KeQRlfplGlnloZ7Q2D+5IgGgFNBbbUOGMCFn4Rw/xoKM0TfTBHngatJPxiNtDYEApcUFo9TYDxeWVXsfJwbbUFxGnOUESBhsfnfrrMroDPV4mAirfKtQ29ZwWvXsEIoQkEoV21C70tqr1kPKqJtZJVP6bY4qGQGFsV1rnKEQJrXqIQMXunIZmrEBzUAlPCI6E02Ciq5fEkB/bGOcDi3nUwgd2VHXa7Lbl5bisT6DAdITB/BFR9HWVl1ELTjh8rfQTkVYNs4AD45f0imrnmEWslm+/8vxvF46RHNZ2KbSzhOUTsD8prEf/Xs6AB9dyFO/TnOa6SdNAl+jD8U1MsApxylb9dWqNBxOf9KYp4fv2rESgd6F+z9TUnJnhfg4IvKAyz9cUs3daLeEWi3if5iCW2MER9ZGW9QEU9Qnv3F4uwJNQktjpZf2KikeqL8L2x3/Hc81rv7xVaZE+IugPEP1pJZO6nGZM3o4bX2DGSuI931Z1GmU0pdVR0YHwFMnpe3jqDOZR+dlDQelldoSPup7MUVl9gHa+QLD1WYnaQkkM9JOLakRlWcf0xY0wqGbzMPA9oFSk6QJV/4U6D8uZwlfUEiXEuoVi/hmOabquBm8XuT4m1fufL+FvQ1czOXbpgmToQtRIZNovZaqdFBILtaCZsPnewe/yAQQs5QkGGEBcfOa1wPE4iQO8r+AWVIcbfI5p3BWFDhwEBS71mPcCDlnUxawPUIWLigvE5mpKL6YlFNAVBNW/FwSEIVRaCd5BGfQTkVPNtoO8Ssx+PRhnDENJRaYiKud4I+7lW7020nEXMCWW5QoUuHr8Cg6E5/x7ELjkTBnB8BPBoFjBXY2tpJk2vayowYbIMlM2w/MU8fdNSEK1cOF+HdQUmRzI4lMMD8Syyorp5Rq+GnD8fX7Po8UUlYWVoXMj9QERUQr38IOexZFkV5jkcm3KjtbL3pZ3hl/Hc81rv7xVaZVr2a/eYLN5cR1ozGAaOoL+KEWD4eWlfVTdHqU1ZgBkyYGtI77VfojqiQTo+dlDRi/6toQKL56IQ39AIVsKQKC2iL6ulcl1/Y1PH8WoHlecFIPsfIhWNBTQVXGVAZJFcVFQKgc15ur6VkECe0BjNhfODrqrNhkRfb2j/n7bH7GxwCfjXQq6ZbRkEZW4tGi0oavM6FK01aGwUJ8rFRfWpRVhpLijWKQJHTkaxDUb8QZyfQTi12vuTJlAOBERWrgUkC7YLAxDiTklwocqxIHKO6aA9iixXaYlYMTEJ1SB/9D6ESU0ze8WvfXB2VYJlKPX89uPqeriPEOYwVYiLvxrp38VLvKdasQzFLBSxf65rJcCPsf99xdyoQqlaBtkGdPFUWzRHCZcYUzgndyBoTqN5bOgAO4p+kwI8MBcF0UO3aTT4Asxfc0sf3Anjgd9YRabfrByvN7Osv+lkMER/FGQZ3VBUYh3TIYb/IPV6bdVcm3Kjtq4q8+YIliXcb1qv7cR31Xh5u/egCN5JRY6CGZM3o4bXCADmb1R0GRrrmU0pdVR0YQsRrkpWojqiQTo+dlDQelpobBvyplIROokgFe3UZCYyDoaQpis6D303eAGqhdeRIZxjBfE/BTUpRRR/8LEJ3FU8vfMU/9EEcVWD0XiNhh3ywbfUyoCzb4jNnfvK6Xc9RxzLRq5tjTohzEJQL/PRqe2BII0o0TwVPp0NRqDoVFs6Cki4KQJOCe2oPTviZND0NTm9Obv7Y7E0ZG6nDwEkM71rOcDi3nQdkxqh7E0j6bl5bix86YlFNC9RXGREoABlVSK86nD+9QTUN1N24NX8kq0TRhnDENJRaYiK8eIs4jRG7Kg3bQ9oHAnlQ89i1wDrtlEV9b86Oz9aTr/HfOkVO7lreCM5Fmcvx5AsXfJUl1sMWMRCwdJWrRxFNQPy5DB8Mnd4lNZ71BHzOrpUPq48nSG+NxtsuSllsXo/YST/1WFZRe+GH20xO3kUnz6EiNbCtaL75ZZ2y/DMvI0eoukaTGI5BjatWN/AUIRDDX17h4bXBT8Ln+leQAZ3fU0RgVQmYBd/nk9z0pPjTAF8q6HVk6ldtYqupo1USp9MVeKQ+B2jDwPQc5t9qGuekWlXdefcI42fFal/BTUpRGR/+QoARSRD17xFkkREcXSXKUiMia+CcqqEwoDzKVWNnfvK6XgZBx7PSfANfA6QtRxZOzPkag1FWJ0goCctZp4ZDsRZVFxRCcFTFEwrCa2kRPLmQNDqTTiYNuqDQ6APPXTbwwBFMeK4LxDiW8Fskd4h+GLjtgWIbix86YlEBCUUZXF1aEApVUa+zzmrnBGtULNt+PSfsf+mnhjWKYwQjLV8vxvF4jRHy420nQyNMBjJV/CE=",
    "max-score": 9
  },
  null
]
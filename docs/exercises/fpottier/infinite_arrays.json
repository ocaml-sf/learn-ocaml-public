[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Infinite Arrays",
    "stars": 3,
    "backward_exercises": [
      "fpottier/huffman"
    ]
  },
  {
    "id": "infinite_arrays",
    "prelude": "exception Inconsistency\n",
    "template": "(* TO DO: Define the type ['a t] and the functions [make], [get], and [set]. *)\n\ntype 'a t (* = ... *)\n\nlet make (x : 'a) : 'a t =\n  raise TODO\n\nlet get (a : 'a t) (i : int) : 'a =\n  raise TODO\n\nlet set (a : 'a t) (i : int) (x : 'a) : unit =\n  raise TODO\n",
    "descr": [
      [
        "",
        "<h1 id=\"Infinite-Arrays\">Infinite Arrays</h1>\n\n<p>An OCaml array has a fixed, finite length. Indeed, when one allocates an array\nvia the function call <code>Array.make n x</code>, one must choose an integer value <code>n</code>,\nwhich is the length of the newly created array. The cells of this array are\nindexed by the integers between 0 (included) and <code>n</code> excluded. Every cell of\nthis array is initialized with the value <code>x</code>. An OCaml array is mutable: its\ncells can be read and written via the operations <code>Array.get</code> and <code>Array.set</code>.\nHowever, the length of an array cannot be changed.</p>\n<p>In some situations, however, it is convenient to be able to work with\n<strong>infinite arrays</strong>. Conceptually, infinite arrays work exactly like ordinary\narrays, except there is no need to specify their length at creation time:\ntheir length is infinite. The function call <code>make x</code> creates a new infinite\narray and initializes every cell in it with the value <code>x</code>. The cells of this\narray are indexed by the natural integers, from zero to infinity. Arbitrary\ncells are read and written via the operations <code>get</code> and <code>set</code>.</p>\n<p>Thus, an implementation of infinite arrays must offer the following signature,\nwhere <code>&#39;a t</code> is the type of an infinite array whose elements have type <code>&#39;a</code>:</p>\n<pre><code>  type &#39;a t\n  val make: &#39;a -&gt; &#39;a t\n  val get: &#39;a t -&gt; int -&gt; &#39;a\n  val set: &#39;a t -&gt; int -&gt; &#39;a -&gt; unit</code></pre>\n\n<p><strong>Question.</strong> Propose an implementation of infinite arrays.</p>\n<p><em>Hint.</em> Of course, one cannot allocate an OCaml array of infinite length. A\nreasonable option, therefore, is to allocate an OCaml array of some finite\nlength <code>n</code>, and to adopt the convention that every cell in the infinite array\nwhose index is greater than <code>n-1</code> must contain the default value <code>x</code> that was\npassed by the user as an argument to <code>make</code>. If and when the user wishes to\nwrite a cell whose index <code>i</code> is greater than <code>n-1</code>, then a larger OCaml array\ncan be allocated. It is recommended that the size of the new OCaml array be at\nleast twice the size of the previous one, so as to amortize the cost of\ninitializing these arrays.</p>\n"
      ]
    ],
    "prepare": "2hCPK8M9Od6g08/tE05q",
    "test": "",
    "solution": "Omn0V0XOgHqmCktfYiHQKjsLTT6ZXB/2LFZQQFmsfIkiapohGmT0Cmtgb+mvruA5/HXHLCYjfrPkXgwDgjuDcpkhA5UuX1MF74gjohQAIL1iDdAD/+/RrikOPN6CzS7EIZrKsY91XabR3DrSHWMJxafI89buCoX9dR9Nnh4LcG9rJh2Vudz7Ov2KFG6gAttBPzsyAFRNGVltV/BAXOjXziL5BDkISss4YzfswL4euyWXYJQcJyK9e3cS5kTpZJ3lSopxHS2E690IqmusiABgd7w9/UbFc64c+R/CjFbR3wcvzcvw9Qk+b2AwOeI2Ypz8atXFD1QLU3m7DByFyaGy2DU5nl7rha6R8U1D0851/Xc8AElFEQQmGW/RQ9ZVfemIMfwBIU659/ZxUvjtcLi8+1Qx/BhoIKqeuoO1XbVaiehDOFYQIFmDCcjdOvOrAGTn1Qb0GhDoH49nXVaR+JE7pQmIyc4QTo+d9Twa/5/pH0+9xvhKoFdVbbEOTM3OjYsoK7rMRPiJfTewTBJnOBLQN9/BTQVXGVAZ2RB2UFebqIAee5/hGlu0XiNhh3ymqL2xe8SUO7d6uh76Xc9ReGeApQgmTBYjWIYDzaRke16FKuU/BwoP7J/edH9BFxtHoSLFQNL+w2BSPLmQ2W7ACzM1bq7Y6Fv1Ckn5qj2M7Y4LxDl8IIVXhYG/Zv2vFG6gAsgyJ5dKGF9ZWB1cUVNZV0z666GfQXQTYJJ40i86f4Odsj8EYNpfLV8vxvF4zBaj+sXnBm5KGGtQz5+JuFXs6EUxxTROkpvGb6bWPFUWjAeU2xQMiwSf6A1RqMll2ZYYT5SaqtaQDxEDBfzrTQDM61z52WZ/56Dd6hcewpsG2ylPlHd7ApEJF69EGQ6CQkRJsfWJ1PcB1RAryAte4fistebzZxV6jCs8OfSIxVaZE1Ngo4d0OEA2KlSGSx35PvaIRWT71RuUDYijVuptVVv2DNZjmFrojqiQTk3n6HVgypxoVP4piMUEmUhStxgNTIyLmawwL73HV0qBeHKyFltfYHHQKnYPCWY=",
    "max-score": 1
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "From a Spectre to a Tree",
    "stars": 3
  },
  {
    "id": "spectre",
    "prelude": "(* A type of trees where only the leaves carry data. *)\n\ntype 'a tree =\n  | Leaf of 'a\n  | Fork of 'a tree * 'a tree\n\n(* A depth is a natural integer. *)\n\ntype depth =\n  int\n\n(* A spectre is a list of pairs of an element and its depth. *)\n\ntype 'a spectre =\n  ('a * depth) list\n\n(* A facility for reading and consuming the elements of a list. *)\n\ntype position =\n  int\n\ntype 'a input =\n  {\n    peek: unit -> 'a option;\n    consume: unit -> unit;\n    current: unit -> position;\n  }\n\n(* The following exceptions are intended to be raised by [build]. *)\n\nexception InputIsTooShort of position\nexception InputIsTooLong of position\nexception InputIsIllFormed of position\n",
    "template": "(* The data values carried by the leaves of a tree. *)\n\nlet elements (t : 'a tree) : 'a list =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The depths of the leaves of a tree. *)\n\nlet depths (t : 'a tree) : depth list =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The elements and depths, combined. *)\n\nlet spectre (t : 'a tree) : 'a spectre =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* A facility for reading and consuming the elements of a list. *)\n\nlet new_input (xs : 'a list) : 'a input =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* Reconstructing a tree from its spectre. *)\n\nlet build (depths : 'a spectre) : 'a tree =\n  (* TO DO: Define this function. *)\n  raise TODO\n",
    "descr": [
      [
        "",
        "<h1 id=\"From-a-Spectre-to-a-Tree\">From a Spectre to a Tree</h1>\n\n<p>Suppose we have an algebraic data type <code>&#39;a tree</code> of binary trees where each\nleaf carries a piece of data of type <code>&#39;a</code>.</p>\n<pre><code>  type &#39;a tree =\n    | Leaf of &#39;a\n    | Fork of &#39;a tree * &#39;a tree</code></pre>\n\n<p>For instance, the tree <code>Fork (Leaf &#39;a&#39;, Fork (Leaf &#39;b&#39;, Leaf &#39;c&#39;))</code>\nhas type <code>char tree</code>, as its leaves carry characters.\nThe list of the data values carried by its leaves,\nread from left to right,\nis <code>[&#39;a&#39;; &#39;b&#39;; &#39;c&#39;]</code>.\nThe list of the depths of its leaves,\nread from left to right,\nis <code>[1; 2; 2]</code>.</p>\n<p>In fact, these two lists are sufficient to describe this tree in an\nunambiguous manner: no other tree has the same list of leaf data and\nthe same list of leaf depths.</p>\n<p>Let us combine these lists, and use the word <em>spectre</em> to refer a list\nof pairs of a datum and a depth:</p>\n<pre><code>  type depth =\n    int\n  type &#39;a spectre =\n    (&#39;a * depth) list</code></pre>\n\n<p>The spectre of the tree\n<code>Fork (Leaf &#39;a&#39;, Fork (Leaf &#39;b&#39;, Leaf &#39;c&#39;))</code>\nis\n<code>[(&#39;a&#39;, 1); (&#39;b&#39;, 2); (&#39;c&#39;, 2)]</code>.</p>\n<p>A tree is unambiguously described by its spectre: two distinct trees must have\ndistinct spectres.</p>\n<p>This raises the question: from a spectre, how does one reconstruct a tree?</p>\n<p>This simple question gives rise to a nontrivial exercise,\nwhich can be solved in several ways.</p>\n<p>This is really a <em>parsing</em> problem. Indeed, parsing consists in reconstructing\na tree out of a purely sequential representation of this tree. Furthermore,\nbecause the spectre of a tree carries the depth of each leaf, reconstructing\na tree from a spectre is analogous to <em>indentation-aware parsing</em>.</p>\n<h2 id=\"Warmup-From-a-Tree-to-its-Spectre\">Warmup: From a Tree to its Spectre</h2>\n\n<p><strong>Question 1.</strong> Define a function <code>elements</code> of type <code>&#39;a tree -&gt; &#39;a list</code>\nthat computes the list of the data values carried by the leaves of a tree.</p>\n<p><strong>Question 2.</strong> Define a function <code>depths</code> of type <code>&#39;a tree -&gt; depth list</code>\nthat computes the list of the depths of the leaves of a tree.</p>\n<p><strong>Question 3.</strong> Define a function <code>spectre</code> of type <code>&#39;a tree -&gt; &#39;a spectre</code>\nthat computes the spectre of a tree.</p>\n<p><em>Note.</em> The above three questions have na√Øve solutions that use the list\nconcatenation operation <code>@</code> and (because of that) have quadratic time\ncomplexity. It is possible to avoid the use of concatenation by defining\nauxiliary functions that take an accumulator (a list) as an extra argument.\nThis yields solutions that have linear time complexity.</p>\n<h2 id=\"Setting-up-an-Input-Channel\">Setting up an Input Channel</h2>\n\n<p>In preparation for the next question, let us construct a simple notion of\n<em>input channel</em>.</p>\n<p>An input channel helps us read a sequence of things: for instance, a sequence\nof bits, a sequence of characters, or (in this exercise) a spectre, that is, a\nsequence of pairs of a datum and a depth.</p>\n<p>Although we could work with an explicit representation of the input (say, as a\nlist of things that remain to be read), it is preferable to adopt a more\nabstract point of view and to view an <em>input channel</em> as an abstract object.\nIt is useful to think of an input channel as a <em>read head</em> that moves along\na fixed <em>tape</em>. An input channel supports three operations, namely:</p>\n<ul><li><p><code>peek()</code> returns <code>Some x</code>, where <code>x</code> is the element in front of the read\n head, if there is one. It returns <code>None</code> if the input has been exhausted,\n that is, if the read head has reached the end of the input.</p>\n</li><li><p><code>consume()</code> discards the next input element. In other words, it moves the\n read head forward by one element. Invoking <code>consume</code> is permitted only if\n the read head has <em>not</em> yet reached the end of the input.</p>\n</li><li><p><code>current()</code> indicates how many times <code>consume</code> has been called so far. In\n other words, it returns the current position of the read head.</p>\n</li></ul>\n\n<p>An input channel can be represented as a record of three functions,\nas follows:</p>\n<pre><code>  type position =\n    int\n\n  type &#39;a input =\n    {\n      peek: unit -&gt; &#39;a option;\n      consume: unit -&gt; unit;\n      current: unit -&gt; position;\n    }</code></pre>\n\n<p><strong>Question 4.</strong> Define a function <code>new_input</code> of type <code>&#39;a list -&gt; &#39;a input</code>\nsuch that <code>new_input xs</code> constructs a new input channel whose read head lies\nat the beginning of the input sequence <code>xs</code>.</p>\n<p><em>Note.</em> One could also make <code>&#39;a input</code> an abstract type, declare <code>new_input</code>\nas a toplevel function that returns a new input channel, and declare <code>peek</code>,\n<code>consume</code>, and <code>current</code> as three toplevel functions that take an input\nchannel as an argument. The two approaches are almost equivalent. There is one\nslight difference: the record-of-functions approach is more open-ended than\nthe abstract-type approach, as it allows a user to construct input channels\nhowever she wishes, whereas in the abstract-type approach, the function\n<code>new_input</code> is the only way of creating an input channel.</p>\n<h2 id=\"From-a-Spectre-to-a-Tree_1\">From a Spectre to a Tree</h2>\n\n<p>We now reach the main question of this exercise. We state the question first,\nthen provide extra details and some hints.</p>\n<p><strong>Question 5.</strong> Define a function <code>build</code> of type <code>&#39;a spectre -&gt; &#39;a tree</code> that\nreconstructs a tree, given its spectre. In other words, for every tree <code>t</code>,\nthe equality <code>build (spectre t) = t</code> should hold. If the list <code>xds</code> is not a\nvalid spectre, then <code>build xds</code> should raise one of the exceptions presented\nbelow, indicating why and where the input list has been found invalid.</p>\n<p>In order to fully understand the above question, one must be aware that not\nevery list of type <code>&#39;a spectre</code> is a valid spectre.</p>\n<ul><li><p>Some lists are too short: e.g., <code>[(&#39;a&#39;, 1)]</code> is not a valid spectre, because\n no tree has one leaf at depth 1 and no other leaves. The longer list\n <code>[(&#39;a&#39;, 1); (&#39;b&#39;, 1)]</code> is a valid spectre.</p>\n</li><li><p>Some lists are too long: e.g., <code>[(&#39;a&#39;, 0); (&#39;b&#39;, 0)]</code> is not a valid\n spectre, because no tree has two leaves at depth zero. The shorter\n list <code>[(&#39;a&#39;, 0)]</code> is a valid spectre.</p>\n</li><li><p>Some lists are ill-formed: e.g., <code>[(&#39;a&#39;, 2); (&#39;b&#39;, 1); (&#39;c&#39;, 2)]</code>\n is not a valid spectre, as no tree has two leaves at depth 2 with a\n leaf at depth 1 between them.</p>\n</li></ul>\n\n<p>Thus, we define the following exceptions:</p>\n<pre><code>  exception InputIsTooShort of position\n  exception InputIsTooLong of position\n  exception InputIsIllFormed of position</code></pre>\n\n<p>We expect the function <code>build</code> (see Question 5, above) to raise one of these\nexceptions and to provide an appropriate position, indicating exactly where in\nthe input the problem has been detected. (Positions are numbered 0 and up.)</p>\n<p><em>Hint.</em> Regardless of the manner in which you intend to attack the problem, we\nrecommend converting the input list to an input channel and making this input\nchannel a parameter of every auxiliary function. Since a spectre is a list of\npairs of a datum and a depth, the type of this input channel must be\n<code>(&#39;a * int) input</code>.</p>\n<p>If you would like more suggestions on how to attack the problem, please read\non.</p>\n<h3 id=\"Grammatical-structure-of-the-problem\">Grammatical structure of the problem</h3>\n\n<p>The main function <code>build</code> is expected to build a tree whose root lies at\ndepth 0. Such a tree is either just a <code>Leaf</code> whose depth is 0 or a <code>Fork</code>\nwhose subtrees lie at depth 1. Each of these subtrees itself is either just a\n<code>Leaf</code> whose depth is 1 or a <code>Fork</code> whose subtrees lie at depth 2; and so on.</p>\n<p>In general, one can say that a <em>subtree at depth <code>d</code></em> is either a <code>Leaf</code> whose\ndepth is <code>d</code> or a <code>Fork</code> whose children are subtrees at depth <code>d+1</code>. One might\nwrite this in Backus-Naur Form (BNF) as follows:</p>\n<pre><code>  subtree@{d} ::= Leaf (_, d)\n                | Fork (subtree@{d+1}, subtree@{d+1})</code></pre>\n\n<p>Someone who is familiar with the theory of formal languages might note that\nthis is very much like a <em>context-free grammar</em>. Technically, it is not a\ncontext-free grammar, because it has an infinite number of nonterminal symbols\n<code>subtree@{0}</code>, <code>subtree@{1}</code>, etc. Nevertheless, one can use a number of\nwell-known approaches to parsing, such as the <em>top-down approach</em> and the\n<em>bottom-up</em> approach, to solve this problem. We describe both; the top-down\napproach is easier to understand.</p>\n<h3 id=\"The-top-down-approach\">The top-down approach</h3>\n\n<p>The <em>top-down approach</em>, also known as the <em>recursive descent</em> approach,\nconsists in writing an auxiliary function <code>subtree</code> which takes a depth <code>d</code> as\na parameter and is in charge of recognizing and building a <em>subtree at depth\n<code>d</code></em>, as defined above.</p>\n<p>More precisely, the function <code>subtree</code> should have type\n<code>int -&gt; (&#39;a * int) input -&gt; &#39;a tree</code>. The function call\n<code>depth d input</code> is expected to consume a portion of the\ninput that corresponds to a subtree at depth <code>d</code> and to\nreturn this subtree.</p>\n<p>The main difficulty in the implementation of <code>subtree</code> is\nto choose between recognizing a <code>Leaf</code>, recognizing a\n<code>Fork</code>, and reporting an ill-formed input. Think about it!</p>\n<h3 id=\"The-bottom-up-approach\">The bottom-up approach</h3>\n\n<p>The <em>bottom-up</em> approach consists in working with a list of subtrees, each of\nwhich is accompanied by its depth. Whenever two subtrees at depth <code>d+1</code> are\nadjacent in the list, they can be combined into a single subtree at depth <code>d</code>.\nSuch a combination step is known as a <em>reduction</em>. If the input data is\nwell-formed, then this process eventually terminates with a list that contains\na single subtree at depth <code>0</code>.</p>\n<p>Although this idea may seem simple, implementing it in such a way that it\nruns in linear time requires some thought.</p>\n<p>A bottom-up parser works with a <em>stack</em>, a list of pairs of a subtree and its\ndepth:</p>\n<pre><code>  type &#39;a stack =\n    (&#39;a tree * int) list</code></pre>\n\n<p>The stack should be thought of as a part of the input that has already been\nread and partly processed. One should think of it as lying <em>behind</em> the read\nhead, while the remaining input lies <em>ahead</em> of the read head. The top of the\nstack is its right end, just behind the read head.</p>\n<p>A bottom-up parser works as follows:</p>\n<ul><li><p>Initially, the stack is empty. All of the input lies\n ahead of the read head.</p>\n</li><li><p>Under certain conditions, the parser can <em>shift</em> the read head, that is,\n move it towards the right. This involves removing one pair <code>(x, d)</code> from the\n input and pushing the pair <code>(Leaf x, d)</code> onto the stack. Thus, the element\n <code>x</code>, which was the first item in front of the read head, is now viewed as a\n subtree that consists of just a leaf, and is now located just behind the\n read head.</p>\n</li><li><p>Under certain conditions, the parser can <em>reduce</em>, that is, combine the\n topmost two subtrees on the stack. Indeed, if the topmost two subtrees <code>t</code>\n and <code>u</code> both lie at some depth <code>d+1</code>, then they can be replaced on the stack\n with a single tree <code>Fork (t, u)</code> at depth <code>d</code>. Sometimes, several reduction\n steps can be taken in succession.</p>\n</li><li><p>Finally, if at some point the stack consists of a single subtree <code>t</code> at\n depth 0 and the read head has reached the end of input, then the parser terminates and returns <code>t</code> as its final result.</p>\n</li></ul>\n\n<p>The main difficulty in the implementation of a bottom-up parser is again to\nchoose between shifting, reducing, and declaring that the input is ill-formed.</p>\n<p><em>Hint</em>. The stack must normally satisfy the following invariant:</p>\n<ul><li><p>The subtree-depth pairs on the stack, read from the left towards the right,\n have <em>strictly increasing</em> depth components.</p>\n</li><li><p>If the stack is nonempty, then the topmost subtree-depth pair on the stack\n has a <em>nonzero</em> depth component.</p>\n</li></ul>\n\n<p>A shift action can temporarily break this invariant by pushing onto the stack\na new subtree whose depth is <em>equal</em> to the depth of the current topmost\nsubtree. (It is not allowed to push a new subtree whose depth is <em>less</em> than\nthe depth of the current topmost subtree. Think about it!) In that case, the\ninvariant can be repaired by performing one or more reduce actions. If, after\nthese actions, the topmost subtree has depth 0, and if there is no remaining\ninput, then the parser terminates successfully.</p>\n<h2 id=\"Notes\">Notes</h2>\n\n<p>The task of reconstructing a tree from its spectre appears as a subroutine in\n<a href='https://en.wikipedia.org/wiki/Garsia%E2%80%93Wachs_algorithm'>Garsia and Wachs&#39; algorithm</a>, whose purpose is to construct a minimum-cost\nbinary tree out of a sequence of leaves and their weights. There, the cost of\na tree is defined as the sum over all leaves of the weight of this leaf\nmultiplied by the depth at which this leaf appears.\n<a href='https://www-cs-faculty.stanford.edu/~knuth/programs/garsia-wachs.w'>Knuth</a>\nproposes a &quot;quick and dirty&quot; implementation of the Garsia-Wachs algorithm in C\nand uses the top-down approach, which he attributes to Tarjan, to reconstruct\na tree from its spectre.\n<a href='https://www.lri.fr/~filliatr/publis/gw-wml08.pdf'>Filli√¢tre</a> implements the\nsame algorithm in OCaml. <a href='https://doi.org/10.1017/S0956796819000194'>Bird</a>\nproposes a different implementation of the Garsia-Wachs algorithm in Haskell\nand uses the bottom-up approach to reconstruct a tree from its spectre.</p>\n<p>The top-down approach and the bottom-up approach are close cousins of the\nparsing techniques known in the literature as\n<a href='https://en.wikipedia.org/wiki/LL_parser'>LL(1)</a> and\n<a href='https://en.wikipedia.org/wiki/LR_parser'>LR(1)</a>, respectively.</p>\n<p>Parsing a list of elements annotated with their depth is related to\n<em>indentation-aware parsing</em>, where the amount of whitespace found at the\nbeginning of each line influences the parser. Adams&#39; paper\n<a href='https://michaeldadams.org/papers/layout_parsing/LayoutParsing.pdf'>Principled Parsing for Indentation-Sensitive\nLanguages</a>\ndescribes an indentation-aware extension of LR(1).</p>\n"
      ]
    ],
    "prepare": "3etpO7BoXvNyOhtCekmE",
    "test": "",
    "solution": "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",
    "max-score": 5,
    "depend": null,
    "dependencies": []
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "A pretty-printer",
    "stars": 3,
    "backward_exercises": [
      "fpottier/persistent_arrays"
    ]
  },
  {
    "id": "pprint",
    "prelude": "(* The type of requirements. *)\n\ntype req =\n  | Infinite\n  | Finite of int (* always nonnegative *)\n\n(* The type of documents. *)\n\ntype doc =\n  | Empty\n  | HardLine\n  | Char of char (* never '\\n' *)\n  | Cat of req * doc * doc\n  | Nest of int * req * doc\n  | Group of req * doc\n  | IfFlat of doc (* never [IfFlat _] *) * doc\n\n(* The internal state of the rendering engine. *)\n\ntype state =\n  {\n    (* The line width. *)\n    width: int;\n    (* The current column. *)\n    mutable column: int;\n    (* The output buffer. *)\n    output: Buffer.t;\n  }\n",
    "template": "(* Addition of requirements. *)\n\nlet (++) (req1 : req) (req2 : req) : req =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* Comparison of requirements. *)\n\nlet (<==) (req1 : req) (req2 : req) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* Determining the space requirement of a document. *)\n\n(* This function is expected to run in constant time. *)\n\nlet rec requirement (doc : doc) : req =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* Smart constructors. *)\n\nlet empty : doc =\n  Empty\n\nlet hardline : doc =\n  HardLine\n\nlet char (c : char) : doc =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet (^^) (doc1 : doc) (doc2 : doc) : doc =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet nest (i : int) (doc : doc) : doc =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet group (doc : doc) : doc =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet ifflat (doc1 : doc) (doc2 : doc) : doc =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet rec render state (indent : int) (flatten : bool) doc =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet pretty width doc =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n",
    "descr": [
      [
        "",
        "<h1 id=\"A-pretty-printer\">A pretty-printer</h1>\n\n<p>In this problem, we build a slightly scaled-down version of\n<a href=\"https://github.com/fpottier/pprint/\" target=\"_blank\" rel=\"noopener noreferrer\">pprint</a>,\na library that helps display tree-structured data\nas text\nwhose maximum width is fixed (to, say, 80 columns).</p>\n<p>The user of the library describes the data as a <strong>document</strong>, a data type that\ndescribes what should be displayed and several ways in which it could be\ndisplayed. The library renders documents as text according to a fixed set of\nrules.</p>\n<p>Building and rendering a document are intended to\nrequire linear time in the size of the document.</p>\n<h2 id=\"Requirements\">Requirements</h2>\n\n<p>Before we can display a document, we must compute its horizontal space\nrequirement, that is, how much horizontal space this document would\nrequire, if it were displayed on a single line.</p>\n<p>Some documents, however, cannot be displayed on a single line; they require\nseveral lines. We will consider that these documents have an infinite\nhorizontal space requirement.</p>\n<p>Thus, a <strong>requirement</strong> is either <code>Infinite</code> or <code>Finite i</code>,\nwhere <code>i</code> is a nonnegative integer:</p>\n<pre><code>type req =\n  | Infinite\n  | Finite of int</code></pre>\n\n<p><strong>Question 1.</strong> Define a function <code>(++)</code> of type <code>req -&gt; req -&gt; req</code>\nsuch that <code>req1 ++ req2</code> is the addition of the requirements <code>req1</code>\nand <code>req2</code>.</p>\n<p><strong>Question 2.</strong> Define a function <code>(&lt;==)</code> of type <code>req -&gt; req -&gt; bool</code>\nsuch that <code>req1 &lt;== req2</code> is true if and only the requirement <code>req1</code>\nis less than or equal the requirement <code>req2</code>.</p>\n<p>In the following, addition is used to compute the space requirement\nof a composite document, whereas comparison is used to test whether\nthere remains enough space on the current line to display a document.</p>\n<h2 id=\"Documents\">Documents</h2>\n\n<p>The algebraic data type of <strong>documents</strong> is as follows:</p>\n<pre><code>type doc =\n  | Empty\n  | HardLine\n  | Char of char\n  | Cat of req * doc * doc\n  | Nest of int * req * doc\n  | Group of req * doc\n  | IfFlat of doc * doc</code></pre>\n\n<h2 id=\"The-meaning-of-a-document\">The meaning of a document</h2>\n\n<p>A document can be displayed in one of two modes, namely <strong>flattening mode</strong>\nand <strong>normal mode</strong>. When displayed in flattening mode, a document fits on a\nsingle line. When displayed in normal mode, a document can occupy one or more\nlines.</p>\n<p>The appearance of a document is also influenced by the current <strong>indentation\nlevel</strong>, a nonnegative integer <code>n</code>. Every time a new line begins, <code>n</code> spaces\nare printed.</p>\n<p>With these two ideas in mind,\nthe meaning of each document constructor\ncan be described as follows:</p>\n<ul><li><p>The document <code>Empty</code> is empty.</p>\n</li><li><p>The document <code>HardLine</code> imposes a line break,\n followed with <code>n</code> spaces,\n where <code>n</code> is the current indentation level.\n Therefore, this document cannot be displayed on a single line.\n The pretty-printer is designed in such a way\n that this document cannot be encountered when\n the printer is in flattening mode.</p>\n</li><li><p>The document <code>Char c</code> represents a single character, namely <code>c</code>.</p>\n</li><li><p>A composite document of the form <code>Cat (_, doc1, doc2)</code>\n represents the concatenation of the documents <code>doc1</code> and <code>doc2</code>.</p>\n</li><li><p>A document of the form <code>Nest (i, _, doc)</code> represents the document <code>doc</code>,\n inside which the indentation level has been changed from <code>n</code> to <code>n+i</code>.</p>\n</li><li><p>In flattening mode, a document of the form <code>Group (_, doc)</code> is treated like <code>doc</code>.\n In normal mode, the document <code>Group (_, doc)</code> denotes a choice between two\n ways of displaying the document <code>doc</code>. The first alternative is to enter\n flattening mode and display <code>doc</code> on a single line. (Any <code>Group</code> constructors\n inside <code>doc</code> are then ignored.) This alternative is permitted only if <code>doc</code>\n fits on the current line. The second alternative is to ignore this <code>Group</code>\n constructor and display <code>doc</code> in normal mode.</p>\n</li><li><p>The document <code>IfFlat (doc1, doc2)</code> is displayed as <code>doc1</code> in flattening mode\n and as <code>doc2</code> in normal mode.</p>\n</li></ul>\n\n<h2 id=\"Well-formedness-constraints\">Well-formedness constraints</h2>\n\n<p>Documents are subject to the following well-formedness constraints:</p>\n<ul><li><p>In <code>Char c</code>, the character <code>c</code> is never a newline character <code>&#39;\\n&#39;</code>.</p>\n</li><li><p>In <code>IfFlat (doc1, doc2)</code>, the document <code>doc1</code> is never itself <code>IfFlat _</code>.\n That is, <code>IfFlat</code> cannot be nested in the left-hand side of <code>IfFlat</code>.</p>\n</li><li><p>In <code>Cat (req, doc1, doc2)</code>, <code>req</code> is the combined horizontal space\n requirement of <code>doc1</code> and <code>doc2</code>.</p>\n</li><li><p>In <code>Nest (i, req, doc)</code> and in <code>Group (req, doc)</code>,\n <code>req</code> is the horizontal space requirement of <code>doc</code>.</p>\n</li></ul>\n\n<p>As indicated in the last two points above,\nin a well-formed document,\nsome space requirements\nhave been computed ahead of time\nand stored.\n(This computation is the topic of Question 4.)</p>\n<p>The last three points above are designed so as to allow the function\n<code>requirement</code> (below) to have constant time complexity.</p>\n<h2 id=\"Computing-or-fetching-a-space-requirement\">Computing or fetching a space requirement</h2>\n\n<p><strong>Question 3.</strong> Define a function <code>requirement</code> of type <code>doc -&gt; req</code> such that\n<code>requirement doc</code> is the horizontal space requirement of the document <code>doc</code>.\nOne may assume that <code>doc</code> is well-formed. This function must have <strong>constant\ntime complexity</strong>.</p>\n<h2 id=\"Smart-constructors\">Smart constructors</h2>\n\n<p>Allowing the end user to use the data constructors <code>Empty</code>, <code>Char</code>, etc.,\nwould be dangerous, as the user would then be able to build documents that do\nnot respect the well-formedness constraint described above. Furthermore,\nexposing the concrete definition of the algebraic data type <code>doc</code> would limit\nour ability to change this definition in the future.</p>\n<p>For these reasons, we prefer to present <code>doc</code> as an abstract data type to the\nend user. As a result, we must also expose a number of construction functions,\nsometimes known as <em>smart constructors</em>. These functions are designed in such\na way that they always produce well-formed documents.</p>\n<p><strong>Question 4.</strong>\nDefine a smart constructor <code>char</code> of type <code>char -&gt; doc</code>. For every character\n<code>c</code>, including the newline character <code>&#39;\\n&#39;</code>, <code>char c</code> must be a well-formed\ndocument.\nDefine a smart constructor <code>(^^)</code> of type <code>doc -&gt; doc -&gt; doc</code>.\nDefine a smart constructor <code>nest</code> of type <code>int -&gt; doc -&gt; doc</code>.\nDefine a smart constructor <code>group</code> of type <code>doc -&gt; doc</code>.\nDefine a smart constructor <code>ifflat</code> of type <code>doc -&gt; doc -&gt; doc</code>.</p>\n<p>In the previous question, certain optional optimizations are permitted. For\ninstance, <code>(^^)</code> may recognize <code>empty</code> as a neutral element for concatenation.\n<code>nest</code> may recognize that two consecutive <code>Nest</code> constructors can be fused.\n<code>group</code> may recognize that two consecutive <code>Group</code> constructors can be fused.\n<code>ifflat</code> must ensure that <code>IfFlat</code> never appears in the left-hand side of\n<code>IfFlat</code> (this is necessary for its result to be well-formed), and may also\nensure that <code>IfFlat</code> never appears in the right-hand side of <code>IfFlat</code>.</p>\n<h2 id=\"Rendering-a-document\">Rendering a document</h2>\n\n<p>The rendering engine, which transforms a document into a piece of text,\nis implemented by a recursive function <code>render</code>. This function is then\nwrapped in a simpler, non-recursive function, <code>pretty</code>.</p>\n<p>The function <code>render</code> has a <code>state</code> parameter\nwhose type, also named <code>state</code>, is defined as follows:</p>\n<pre><code>type state =\n  {\n    width: int;\n    mutable column: int;\n    output: Buffer.t;\n  }</code></pre>\n\n<p>This record holds the maximum text width (for instance, 80 columns),\nthe current column number, and\n<a href=\"https://caml.inria.fr/pub/docs/manual-ocaml/libref/Buffer.html\" target=\"_blank\" rel=\"noopener noreferrer\">an output buffer</a>.</p>\n<p><strong>Question 5.</strong>\nDefine a recursive function <code>render</code> of type\n<code>state -&gt; int -&gt; bool -&gt; doc -&gt; unit</code>.\nThis function takes four parameters,\nnamely the state <code>state</code>,\nthe current indentation level <code>n</code>,\nthe Boolean flag <code>flatten</code>,\nwhich indicates whether flattening mode is active,\nand a document <code>doc</code>.\nThe purpose of this function is to render the document <code>doc</code>\nas text in the output buffer <code>state.output</code>.\nIn <code>render</code>, it is permitted to assume that\nif <code>flatten</code> is <code>true</code>\nthen the document <code>doc</code> fits on the remainder of the current line.\n(Dually, at every call to <code>render</code>, one must guarantee that\nthis property holds!)\nFinally,\ndefine a function <code>pretty</code> of type <code>int -&gt; doc -&gt; string</code>,\nwhich allocates a new buffer, calls <code>render</code>, and returns\nthe final contents of the buffer.</p>\n"
      ]
    ],
    "prepare": "nReqzKNJrYz1ASanjit/",
    "test": "",
    "solution": "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",
    "max-score": 9
  },
  null
]
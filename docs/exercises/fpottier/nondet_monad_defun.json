[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Implementing Nondeterminism as an Abstract Machine",
    "stars": 3
  },
  {
    "id": "nondet_monad_defun",
    "prelude": "(* The module [Seq] is standard as of OCaml 4.07. *)\n\nmodule Seq = struct\n\n  type 'a t = unit -> 'a node\n\n  and +'a node =\n  | Nil\n  | Cons of 'a * 'a t\n\n  let nil =\n    fun () -> Nil\n\n  let cons x xs =\n    fun () -> Cons (x, xs)\n\n  let singleton x =\n    cons x nil\n\n  let rec map (f : 'a -> 'b) (xs : 'a t) : 'b t =\n    fun () ->\n      match xs() with\n      | Nil ->\n          Nil\n      | Cons (x, xs) ->\n          Cons (f x, map f xs)\n\n  let rec concat (xs : 'a t) (ys : 'a t) : 'a t =\n    fun () ->\n      match xs() with\n      | Nil ->\n          ys()\n      | Cons (x, xs) ->\n          Cons (x, concat xs ys)\n\n  let rec flatten (xss : 'a t t) : 'a t =\n    fun () ->\n      match xss() with\n      | Nil ->\n          Nil\n      | Cons (xs, xss) ->\n          concat xs (flatten xss) ()\n\n  let rec take n (xs : 'a t) : 'a t =\n    if n = 0 then\n      nil\n    else\n      fun () ->\n        match xs() with\n        | Nil ->\n            Nil\n        | Cons (x, xs) ->\n            Cons (x, take (n-1) xs)\n\n  let head (xs : 'a t) : 'a option =\n    match xs() with\n    | Nil ->\n        None\n    | Cons (x, _) ->\n        Some x\n\n  let rec of_list (xs : 'a list) : 'a t =\n    fun () ->\n      match xs with\n      | [] ->\n          Nil\n      | x :: xs ->\n          Cons (x, of_list xs)\n\n  (* A word of warning: [to_list] does not terminate if it is applied\n     to an infinite sequence. Furthermore, this version of [to_list]\n     is not tail-recursive and could exhaust the stack space if it was\n     applied to a long sequence. *)\n\n  let rec to_list (xs : 'a t) : 'a list =\n    match xs() with\n    | Nil ->\n        []\n    | Cons (x, xs) ->\n        x :: to_list xs\n\nend\n\n(* A nondeterministic computation is a data structure, described by the\n   following generalized algebraic data type. *)\n\n(* A nondeterministic computation can also be interpreted as a process\n   that produces a sequence of results. This interpretation is performed\n   by the function [compute]. *)\n\ntype 'a m =\n| MDelay:               (unit -> 'a m) -> 'a m\n| MReturn:                          'a -> 'a m\n| MBind:           'a m * ('a -> 'b m) -> 'b m\n| MFail:                                  'a m\n| MChoose:                 'a m * 'a m -> 'a m\n| MReflect: ('a * 'a m) option failure -> 'a m\n\n(* A failure continuation is a data structure, described by the following\n   generalized algebraic data type. *)\n\n(* A failure continuation can also be interpreted as a function that takes\n   no argument and returns a final answer. This interpretation is performed\n   by the function [apply_failure]. *)\n\n(* An [FChoose] entry is known in the logic programming literature as a\n   choice point. Each [FChoose] entry contains a pointer [f] to another\n   failure continuation, so a failure continuation can be viewed as a\n   stack of choice points, represented in memory as a linked list. One\n   of [FSols] and [FSplit] serves to indicate the bottom of the stack. *)\n\nand 'answer failure =\n| FChoose:\n    (* m2: *) 'a m *\n    (* s : *) ('a, 'answer) success *\n    (* f : *) 'answer failure ->\n              'answer failure\n| FSols:\n    _ Seq.node failure\n| FSplit:\n    _ option failure\n\n(* A success continuation is a data structure, described by the following\n   generalized algebraic data type. *)\n\n(* A success continuation can also be interpreted as a function that takes\n   one argument (a result) and returns a final answer. This interpretation\n   is performed by the function [apply_success]. *)\n\n(* Each [SBind] entry contains a pointer [s] to another success continuation,\n   so a success continuation can be viewed as a stack, represented in memory\n   as a linked list. One of [SSols] and [SSplit] serves to indicate the bottom\n   of the stack. *)\n\nand ('a, 'answer) success =\n| SBind:\n    (* m2: *) ('a -> 'b m) *\n    (* s : *) ('b, 'answer) success ->\n              ('a, 'answer) success\n| SSols:\n    ('a, 'a Seq.node) success\n| SSplit:\n    ('a, ('a * 'a m) option) success\n\n(* Implementing this constructor function is immediate. *)\n\nlet delay (m : unit -> 'a m) : 'a m =\n  MDelay m\n\n(* The effect of executing the computation [tick m] is to first increment the\n   global counter [work], then execute the computation [m]. *)\n\n(* The grading code uses these operations in order to check that computations\n   are executed on demand, that is, as late as possible. *)\n\nlet work =\n  ref 0\n\nlet reset() =\n  work := 0\n\nlet tick (m : 'a m) : 'a m =\n  delay (fun () ->\n    work := !work + 1;\n    m\n  )\n\nlet snapshot (x : 'a) : 'a * int =\n  (x, !work)\n",
    "template": "(* The following four constructor functions are implemented already. *)\n\nlet return (x : 'a) : 'a m =\n  MReturn x\n\nlet (>>=) (m1 : 'a m) (m2 : 'a -> 'b m) : 'b m =\n  MBind (m1, m2)\n\nlet fail : 'a m =\n  MFail\n\nlet choose (m1 : 'a m) (m2 : 'a m) : 'a m =\n  MChoose (m1, m2)\n\n(* The bulk of the work is to implement an interpreter for each of the\n   data types [_ failure], [(_, _) success], and [_ m]. *)\n\nlet rec apply_failure : type answer . answer failure -> unit -> answer =\n  fun f () ->\n    match f with\n    | FChoose (m2, s, f) ->\n        (* Invoked when the left branch of a choice has failed.\n           [m2] is the right branch of the choice.\n           [s] and [f] are the continuations of the choice. *)\n        raise TODO (* one line *)\n    | FSols ->\n        (* Used at the top level of [sols].\n           Invoked when there is no result. *)\n        raise TODO (* one line *)\n    | FSplit ->\n        (* Used at the top level of [msplit].\n           Invoked when there is no result. *)\n        raise TODO (* one line *)\n\nand apply_success : type a answer .\n  (a, answer) success -> a -> answer failure -> answer\n=\n  fun s x f ->\n    match s with\n    | SBind (m2, s) ->\n        (* Invoked when the left branch of a sequence produces a result [x].\n           [m2] is the right-hand side of the sequence.\n           [s] is the success continuation of the sequence. *)\n        raise TODO (* one line *)\n    | SSols ->\n        (* Used at the top level of [sols].\n           Invoked when the computation produces a result [x]. *)\n        (* Hint: construct a sequence whose head is [x] and whose\n                 tail is [f], converted to the type of a sequence.\n                 There is an easy way of performing this conversion. *)\n        raise TODO (* one line *)\n    | SSplit ->\n        (* Used at the top level of [msplit].\n           Invoked when the computation produces a result [x]. *)\n        (* Hint: construct an optional-pair whose first component is [x]\n                 and whose second component is [f], converted to the type\n                 of a computation. There is an easy way of performing this\n                 conversion.  *)\n        raise TODO (* one line *)\n\nand compute : type a answer .\n  a m -> (a, answer) success -> answer failure -> answer\n=\n  fun m s f ->\n    match m with\n    | MDelay m ->\n        (* Hint: evaluate [m()] and continue. *)\n        raise TODO (* one line *)\n    | MReturn x ->\n        (* Hint: successfully produce the result [x]. *)\n        raise TODO (* one line *)\n    | MBind (m1, m2) ->\n        (* Hint: enter the left-hand side [m1] with an\n                 appropriate success continuation. *)\n        raise TODO (* one line *)\n    | MFail ->\n        (* Hint: fail. *)\n        raise TODO (* one line *)\n    | MChoose (m1, m2) ->\n        (* Hint: enter the left-hand side [m1] with an\n                 appropriate failure continuation. *)\n        raise TODO (* one line *)\n    | MReflect k ->\n        (* We have a failure continuation [k], which was captured earlier and\n           wrapped with [MReflect] so as to disguise it as a computation. We are\n           now asked to execute this computation. Thus, we must call this\n           failure continuation, whose answer type is [('a * 'a m) option].\n           Depending on whether this yields [None] or [Some (x, m)], we must\n           behave either like [fail] or like [choose (return x) m]. *)\n        raise TODO (* five lines *)\n\nlet sols (m : 'a m) : 'a Seq.t =\n  (* TO DO: Define this function. *)\n  raise TODO (* one line *)\n\nlet msplit (m : 'a m) : unit -> ('a * 'a m) option =\n  (* TO DO: Define this function. *)\n  raise TODO (* one line *)\n\nlet at_most_once (m : 'a m) : 'a m =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet rec interleave (m1 : 'a m) (m2 : 'a m) : 'a m =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet rec (>>-) (m1 : 'a m) (m2 : 'a -> 'b m) : 'b m =\n  (* TO DO: Define this function. *)\n  raise TODO\n",
    "descr": [
      [
        "",
        "<h1 id=\"Implementing-Nondeterminism-as-an-Abstract-Machine\">Implementing Nondeterminism as an Abstract Machine</h1>\n\n<p>In this exercise, we build an implementation of the nondeterminism\nmonad. This monad admits several possible implementations. The one\nthat we choose here can be described as an <em>abstract machine</em> that\ninterprets a piece of <em>code</em> and uses two auxiliary stack-like data\nstructures, namely a <em>success continuation</em>, and a <em>failure continuation</em>.\nEach of these three data structures is described by a generalized\nalgebraic data type.</p>\n<p>This implementation can be viewed as a defunctionalized version\nof the continuation-based implementation studied in\n<a onclick=\"top.location='/exercises/nondet_monad_cont/';\" href=''>another exercise</a>.\nThe underlying algorithm is exactly the same,\nbut whereas the continuation-based implementation represents\ncode and continuations as first-class functions,\nthis implementation represents them as data structures.</p>\n<p>We suggest doing the other exercise first\nand attempting this exercise next.</p>\n<h2 id=\"The-Nondeterminism-Monad\">The Nondeterminism Monad</h2>\n\n<p>When searching for the solution of a problem, one must typically\nexplore multiple choices. If a series of choices lead to a failure\n(a dead end), then one must backtrack and explore another avenue.</p>\n<p>There are a number of ways in which nondeterminism and backtracking\ncan be implemented. Regardless of which implementation mechanism is\nchosen, it is desirable to hide it behind an abstraction barrier and\npresent the end user with <strong>a simple API for constructing an executing\nnondeterministic computations</strong>.</p>\n<p>This API is known as the <strong>nondeterminism monad</strong>. It offers the\nfollowing key elements:</p>\n<ul><li><p>A type <code>&#39;a m</code>, the type of computations that yield results of type\n <code>&#39;a</code>.</p>\n</li><li><p>A number of constructor functions for constructing computations,\n such as <code>fail: &#39;a m</code>, which represents failure, and <code>choose: &#39;a m\n  -&gt; &#39;a m -&gt; &#39;a m</code>, which expresses a nondeterministic choice\n between two computations.</p>\n</li><li><p>A single observation function, <code>sols: &#39;a m -&gt; &#39;a Seq.t</code>, which\n converts a computation to a sequence of results, thereby allowing\n the user to execute this computation and observe its results. The\n name <code>sols</code> stands for <code>solutions</code>.</p>\n</li></ul>\n\n<p>A monad can be thought of as a <strong>mini-programming language</strong> where\ncomputations are first-class citizens: we have a type of\ncomputations, ways of building computations, and a way of executing\ncomputations.</p>\n<p>A computation in the nondeterminism monad can produce zero, one, or\nmore results. Indeed, a computation that fails produces zero\nresults. A computation that succeeds normally produces one result.\nA computation that uses <code>choose</code> can produce more than one result.\nIt is in fact possible to construct computations that produce an\ninfinite number of results!</p>\n<p>Thus, a useful way to think of a computation is as <strong>a sequence of\nresults</strong>, that is, a sequence of results.</p>\n<p>Because of this remark, one might be tempted to define the type <code>&#39;a\nm</code> as a synonym for <code>&#39;a Seq.t</code>, the type of sequences of values of\ntype <code>&#39;a</code>. However, although it is possible to represent a\ncomputation internally as a sequence (and we will do so in this\nexercise), this is not necessarily the best implementation\ntechnique. Thus, we prefer to make the API more flexible by viewing\n<code>&#39;a m</code> as an abstract type and by offering an observation function,\n<code>sols</code>, which converts a computation to a sequence.</p>\n<h2 id=\"The-Nondeterminism-Monad-39-s-API\">The Nondeterminism Monad&#39;s API</h2>\n\n<p>The signature, or API, of the nondeterminism monad is as follows:</p>\n<pre><code>  (* Type. *)\n  type &#39;a m\n\n  (* Constructor functions. *)\n  val return: &#39;a -&gt; &#39;a m\n  val (&gt;&gt;=): &#39;a m -&gt; (&#39;a -&gt; &#39;b m) -&gt; &#39;b m\n  val fail: &#39;a m\n  val choose: &#39;a m -&gt; &#39;a m -&gt; &#39;a m\n  val delay: (unit -&gt; &#39;a m) -&gt; &#39;a m\n  val at_most_once: &#39;a m -&gt; &#39;a m\n  val interleave: &#39;a m -&gt; &#39;a m -&gt; &#39;a m\n  val (&gt;&gt;-): &#39;a m -&gt; (&#39;a -&gt; &#39;b m) -&gt; &#39;b m\n\n  (* Observation function. *)\n  val sols: &#39;a m -&gt; &#39;a Seq.t</code></pre>\n\n<p>As explained above, a value of type <code>&#39;a m</code> is <strong>a description of a\ncomputation</strong>, which, once executed, produces a sequence of results\nof type <code>&#39;a</code>.</p>\n<p>To execute a computation <code>m</code>, one must first convert it to a\nsequence of type <code>&#39;a Seq.t</code>, whose elements can then be demanded,\none by one. (More information on the module <code>Seq</code> is given below.)\nThis conversion is performed by the observation function <code>sols</code>.</p>\n<p>The call <code>sols m</code> typically terminates in constant time; the actual\ncomputation described by <code>m</code> takes place only when the elements of\nthe sequence <code>sols m</code> are demanded, and only insofar as necessary to\nproduce the elements that are demanded. For instance, applying\n<code>Seq.head</code> to the sequence <code>sols m</code> forces the computation to\nproceed up to the point where it is able to produce its first\nresult.</p>\n<p>The constructor functions <code>return</code> and <code>(&gt;&gt;=)</code> exist in all monads.\n(They are also known as <code>return</code> and <code>bind</code>.) <code>return</code> constructs a\ntrivial computation, which does nothing except return a value,\nwhereas <code>(&gt;&gt;=)</code> constructs the sequential composition of two\ncomputations. Together, they allow constructing the sequential\ncomposition of an arbitrary number of computations.</p>\n<ul><li><p>The computation <code>return v</code> succeeds exactly once with the value\n <code>v</code>. In other words, the sequence of values that it produces is\n the singleton sequence composed of just <code>v</code>.</p>\n</li><li><p>The computation <code>m1 &gt;&gt;= m2</code> is the sequential composition of the\n computations <code>m1</code> and <code>m2</code>. This composition operator is\n asymmetric: whereas its first argument <code>m1</code> is a computation of\n type <code>&#39;a m</code>, its second argument <code>m2</code> is a function of type <code>a -&gt;\n  &#39;b m</code>. Every value <code>x</code> produced by <code>m1</code> is passed to <code>m2</code>,\n yielding a computation <code>m2 x</code>. The sequence of values produced by\n <code>m1 &gt;&gt;= m2</code> is the concatenation of the sequences of values\n produced by the computations <code>m2 x</code>, where <code>x</code> ranges over the\n values produced by <code>m1</code>.</p>\n</li></ul>\n\n<p>The constructor functions <code>fail</code> and <code>choose</code> are specific of the\nnondeterminism monad. <code>fail</code> can be thought of as a 0-ary\ndisjunction, whereas <code>choose</code> is a binary disjunction. Together,\nthey allow constructing the disjunction of an arbitrary number of\ncomputations.</p>\n<ul><li><p>The computation <code>fail</code> returns no result. In other words, it\n produces an empty sequence of values.</p>\n</li><li><p>The sequence of values produced by <code>choose m1 m2</code> is the\n concatenation of the sequences of values produced by <code>m1</code>\n and by <code>m2</code>.</p>\n</li></ul>\n\n<p>The constructor function <code>delay</code> is used to delay the construction\nof a computation until the moment where this computation must be\nexecuted. Indeed, a difficulty that arises in a strict programming\nlanguage, such as OCaml, is that the arguments passed to constructor\nfunctions, such as <code>return</code> and <code>choose</code>, are evaluated immediately,\nat construction time. For instance, when one writes <code>choose e1 e2</code>,\nboth of the OCaml expressions <code>e1</code> and <code>e2</code> are evaluated before\n<code>choose</code> is invoked. If the evaluation of <code>e2</code> performs nontrivial\nwork, then this work arguably takes place too early: indeed, there\nshould be no need to evaluate <code>e2</code> until all of the values produced\nby <code>e1</code> have been demanded. To remedy this, one may write <code>choose e1\n(delay (fun () -&gt; e2))</code>. There, the expression <code>e2</code> is placed in the\nbody of an anonymous function, so <code>e2</code> is not evaluated immediately.\nThis anonymous function, whose type is <code>unit -&gt; &#39;a m</code>,\nis converted by <code>delay</code> to a computation of type <code>&#39;a m</code>.\nThis conversion requires no serious work;\nit is performed in constant time.\nAn intuitive reason why this is possible is that the type <code>&#39;a m</code>\nrepresents a <em>suspended</em> computation already,\nso the type <code>unit -&gt; &#39;a m</code> represents a <em>suspended suspended</em>\ncomputation, which is essentially the same thing; these types\nare interconvertible at no cost.</p>\n<p>The computations <code>e</code> and <code>delay (fun () -&gt; e)</code> produce the same\nsequence of results. The only difference between them is the time at\nwhich the evaluation of <code>e</code> takes place: either immediately, or only\nwhen the first result is demanded.</p>\n<p>It is worth noting that in a lazy language, such as Haskell, there\nis no need for <code>delay</code>. In such a language, when one writes <code>choose\ne1 e2</code>, the expressions <code>e1</code> and <code>e2</code> are <em>not</em> evaluated\nimmediately: they are evaluated only when their value is demanded.\nThus, the fact that <code>e2</code> need not be evaluated until all of the\nvalues produced by <code>e1</code> have been demanded goes without saying. The\nfact that there is no need for explicit uses of <code>delay</code> is arguably\na strength of lazy languages. At the same time, the fact that it is\nnot obvious where laziness plays a crucial role is arguably a\nweakness of lazy languages. In OCaml, in contrast, the explicit use\nof <code>delay</code> can be verbose, but helps understand what is going on.</p>\n<p>The constructor function <code>at_most_once</code> constructs a computation\nthat succeeds at most once. If <code>m</code> fails, then <code>at_most_once m</code>\nfails as well. If <code>m</code> produces a result <code>x</code>, possibly followed with\nmore results, then <code>at_most_once m</code> produces just the result <code>x</code>,\nand no more. This combinator can be used to commit to a result and\nprevent any other choices from being explored. In other words, it\nlimits the amount of backtracking that takes place.</p>\n<p>The constructor function <code>interleave</code> has the same type as <code>choose</code>.\nIt is a <em>fair disjunction</em> operator. An ordinary disjunction <code>choose\nm1 m2</code> gives priority to its left branch: it first lets <code>e1</code> produce\nas many results as it wishes, then gives control to <code>e2</code>. This can\nbe problematic: if <code>e1</code> produces a large number of results, then\n<code>e2</code> is tried very late. At an extreme, if <code>e1</code> produces an infinite\nnumber of results, then <code>e2</code> is never tried. For instance, supposing\nthat <code>evens</code> produces the infinite sequence <code>0, 2, 4, ...</code> and\n<code>odds</code> produces the infinite sequence <code>1, 3, 5, ...</code>,\nthe disjunction <code>choose evens odds</code> is equivalent to just <code>evens</code>,\nwhich seems counter-intuitive and undesirable. In contrast,\n<code>interleave</code> is defined in such a way that <code>interleave evens odd</code>\nproduces the infinite sequence <code>0, 1, 2, 3, 4, 5, ...</code>.\nIt is <em>fair</em> in the sense that each branch in turn is allowed\nto produce a result.</p>\n<p>The constructor function <code>(&gt;&gt;-)</code> has the same type as <code>(&gt;&gt;=)</code>.\nIt is a <em>fair sequencing</em> operator.\nIndeed, a problem with ordinary sequencing <code>(&gt;&gt;=)</code> is that\nit gives rise to ordinary (unfair) disjunctions.\nTo see this, suppose that the left-hand argument of <code>(&gt;&gt;=)</code>\nis a computation that produces <code>x</code> as its first result,\nfollowed with a computation <code>m1</code> that may produce more results.\nThus, this left-hand argument is equivalent to\n<code>choose (return x) m1</code>.\nWhen we sequentially compose it with a computation <code>m2</code>,\nwe obtain\n<code>(choose (return x) m1) &gt;&gt;= m2</code>,\nwhich is equivalent to\n<code>choose (return x &gt;&gt;= m2) (m1 &gt;&gt;= m2)</code>,\nwhich itself is the same as\n<code>choose (m2 x) (m1 &gt;&gt;= m2)</code>.\nWe are faced with an ordinary (unfair) disjunction.\nThe problem, again, is that if <code>m2 x</code> produces an\ninfinite number of results, then <code>m1 &gt;&gt;= m2</code>\nis never executed.\nTo remedy this problem,\nthe fair sequencing operator <code>(&gt;&gt;-)</code>\nis defined in such a way that\n<code>choose (return x) m1 &gt;&gt;- m2</code>\nis equivalent to\n<code>interleave (m2 x) (m1 &gt;&gt;- m2)</code>.\nThus, it gives rise to a fair disjunction.</p>\n<h2 id=\"The-Seq-API\">The <code>Seq</code> API</h2>\n\n<p>The type of <strong>on-demand sequences</strong> is defined in a module named <code>Seq</code>.\nBeginning with version 4.07,\nthis module is part of OCaml&#39;s standard library.</p>\n<pre><code>module Seq : sig\n\n  type &#39;a t = unit -&gt; &#39;a node\n\n  and +&#39;a node =\n  | Nil\n  | Cons of &#39;a * &#39;a t\n\n  val nil : &#39;a t\n  val cons: &#39;a -&gt; &#39;a t -&gt; &#39;a t\n  val singleton: &#39;a -&gt; &#39;a t\n\n  val map: (&#39;a -&gt; &#39;b) -&gt; &#39;a t -&gt; &#39;b t\n  val concat: &#39;a t -&gt; &#39;a t -&gt; &#39;a t\n  val flatten: &#39;a t t -&gt; &#39;a t\n\n  val take: int -&gt; &#39;a t -&gt; &#39;a t\n\n  val head: &#39;a t -&gt; &#39;a option\n\n  val of_list: &#39;a list -&gt; &#39;a t\n  val to_list: &#39;a t -&gt; &#39;a list\n\nend</code></pre>\n\n<p>This data type is closely related to the algebraic data type of lists.\nIndeed, if instead of <code>unit -&gt; &#39;a node</code> one had written just <code>&#39;a node</code>,\nthen this data type would have been isomorphic to the type of lists.</p>\n<p>The presence of <code>unit -&gt; ...</code> indicates that a sequence is in fact a function.\nCalling this function, by applying it to the value <code>()</code>, amounts to requesting\nthe head of the sequence. This head can be either <code>Nil</code>, which means that the\nsequence is empty, or <code>Cons (x, xs)</code>, which means that the first element of\nthe sequence is <code>x</code> and the remaining elements form another sequence <code>xs</code>. It\nis worth noting that <code>xs</code> is itself a function, so the elements of the\nsequence <code>xs</code> need not be explicitly computed until <code>xs</code> is applied.</p>\n<p>Sequences are closely related to <em>iterators</em> in object-oriented languages,\nsuch as C++ and Java. Yet, sequences are much simpler than iterators, for\ntwo reasons:</p>\n<ul><li><p>they involve no mutable state;</p>\n</li><li><p>they are just as easy to construct and to use as ordinary lists.</p>\n</li></ul>\n\n<p>The functions <code>nil</code>, <code>cons</code>, and <code>singleton</code> are constructor functions.</p>\n<p>The functions <code>map</code>, <code>concat</code>, <code>flatten</code> are analogues for sequences\nof the standard list functions <code>List.map</code>, <code>(@)</code>, and\n<code>List.flatten</code>.</p>\n<p>The function <code>Seq.take</code> truncates a sequence at a certain length:\n<code>Seq.take n xs</code> is a sequence that begins like <code>xs</code> but has at most\n<code>n</code> elements.</p>\n<p>The function <code>Seq.head</code> demands the first element of a sequence. If\nthe sequence begins with an element <code>x</code>, then <code>Some x</code> is returned;\notherwise, <code>None</code> is returned. This forces enough computation to\ntake place so as to be able to produce the first element of the\nsequence.</p>\n<p>The functions <code>Seq.of_list</code> and <code>Seq.to_list</code> convert between lists\nand sequences, both ways. One must keep in mind that applying\n<code>Seq.to_list</code> to a sequence <code>xs</code> causes all of its elements to be\ndemanded: that is, it forces all of the suspended computations to\ntake place. In particular, if <code>xs</code> is an infinite sequence, then\n<code>Seq.to_list xs</code> does not terminate.</p>\n<h2 id=\"Data-Structures-for-Continuations-and-Computations\">Data Structures for Continuations and Computations</h2>\n\n<p>In this exercise, we implement an abstract machine that manipulates three data\nstructures: a <strong>computation</strong>, a <strong>failure continuation</strong>, and a <strong>success\ncontinuation</strong>. The idea is, in general, the computation indicates what to do\nnext; in the case where the computation is <code>fail</code>, the failure continuation\nindicates what to do next; in the case where the computation is <code>return x</code>,\nthe success continuation indicates what to do next.</p>\n<p>Each of these three data structures is described by a generalized algebraic\ndata type. We now give the definitions of these data types. (These definitions\ncan in fact be <em>deduced</em> from the solution of the\n<a onclick=\"top.location='/exercises/nondet_monad_cont/';\" href=''>companion exercise</a>,\nby defunctionalization, but we leave this story for another time.)</p>\n<p>The type <code>&#39;a m</code> of <strong>computations</strong> is defined as follows:</p>\n<pre><code>type &#39;a m =\n| MDelay:               (unit -&gt; &#39;a m) -&gt; &#39;a m\n| MReturn:                          &#39;a -&gt; &#39;a m\n| MBind:           &#39;a m * (&#39;a -&gt; &#39;b m) -&gt; &#39;b m\n| MFail:                                  &#39;a m\n| MChoose:                 &#39;a m * &#39;a m -&gt; &#39;a m\n| MReflect: (&#39;a * &#39;a m) option failure -&gt; &#39;a m</code></pre>\n\n<p>The data constructors <code>MDelay</code>, <code>MReturn</code>, <code>MBind</code>, <code>MFail</code>, and <code>MChoose</code>\ncorrespond directly to the constructor functions <code>delay</code>, <code>return</code>, <code>&gt;&gt;=</code>,\n<code>fail</code>, and <code>choose</code>. In other words, a computation is represented internally\nby its syntax.</p>\n<p>If <code>f</code> is a failure continuation whose answer type is <code>(&#39;a * &#39;a m) option</code>,\nthen <code>MReflect f</code> is a computation. In other words, the data constructor\n<code>MReflect</code> allows disguising such a failure continuation as a computation.\nThis is useful in the implementation of the operation <code>msplit</code>, which\nitself is used in Question 2-4, as in the\n<a onclick=\"top.location='/exercises/nondet_monad_cont/';\" href=''>companion exercise</a>.</p>\n<p>The type <code>&#39;answer failure</code> of <strong>failure continuations</strong> is defined as follows:</p>\n<pre><code>and &#39;answer failure =\n| FChoose:\n    (* m2: *) &#39;a m *\n    (* s : *) (&#39;a, &#39;answer) success *\n    (* f : *) &#39;answer failure -&gt;\n              &#39;answer failure\n| FSols:\n    _ Seq.node failure\n| FSplit:\n    _ option failure</code></pre>\n\n<p>Thus, a failure continuation is a data structure. This data structure can be\n<em>interpreted</em> as a function of type <code>unit -&gt; &#39;answer</code> by the function\n<code>apply_failure</code>, whose type is\n<code>&#39;answer failure -&gt; unit -&gt; &#39;answer</code>,\nand whose code you have to complete as part of this exercise.\nThere are three data constructors:</p>\n<ul><li><p><code>FChoose (m2, s, f)</code> records the fact that a choice of the form <code>choose m1\n  m2</code> has been entered. The right-hand branch <code>m2</code> as well as the current\n success and failure continuations <code>s</code> and <code>f</code> are recorded, so as to allow\n the computation to continue if and after the left-hand branch <code>m1</code> fails.</p>\n</li><li><p><code>FSols</code> records the fact that this computation is executed by the\n observation function <code>sols</code>. When interpreted as a function, this\n failure continuation returns <code>Seq.Nil</code>.</p>\n</li><li><p><code>FSplit</code> records the fact that this computation is executed by the\n observation function <code>msplit</code>. When interpreted as a function, this\n failure continuation returns <code>None</code>.</p>\n</li></ul>\n\n<p>The type <code>(&#39;a, &#39;answer) success</code> of <strong>success continuations</strong> is defined\nas follows:</p>\n<pre><code>and (&#39;a, &#39;answer) success =\n| SBind:\n    (* m2: *) (&#39;a -&gt; &#39;b m) *\n    (* s : *) (&#39;b, &#39;answer) success -&gt;\n              (&#39;a, &#39;answer) success\n| SSols:\n    (&#39;a, &#39;a Seq.node) success\n| SSplit:\n    (&#39;a, (&#39;a * &#39;a m) option) success</code></pre>\n\n<p>Thus, a success continuation is a data structure. This data structure can be\n<em>interpreted</em> as a function of type <code>&#39;a -&gt; &#39;answer failure -&gt; &#39;answer</code>\nby the function <code>apply_success</code>,\nwhose type is <code>(&#39;a, &#39;answer) success -&gt; &#39;a -&gt; &#39;answer failure -&gt; &#39;answer</code>,\nand whose code you have to complete as part of this exercise.\nThere are three data constructors:</p>\n<ul><li><p><code>SBind (m2, s)</code> records the fact that a sequence of the form <code>m1 &gt;&gt;= m2</code> has\n been entered. The right-hand side of the sequence <code>m2</code> as well as the\n current success continuation <code>s</code> are recorded so as to allow the computation\n to continue if (and every time) <code>m1</code> produces a result.</p>\n</li><li><p><code>SSols</code> records the fact that this computation is executed by the\n observation function <code>sols</code>. When interpreted as a function, this\n success continuation returns an answer of the form <code>Seq.Cons (_, _)</code>.</p>\n</li><li><p><code>SSplit</code> records the fact that this computation is executed by the\n observation function <code>msplit</code>. When interpreted as a function, this\n success continuation returns an answer of the form <code>Some (_, _)</code>.</p>\n</li></ul>\n\n<p>The data types <code>&#39;a m</code>, <code>&#39;answer failure</code> and <code>(&#39;a, &#39;answer) success</code> are\nmutually recursive. Thus, the three functions which interpret these data\ntypes, namely <code>compute</code>, <code>apply_failure</code>, and <code>apply_success</code>, are\nmutually recursive as well.</p>\n<h2 id=\"Implementing-the-Abstract-Machine\">Implementing the Abstract Machine</h2>\n\n<p>The four constructor functions <code>return</code>, <code>(&gt;&gt;=)</code>, <code>fail</code>, and <code>choose</code>\nhave been implemented for you already. They are trivial anyway.</p>\n<p><strong>Question 1.</strong>\nComplete the definitions of the functions\n<code>apply_failure</code>, <code>apply_success</code>, and <code>compute</code>.\nThen, implement the observation function <code>sols</code>.</p>\n<p><em>Note.</em> The automated grading system first tests whether your code\nis functionally correct. To do so, it builds a computation using the\nfour constructor functions, converts it to a sequence via <code>sols</code>,\nand tests whether this produces the expected sequence of results.\nThen, it tests whether your code is lazy, that is, whether each\nresult is computed as late as possible. To do so, it uses a\nconstructor function <code>tick: &#39;a m -&gt; &#39;a m</code> whose effect is as\nfollows: the computation <code>tick m</code> produces the same sequence of\nresults as the computation <code>m</code>, and, when executed, increments a\nglobal counter named <code>work</code>. Thus, by executing computations that\ncontain <code>tick</code>s, the automated grading system can tell when\ncomputations are executed. For instance, demanding just the first\nresult of the computation\n<code>choose (tick (return 0)) (tick (return 1))</code> should cause <code>work</code> to\nbe incremented just once, not twice.</p>\n<p><em>Note.</em> The automated grading system for Question 1 does not exercise the\ncases for <code>FSplit</code>, <code>SSplit</code> and <code>MReflect</code> in the abstract machine. In order\nto ensure that your code deals with these cases correctly, you must continue\nthis exercise and pass Questions 2-4 as well.</p>\n<p>As in the continuation-based implementation described in a\n<a onclick=\"top.location='/exercises/nondet_monad_cont/';\" href=''>companion exercise</a>,\nbefore attacking Questions 2-4,\nwe must define an auxiliary function, <code>msplit</code>.</p>\n<p>The need for <code>msplit</code> arises from the following remark. When executed, a\ncomputation of type <code>&#39;a m</code> produces a sequence of results. Such a sequence\nmust be either empty or nonempty, and in the latter case, it must have a first\nelement and a remainder. If a computation <em>was</em> just a sequence (that is, if\nthe type <code>&#39;a m</code> was a synonym for <code>&#39;a Seq.t</code>), then we could distinguish these\ntwo situations just by performing a case analysis.</p>\n<p>Because we have defined the type <code>&#39;a m</code> in a different way, a direct case\nanalysis is impossible. Instead, the idea is to define a function <code>msplit</code>\nthat <em>converts</em> from the type <code>&#39;a m</code> to the type <code>unit -&gt; (&#39;a * &#39;a m) option</code>.\nThis opens the door to a case analysis. In short, <code>msplit</code> allows us to\nperform case analysis on a computation <em>as if</em> it was a sequence, even though\nits internal representation is different.</p>\n<p><strong>Question X.</strong> (Not graded.)\nComplete the implementation of the auxiliary function <code>msplit.</code></p>\n<p>Once <code>msplit</code> is available,\nQuestions 2-4 are answered in exactly the same way as in the\n<a onclick=\"top.location='/exercises/nondet_monad_cont/';\" href=''>companion exercise</a>.</p>\n<p><strong>Question 2.</strong> Implement the constructor function <code>at_most_once</code>.</p>\n<p><em>Hint.</em> Use <code>msplit</code> to determine if the computation at hand fails or produces\nat least one result. In the first case, recall that <code>at_most_once fail</code> is\nsupposed to behave like <code>fail</code>. In the second case, recall that\n<code>at_most_once (choose (return x) m)</code> is supposed to behave like\n<code>return x</code>.</p>\n<p><em>Hint.</em> Use <code>delay</code> to ensure that the case analysis is performed when\nthe computation <code>at_most_once m</code> is <em>executed</em>, not when it is <em>built</em>.</p>\n<p><strong>Question 3.</strong> Implement the constructor function <code>interleave</code>.</p>\n<p><em>Hint.</em> Again, use <code>delay</code> and <code>msplit</code> in an appropriate manner.\nThen, ask yourself how <code>interleave fail m2</code> is supposed to behave,\nand how <code>interleave (choose (return x1) m1) m2</code> is supposed\nto behave.</p>\n<p><strong>Question 4.</strong> Implement the constructor function <code>(&gt;&gt;-)</code>.</p>\n<p><em>Hint.</em> Again, use <code>delay</code> and <code>msplit</code> in an appropriate manner.\nThen, ask yourself how <code>fail &gt;&gt;- m2</code> is supposed to behave,\nand how <code>(choose (return x1) m1) &gt;&gt;- m2</code> is supposed\nto behave.</p>\n<h2 id=\"Notes\">Notes</h2>\n\n<p>This implementation can be obtained from the continuation-based implementation studied in\n<a onclick=\"top.location='/exercises/nondet_monad_cont/';\" href=''>another exercise</a>\nin a systematic manner by performing\n<a href='https://en.wikipedia.org/wiki/Defunctionalization'>defunctionalization</a>.\nThis is in fact arguably a rather natural way of discovering this\nimplementation, as it could otherwise be difficult to <em>guess</em> the\ndefinitions of the algebraic data types <code>_ failure</code>,\n<code>(_, _) success</code>, and <code>_ m</code>.\nThe paper\n<strong>Polymorphic typed defunctionalization and concretization</strong>\n<a href='http://gallium.inria.fr/~fpottier/publis/fpottier-gauthier-hosc.pdf'>(Pottier and Gauthier, 2006)</a>\nexplains how defunctionalization\ngives rise to a generalized algebraic data type\nand an <code>apply</code> function\nin the transformed program.\nHere, the process gives rise to three generalized algebraic data types\nand three <code>apply</code> functions, because we defunctionalize computations,\nsuccess continuations, and failure continuations independently.</p>\n<p>One potential advantage of the defunctionalized version is the fact that it\ncan be implemented in a programming language that does not support first-class\nfunctions, such as C.</p>\n"
      ]
    ],
    "prepare": "VwQ5Gy4Ak6i7y9AXLVzK",
    "test": "",
    "solution": "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",
    "max-score": 8,
    "depend": null,
    "dependencies": []
  },
  null
]
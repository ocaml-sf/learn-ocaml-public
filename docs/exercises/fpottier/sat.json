[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "A SAT solver",
    "stars": 3,
    "backward_exercises": [
      "fpottier/random_access_lists"
    ]
  },
  {
    "id": "sat",
    "prelude": "type var = int\n\ntype formula =\n  | FConst of bool\n  | FConn  of bool * formula * formula\n  | FNeg   of formula\n  | FVar   of var\n\ntype env = var -> bool\n",
    "template": "(* ------------------------------------------------------------------------------ *)\n\n(* Building formulae. *)\n\nlet var x =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet falsity =\n  FConst false\n\nlet truth =\n  FConst true\n\nlet const sense =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet neg f =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet conn sense f1 f2 =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet conj f1 f2 =\n  conn true f1 f2\n\nlet disj f1 f2 =\n  conn false f1 f2\n\n(* ------------------------------------------------------------------------------ *)\n\n(* Evaluating formulae. *)\n\nlet rec eval (env : env) (f : formula) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet foreach_env (n : int) (body : env -> unit) : unit =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet satisfiable (n : int) (f : formula) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet valid (n : int) (f : formula) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* ------------------------------------------------------------------------------ *)\n\n(* Converting formulae to conjunctive normal form. *)\n\nmodule CNF (X : sig\n  type clause\n  val empty: clause\n  val cons: bool -> var -> clause -> clause\n  val new_var: unit -> var\n  val new_clause: clause -> unit\nend)\n= struct\n  open X\n\n  (* The conjunction of the clauses emitted by [decompose s f c] must be logically\n     equivalent to the formula [s.f \\/ c]. *)\n\n  (* It is permitted to assume that [c] is small and therefore to duplicate\n     it. It is not permitted to duplicate [f]. *)\n\n  let rec decompose (s : bool) (f : formula) (c : clause) : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  (* The clause returned by [clause s f c], in conjunction with any\n     emitted clauses, must be logically equivalent to [s.f \\/ c]. *)\n\n  and clause (s : bool) (f : formula) (c : clause) : clause =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  (* The main entry point. *)\n\n  let cnf (f : formula) : unit =\n    decompose true f empty\n\nend\n\n(* -------------------------------------------------------------------------- *)\n\n(* Recreation: determining whether two sorted lists have a common element. *)\n\nlet rec intersect (xs : int list) (ys : int list) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* ------------------------------------------------------------------------------ *)\n\n(* Representing a set of clauses in memory. *)\n\nexception UNSAT\n\nmodule Clauses () = struct\n\n  (* A clause is represented as a list of literals. *)\n\n  type literal = bool * var\n  type clause = literal list\n\n  let empty : clause =\n    (* TO DO: Define this constant. *)\n    raise TODO\n\n  let cons p x clause : clause =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  (* Clauses are numbered and are stored in an infinite array. *)\n\n  let clauses : clause option InfiniteArray.t =\n    InfiniteArray.make None\n\n  let new_clause (clause : clause) : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let count_clauses () : int =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let new_var () : var =\n    (* TO DO: Define this function. *)\n    raise TODO\n\nend\n\n(* ------------------------------------------------------------------------------ *)\n\n(* The undo trail. *)\n\nmodule Trail () : sig\n  val push: (unit -> unit) -> unit\n  type checkpoint\n  val record: unit -> checkpoint\n  val revert: checkpoint -> unit\nend = struct\n\n  let push action =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  type checkpoint\n    (* TO DO: Define this type. *)\n\n  let record () =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let revert i =\n    (* TO DO: Define this function. *)\n    raise TODO\n\nend\n\n(* ------------------------------------------------------------------------------ *)\n\n(* A set of variables. *)\n\nmodule VarSet () : sig\n  val mem: var -> bool\n  val add: var -> unit\n  val remove: var -> unit\n  val pick: unit -> var option\nend = struct\n\n  let mem x =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let add x =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let remove x =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let pick () =\n    (* TO DO: Define this function. *)\n    raise TODO\n\nend\n\n(* ------------------------------------------------------------------------------ *)\n\n(* The SAT solver. *)\n\n(* The functor application [SAT()] initializes a new solver. This solver\n   offers a function [solve], which must be called at most once, because\n   it modifies the solver's internal state. *)\n\nmodule SAT () : sig\n  (* [solve n f] determines whether the formula [f], whose variables must be\n     comprised between 0 included and [n] excluded, is satisfiable. If it is\n     satisfiable, then it returns a solution, in the form of a function of\n     variables to Boolean values. Otherwise, it returns [None]. *)\n  val solve: int -> formula -> (var -> bool) option\nend = struct\n\n  (* Create an (initially empty) set of undecided variables. *)\n\n  module Undecided = VarSet()\n\n  (* Set up an array of all clauses. Override [new_var] so that\n     newly created variables are automatically added to the set\n     of undecided variables. *)\n\n  module C = struct\n\n    include Clauses()\n\n    let new_var () : var =\n      let x = new_var() in\n      Undecided.add x;\n      x\n\n  end\n\n  (* Create an (initially empty) undo trail. *)\n\n  module Trail = Trail()\n\n  (* Set up an array [value] that maps every decided variable [x]\n     to its Boolean value. *)\n\n  let value : bool InfiniteArray.t =\n    InfiniteArray.make false\n\n  (* This is where you begin to work... *)\n\n  let mark_decided (x : var) : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let set_clause (i : int) (clause : C.clause option) : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let set_value (x : var) (p : bool) : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let find_unit_clause () : C.literal option =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let rec propagate () : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let rec explore () : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let solve (n : int) (f : formula) : (var -> bool) option =\n    (* Declare the existence of [n] variables. *)\n    for _i = 0 to n-1 do\n      ignore (C.new_var())\n    done;\n    (* TO DO: Complete the definition of this function. *)\n    raise TODO\n\nend\n",
    "descr": [
      [
        "",
        "<h1 id=\"A-Simple-SAT-Solver\">A Simple SAT Solver</h1>\n\n<p>In this exercise, we build a SAT solver, that is, an algorithm\nthat solves the\n<a href=\"https://en.wikipedia.org/wiki/Boolean_satisfiability_problem\" target=\"_blank\" rel=\"noopener noreferrer\">Boolean satisfiability problem</a>,\nand attempts to do so in an efficient manner.</p>\n<h2 id=\"Building-Formulae\">Building Formulae</h2>\n\n<p>Variables are numbered 0, 1, and so on.</p>\n<pre><code>  type var = int</code></pre>\n\n<p>The syntax of formulae is as follows:</p>\n<pre><code>  type formula =\n    | FConst of bool\n    | FConn  of bool * formula * formula\n    | FNeg   of formula\n    | FVar   of var</code></pre>\n\n<p><em>Falsity</em> is represented by <code>FConst false</code>.\n<em>Truth</em> is represented by <code>FConst true</code>.\nWe refer to falsity and truth as <em>constants</em>.\nThe <em>disjunction</em> of two formulae <code>f1</code> and <code>f2</code>\nis represented by <code>FConn (false, f1, f2)</code>,\nwhile their <em>conjunction</em> is represented by\n<code>FConn (true, f1, f2)</code>.\nThe <em>negation</em> of a formula <code>f</code>\nis represented by <code>FNeg f</code>.\nFinally, a Boolean variable <code>x</code>\nis also a formula,\nrepresented by <code>FVar x</code>.</p>\n<p>It is worth noting that <code>FConst false</code> is\na left and right unit for <code>FConn (false, _, _)</code>:\nthat is, the formulae <code>FConn (false, FConst false, f)</code>\nand <code>FConn (false, f, FConst false)</code> are\nlogically equivalent to <code>f</code>.\nDually, <code>FConst true</code> is\na left and right unit for <code>FConn (true, _, _)</code>.</p>\n<p>The duality between falsity and disjunction on the one hand\nand truth and conjunction on the other hand\ncan sometimes be exploited to avoid code duplication.</p>\n<p>We impose the following invariant on the syntax of formulae:</p>\n<ul><li><p>In a negation <code>FNeg f</code>,\n the subformula <code>f</code> is never a constant or a negation.</p>\n</li><li><p>In a composite formula <code>FConn (_, f1, f2)</code>,\n the subformulae <code>f1</code> and <code>f2</code> are never constants.</p>\n</li></ul>\n\n<p>This invariant is weak. One could think of stronger invariants, such as\n<em>negation normal form</em> (NNF), <em>disjunctive normal form</em> (DNF), and\n<em>conjunctive normal form</em> (CNF). However, transforming a formula so as to\nsatisfy these stronger invariants can be costly. Our invariant can be imposed\nby a set of <em>smart constructors</em> (that is, functions that construct formulae)\nwhile retaining the property that every constructor has constant time\ncomplexity. The four smart constructors that we need are as follows:</p>\n<pre><code>  val const: bool -&gt; formula\n  val conn: bool -&gt; formula -&gt; formula -&gt; formula\n  val neg: formula -&gt; formula\n  val var: var -&gt; formula</code></pre>\n\n<p><strong>Question 1.</strong> Implement the above four smart constructors in such a way that\nthe formulae built by these functions always satisfy the above invariant.</p>\n<h2 id=\"Evaluating-Formulae\">Evaluating Formulae</h2>\n\n<p>We can <em>evaluate</em> a formula (that is, compute its meaning, a Boolean value) if\nwe are given an <em>environment</em>, that is, a function that maps every variable to\na Boolean value.</p>\n<pre><code>  type env = var -&gt; bool</code></pre>\n\n<p><strong>Question 2.</strong> Implement a function <code>eval</code> of type <code>env -&gt; formula -&gt; bool</code>\nsuch that <code>eval env f</code> evaluates the formula <code>f</code> under the environment <code>env</code>.</p>\n<p>A formula is <em>satisfiable</em> if it evaluates to <code>true</code> under <em>some</em> environment.\nA formula is <em>valid</em> if it evaluates to <code>true</code> under <em>every</em> environment.</p>\n<p>To decide whether a formula is satisfiable, or valid, a naïve approach is to\nenumerate all environments and evaluate the formula under each such\nenvironment. If the formula at hand involves <code>n</code> variables, numbered from <code>0</code>\nto <code>n-1</code>, then there are <code>2^n</code> environments of interest.</p>\n<p><strong>Question 3.</strong> Implement a function <code>foreach_env</code> of type\n<code>int -&gt; (env -&gt; unit) -&gt; unit</code> such that\n<code>foreach_env n body</code> applies the function <code>body</code> successively\nto every environment over <code>n</code> variables.\nThen, implement the functions <code>satisfiable</code> and <code>valid</code>,\nboth of which have type <code>int -&gt; formula -&gt; bool</code>,\nsuch that,\nunder the hypothesis that the formula <code>f</code> involves <code>n</code> variables,\n<code>satisfiable n f</code> determines whether <code>f</code> is satisfiable\nand <code>valid n f</code> determines whether <code>f</code> is valid.</p>\n<p><em>Note.</em> <code>foreach_env</code> is not directly tested by the automatic grading code.\nOnly <code>satisfiable</code> and <code>valid</code> are tested.</p>\n<p><em>Hint.</em> One simple approach to implementing <code>foreach_env</code> is to proceed by\ninduction on the number <code>n</code>. When <code>n</code> is zero, then the task is easy, as there\nis only one environment over zero variables. When <code>n</code> is nonzero, if one knows\nhow to enumerate all environments over <code>n-1</code> variables, then it is not\ndifficult to see how one can enumerate all environments over <code>n</code> variables.</p>\n<p><em>Hint.</em> Another approach to implementing <code>foreach_env</code> is to note that the\nenvironments over <code>n</code> variables are in a bijection with the numbers between\n<code>0</code> (included) and <code>2^n</code> (excluded). Thus, to enumerate all environments, a\nsingle loop suffices, provided one is capable of converting an index <code>i</code> in\n<code>[0, 2^n)</code> to an environment.</p>\n<h2 id=\"Converting-Formulae-to-Conjunctive-Normal-Form\">Converting Formulae to Conjunctive Normal Form</h2>\n\n<h3 id=\"Conjunctive-Normal-Form\">Conjunctive Normal Form</h3>\n\n<p>A formula is in <em>negation normal form</em> (NNF) if it does not contain a negation\napplied to a conjunction, disjunction, or negation. In other words, in such a\nformula, every negation must be applied to a variable.</p>\n<p>A formula is in <em>conjunctive normal form</em> if it is in negation normal form and\nfurthermore it does not contain a disjunction applied to a conjunction.</p>\n<p>In other words, a formula in conjunctive normal form is a conjunction of\nclauses, where a <em>clause</em> is a disjunction of literals, and a <em>literal</em> is\neither a variable or the negation of a variable. This can be summed up by the\nfollowing grammar:</p>\n<pre><code>  (literal) l ::= x | ~x\n  (clause)  c ::= l \\/ c | false\n  (cnf)     f ::= c /\\ f | true</code></pre>\n\n<p>Here, we write <code>x</code> for the variable <code>x</code> and <code>~x</code> for the negation of the\nvariable <code>x</code>. In the following, we also use the notation <code>s.x</code>, where <code>s</code>\nis a Boolean flag, to denote <code>x</code> when <code>s</code> is <code>true</code> and <code>~x</code> when <code>s</code> is\n<code>false</code>. Thus, <code>s.x</code> is a literal.</p>\n<p>The propositional formulae that arise in real-world situations are often\nnaturally in conjunctive normal form. Unfortunately, determining whether\na formula in CNF is satisfiable is a hard problem, for which no\npolynomial-time algorithm is known to exist.\n(<a href=\"https://en.wikipedia.org/wiki/Boolean_satisfiability_problem\" target=\"_blank\" rel=\"noopener noreferrer\">3-SAT is NP-complete.</a>)\nTherefore, an algorithm that solves this problem and\nthat runs fast in practice is valuable:\nsuch an algorithm is known as a <em>SAT solver</em>.</p>\n<h3 id=\"CNF-Conversion-Principles\">CNF Conversion: Principles</h3>\n\n<p>An arbitrary formula <code>f</code> can be converted to a CNF formula <code>f&#39;</code> such that <code>f</code>\nand <code>f&#39;</code> are <em>equisatisfiable</em>, that is, <code>f</code> is satisfiable if and only if\n<code>f&#39;</code> is satisfiable. (We implement this conversion in the following question.)\nThus, a SAT solver can be applied also to a formula that is not in conjunctive\nnormal form.</p>\n<p><em>Note.</em> One can obviously determine in linear time whether a formula in\n<em>disjunctive normal form</em> (DNF) is satisfiable. (Think about it.) However,\nconverting an arbitrary formula to an equisatisfiable disjunctive normal form\nhas exponential complexity, so the existence of such a linear-time algorithm\nis not of much interest.</p>\n<p>How does the CNF conversion work?</p>\n<p>First, note that it is easy to convert a formula <code>f</code> to an equivalent formula\n<code>f&#39;</code> in negation normal form (NNF). The idea is to push every negation down\ntowards the leaves. This exploits\n<a href=\"https://en.wikipedia.org/wiki/De_Morgan%27s_laws\" target=\"_blank\" rel=\"noopener noreferrer\">De Morgan&#39;s laws</a>:</p>\n<ul><li><p><code>~(f1 /\\ f2)</code> is equivalent to <code>~f1 \\/ ~f2</code>.</p>\n</li><li><p><code>~(f1 \\/ f2)</code> is equivalent to <code>~f1 /\\ ~f2</code>.</p>\n</li></ul>\n\n<p>This transformation can be performed in linear time. In the following\nquestion, we do not implement it as a separate transformation; instead,\nwe perform this transformation on the fly, at the same time as the CNF\nconversion.</p>\n<p>Second, to perform CNF conversion, there remains to eliminate the situations\nwhere a conjunction appears inside a disjunction, as in the formula <code>a \\/ (b\n/\\ c)</code>. The idea is to introduce a fresh <em>auxiliary variable</em> to stand for the\nproblematic subformula: here, we introduce a new variable <code>x</code> to stand for the\nsubformula <code>b /\\ c</code>. In other words, we exploit the following fact:</p>\n<ul><li><code>a \\/ (b /\\ c)</code> is equivalent to <code>exists x.( (a \\/ x)  /\\  (x &lt;-&gt; b /\\ c) )</code>.</li></ul>\n\n<p>In the main formula, <code>b /\\ c</code> is replaced with <code>x</code>, so\n<code>a \\/ (b /\\ c)</code> becomes <code>a \\/ x</code>, which is in CNF form,\nas desired. On the side, we use a double implication\n<code>x &lt;-&gt; b /\\ c</code> to express the fact that <code>x</code> must have\nthe same truth value as the conjunction <code>b /\\ c</code>.</p>\n<p>A couple more remarks must be made for the above idea to really work.</p>\n<p>First, the use of a double implication <code>x &lt;-&gt; f</code> is problematic.\nBecause double implication does not exist in the syntax of formulae,\nit must be encoded as the conjunction <code>(x -&gt; f) /\\ (f -&gt; x)</code>,\nor <code>(~x \\/ f) /\\ (~f \\/ x)</code>, where the subformula <code>f</code> is\nduplicated. Unless we are careful, this duplication could cause an\nexponential blowup in the size of formulae.\nFortunately, there is in reality no need for a double implication:\na single implication <code>x -&gt; f</code> suffices. Indeed,</p>\n<ul><li><code>a \\/ (b /\\ c)</code> is equivalent to <code>exists x.( (a \\/ x)  /\\  (x -&gt; b /\\ c) )</code>.</li></ul>\n\n<p>Please take some time to understand why this is true.</p>\n<p>Second, the existential quantification <code>exists x.(...)</code> is not really\nindispensable. Indeed, the above equivalence implies that:</p>\n<ul><li><p>the original formula <code>a \\/ (b /\\ c)</code> is satisfiable if and only if the\n transformed formula <code>(a \\/ x) /\\ (x -&gt; b /\\ c)</code> is satisfiable, and</p>\n</li><li><p>a satisfying assignment of the transformed formula\n is also a satisfying assignment of the original formula.</p>\n</li></ul>\n\n<p>In summary, thanks to the above ideas, an arbitrary formula <code>f</code> can be\nconverted to a CNF formula <code>f&#39;</code> such that <code>f</code> and <code>f&#39;</code> are <em>equisatisfiable</em>\nand a satisfying assignment of <code>f&#39;</code> is also a satisfying assignment of <code>f</code>.\nFurthermore, the size of <code>f&#39;</code> is linear with respect to the size of <code>f</code>, and\nthe conversion can be performed in linear time.</p>\n<h3 id=\"CNF-Conversion-Implementation\">CNF Conversion: Implementation</h3>\n\n<p>In the next question, you must implement CNF conversion as a functor,\nnamed <code>CNF</code>, whose signature is as follows:</p>\n<pre><code>   module CNF (X : sig\n     type clause\n     val empty: clause\n     val cons: bool -&gt; var -&gt; clause -&gt; clause\n     val new_var: unit -&gt; var\n     val new_clause: clause -&gt; unit\n   end) : sig\n    val cnf: formula -&gt; unit\n  end</code></pre>\n\n<p>In short, this means that you have access to several functions that allow you\nto create new auxiliary variables and to declare new clauses. Using these\nfacilities, you must define a single function, <code>cnf</code>, which receives a formula\nas an argument and transforms it to conjunctive normal form. This CNF is stored in the internal state of the module and\nis modified by each call to its functions.</p>\n<p>In greater detail, the facilities to which you have access\ncan be described as follows.</p>\n<ul><li><p>There is an abstract type <code>clause</code> of clauses. (Recall that a clause is a\n disjunction of literals.) There is a constant <code>empty</code>, which represents the\n empty clause. (The empty clause is logically equivalent to the formula\n <code>false</code>.) There is also a function <code>cons</code>, which builds a nonempty clause:\n if <code>c</code> is a clause, then <code>cons s x c</code> represents the clause <code>s.x \\/ c</code>, that\n is, the disjunction of the literal <code>s.x</code> and of the clause <code>c</code>.</p>\n</li><li><p>There is a function <code>new_var</code>\n such that <code>new_var()</code> creates and returns a fresh variable <code>x</code>.</p>\n</li><li><p>There is a function <code>new_clause</code>\n such that <code>new_clause c</code>\n declares the clause <code>c</code>.</p>\n</li></ul>\n\n<p>The functions <code>new_var</code> and <code>new_clause</code> have a side effect: <code>new_var</code> adds\nthe newly created variable to a growing set of <em>all auxiliary variables\ncreated so far</em>; <code>new_clause c</code> adds the clause <code>c</code> to a growing conjunction\nof <em>all clauses declared so far</em>.</p>\n<p>Using these facilities, you are expected to implement the function <code>cnf</code>,\nwhich receives a formula <code>f</code> and must construct an equisatisfiable formula\nin conjunctive normal form. This construction is carried out via suitable\ncalls to <code>new_var</code> and <code>new_clause</code>. No result is returned.</p>\n<p><strong>Question 4.</strong> Implement the function <code>cnf</code>.</p>\n<p><em>Hint.</em> We suggest writing two auxiliary functions, whose types are as\nfollows:</p>\n<pre><code>  val decompose: bool -&gt; formula -&gt; clause -&gt; unit\n  val clause: bool -&gt; formula -&gt; clause -&gt; clause</code></pre>\n\n<p>(These functions should be mutually recursive.) These functions expect\nthe same parameters, namely a Boolean polarity <code>s</code>, a formula <code>f</code>, and\na clause <code>c</code>, which together represent the logical formula <code>s.f \\/ c</code>.\n(We write <code>s.f</code> for <code>f</code> if <code>s</code> is <code>true</code> and <code>~f</code> if <code>s</code> is <code>false</code>.)</p>\n<p>The function <code>decompose</code> is expected to convert <code>s.f \\/ c</code> to CNF, via\nsuitable calls to <code>new_var</code> and <code>new_clause</code>. It returns no result.</p>\n<p>The function <code>clause</code> is expected to convert <code>s.f \\/ c</code> to a clause,\nwhich it returns. It is also allowed to call <code>new_var</code> and <code>new_clause</code>\nso as to construct other clauses on the side.</p>\n<p><em>Hint.</em> The easy case in <code>decompose</code> is when <code>s.f</code> is a conjunction, because\nit then suffices to handle each conjunct independently. The easy case in\n<code>clause</code> is when <code>s.f</code> is a disjunction, because it then suffices to deal with\neach disjunct in turn and combine the results into a single clause.</p>\n<h2 id=\"Recreation-Intersection-of-Two-Sorted-Lists\">Recreation: Intersection of Two Sorted Lists</h2>\n\n<p><strong>Question 5.</strong> Implement a function <code>intersect</code>\nof type <code>int list -&gt; int list -&gt; bool</code>\nsuch that <code>intersect xs ys</code> is <code>true</code>\nif and only if the two <em>sorted</em> lists\n<code>xs</code> and <code>ys</code> have a common element.</p>\n<h2 id=\"Representing-Clauses\">Representing Clauses</h2>\n\n<p>We would now like to choose a representation of clauses in memory and\nimplement the functions <code>empty</code>, <code>cons</code>, <code>new_clause</code> and <code>new_var</code>\nthat the functor <code>CNF</code> (above) requires.</p>\n<p>We adopt the convention that a literal is represented as a pair of a Boolean\npolarity and a variable:</p>\n<pre><code>  type literal = bool * var</code></pre>\n\n<p>We adopt the convention that a clause is represented as a list of literals:</p>\n<pre><code>  type clause = literal list</code></pre>\n\n<p><strong>Question A.</strong> (Ungraded.) Implement the constant <code>empty</code> and the constructor\nfunction <code>cons</code>.</p>\n<p>We adopt the convention that clauses are numbered\nand are stored in an infinite array <code>clauses</code>.\nInfinite arrays are described at the very end of this exercise.</p>\n<p><strong>Question B.</strong> (Ungraded.) Implement the function <code>new_clause</code>, which records a\nnew clause, and the function <code>count_clauses</code>, which indicates how many clauses\nhave been recorded so far. Note that a clause that contains both the literal\n<code>x</code> and the opposite literal <code>~x</code> is unsatisfiable. In such a situation, the\nfunction <code>new_clause</code> must raise the exception <code>UNSAT</code>.</p>\n<p><em>Hint:</em> to detect this\nsituation, use <code>intersect</code>.</p>\n<p><strong>Question C.</strong> (Ungraded.) Implement the function <code>new_var</code>, which creates and\nreturns a new variable.</p>\n<h2 id=\"The-Undo-Trail\">The Undo Trail</h2>\n\n<p>A SAT solver searches a tree of candidate solutions to a Boolean constraint.\nRepeatedly, it picks a variable <code>x</code> whose value has not yet been decided, sets\nthis variable to <code>true</code> (for instance), and explores the consequences of this\ndecision, which form a subtree. If it appears after a while that this decision\nwas wrong (that is, there is no solution in this subtree) then the algorithm\nmust <em>backtrack</em>, that is, come back to the point where this decision was\nmade, undo this decision, make the opposite decision (that is, set <code>x</code> to\n<code>false</code>), and explore the consequences of this new decision, which form\nanother subtree.</p>\n<p>A solver usually maintains several mutable data structures, such as a set of\nundecided variables, a set of unit clauses, etc. (These data structures are\npresented further on.) When the solver backtracks to\nan earlier point in time, it must reestablish an earlier state of these data\nstructures. This is typically implemented either by saving and restoring an\nentire state or by keeping track of an <em>undo trail</em>, that is, a stack of <em>undo\nactions</em> that must be performed in order to return to earlier states.</p>\n<p>An undo trail presents the following abstract interface:</p>\n<pre><code>  module Trail () : sig\n    val push: (unit -&gt; unit) -&gt; unit\n    type checkpoint\n    val record: unit -&gt; checkpoint\n    val revert: checkpoint -&gt; unit\n  end</code></pre>\n\n<p>The module <code>Trail</code> is in fact a functor: that is, it takes an empty argument\n<code>()</code>. The functor application <code>Trail()</code> initializes a new undo trail, which\nis initially empty. This undo trail supports three operations:</p>\n<ul><li><code>push action</code> pushes a new undo action, represented by a function of type\n <code>unit -&gt; unit</code>, onto the trail.</li></ul>\n\n<p> The undo trail has no knowledge of what this undo action does, or what data\n structures it affects. For instance, perhaps the user has just incremented a\n counter <code>cnt</code> of type <code>int ref</code> and wishes to push an undo action whose\n effect is to decrement <code>cnt</code>. The undo trail doesn&#39;t need to know; it takes\n care only of executing the right undo actions at the right time.</p>\n<ul><li><p><code>record()</code> returns the current point in time.\n Such a value is known as a <em>checkpoint</em>.</p>\n</li><li><p><code>revert c</code> goes back in time to the checkpoint <code>c</code>\n by executing <em>in reverse order</em> all of the undo actions\n that were pushed after the checkpoint <code>c</code> was recorded.</p>\n</li></ul>\n\n<p> As a side effect, this invalidates all checkpoints that\n are strictly newer than <code>c</code>; these checkpoints must no\n longer be used.</p>\n<p><strong>Question 6.</strong> Implement the module <code>Trail</code>.</p>\n<p><em>Hint.</em> Maintain a stack of undo actions, stored in an infinite array.</p>\n<h2 id=\"A-Set-of-Variables\">A Set of Variables</h2>\n\n<p>A SAT solver must keep track of a set of <em>undecided</em> variables, that is, a\nset of variables whose value (<code>true</code> or <code>false</code>) has not yet been decided.</p>\n<p>Recall that a variable is represented as a small integer: indeed,\nvariables are numbered 0, 1, and so on.</p>\n<p>Thus, we need to implement a data structure that represents a set of (small)\nintegers. This data structure must offer the following abstract interface:</p>\n<pre><code>  module VarSet () : sig\n    val mem: var -&gt; bool\n    val add: var -&gt; unit\n    val remove: var -&gt; unit\n    val pick: unit -&gt; var option\n  end</code></pre>\n\n<p>The module <code>VarSet</code> is in fact a functor: that is, it takes an empty argument\n<code>()</code>. The functor application <code>VarSet()</code> initializes a new set, which is\ninitially empty. This set supports four operations:</p>\n<ul><li><p><code>mem x</code> tests whether the variable <code>x</code> is currently a member of the set.</p>\n</li><li><p><code>add x</code> adds the variable <code>x</code> to the set. One can assume that\n <code>x</code> initially is not in the set.</p>\n</li><li><p><code>remove x</code> removes the variable <code>x</code> from the set. One may assume\n that <code>x</code> initially is in the set.</p>\n</li><li><p><code>pick()</code> picks an arbitrary variable in the set. More precisely,\n if the set is empty, then <code>pick()</code> returns <code>None</code>. If the set is\n nonempty, then <code>pick()</code> returns <code>Some x</code>, where <code>x</code> is an arbitrary\n element of the set. The variable <code>x</code> is <em>not</em> removed from the set.</p>\n</li></ul>\n\n<p><strong>Question 7.</strong> Implement the module <code>VarSet</code>.</p>\n<p><em>Hint.</em> Several implementations are possible. We suggest maintaining an\ninfinite array of Booleans, so as to allow <code>mem</code>, <code>add</code> and <code>remove</code> to\noperate in amortized constant time. Some thought is then required to implement\n<code>pick</code>. There are several ways of doing so; this is up to you!</p>\n<h2 id=\"Implementing-a-Simple-SAT-Solver\">Implementing a Simple SAT Solver</h2>\n\n<p>At last, we come to the heart of the matter,\nthat is, implementing a SAT solver.</p>\n<p>We have written some code for you,\nwhich sets up four data structures:</p>\n<ul><li><p>A set <code>Undecided</code> of undecided variables.</p>\n</li><li><p>An array <code>C</code> of all clauses.</p>\n</li><li><p>An undo trail <code>Trail</code>.</p>\n</li><li><p>An array <code>value</code> that maps every decided variable to its Boolean value.\n (The Boolean value associated with an undecided variable is irrelevant.)</p>\n</li></ul>\n\n<p>The array <code>C.clauses</code> has type <code>clause option InfiniteArray.t</code>. The content of\nthis array changes over time: indeed, a clause is simplified when a variable\nthat occurs in it becomes decided. The empty clause, which is unsatisfiable,\nis represented by <code>Some []</code>. A clause that has been satisfied and therefore\nhas disappeared is represented by <code>None</code>.</p>\n<p>The purpose of the undo trail is to help us undo changes to the other data\nstructures, namely <code>Undecided</code> and <code>C</code>. (It turns out that it is never\nnecessary to undo a modification of the array <code>value</code>.) This is apparent\nin the next two questions.</p>\n<p><strong>Question D.</strong> (Ungraded.) Implement the function <code>mark_decided</code> so that\n<code>mark_decided x</code> takes the variable <code>x</code> out of the set <code>Undecided</code> and pushes\na suitable undo action onto the trail.</p>\n<p><strong>Question E.</strong> (Ungraded.) Implement the function <code>set_clause</code> so that\n<code>set_clause i clause</code> writes <code>clause</code> at index <code>i</code> in the array <code>C.clauses</code>\nand pushes a suitable undo action onto the trail.</p>\n<p>As mentioned above, when a variable <code>x</code> becomes decided, that is, when the\nvalue of <code>x</code> is set to <code>false</code> or <code>true</code>, we can simplify each of the clauses\nwhere <code>x</code> occurs. Every clause where the positive literal <code>x</code> appears is now\nsatisfied and disappears. Every clause where the negative literal <code>~x</code> appears\ncan be simplified by removing this literal. If the clause becomes empty, then\na contradiction has been reached and the exception <code>UNSAT</code> must be raised.</p>\n<p><strong>Question F.</strong> (Ungraded.) Implement the function <code>set_value</code> so that\n<code>set_value x p</code> sets the value of <code>x</code> to <code>p</code>, simplifies all of the\nclauses where the variable <code>x</code> occurs, and raises <code>UNSAT</code> if one\nsuch clause becomes empty.</p>\n<p>The reason why the Boolean satisfiability problem is hard is that a huge tree\nof candidate solutions must be explored. When a variable <code>x</code> is undecided, we\nusually have no idea whether <code>x</code> should be set to <code>false</code> or to <code>true</code>, so we\nhave to explore both branches.</p>\n<p>There <em>is</em> a situation, however, where it is easy to determine what the\nappropriate value of <code>x</code> should be. This situation arises when the variable\n<code>x</code> occurs in a unit clause, that is, a clause that contains just one literal.\nIf this literal is <code>x</code>, then the value of <code>x</code> must be <code>true</code>.\nIf this literal is <code>~x</code>, then the value of <code>x</code> must be <code>false</code>.\nExploiting unit clauses allows us to make progress without making arbitrary\ndecisions; therefore, it is always a profitable activity. This activity is\nknown as <em>unit propagation</em>.</p>\n<p><strong>Question G.</strong> (Ungraded.) Implement the function <code>find_unit_clause</code> so that\n<code>find_unit_clause()</code> finds and returns a unit clause, if there is one. (This\ncan be done by a naïve linear scan of the array <code>C.clauses</code>. The notes at the\nend of this exercise suggest improvements.)</p>\n<p><strong>Question H.</strong> (Ungraded.) Implement the function <code>propagate</code> so that\n<code>propagate()</code> performs unit propagation. That is, if there exists a unit\nclause <code>x</code> or <code>~x</code>, mark <code>x</code> as decided, set <code>x</code> to an appropriate value, and\nrepeat. (Because <code>set_value</code> can simplify existing clauses, exploiting a unit\nclause can cause new unit clauses to appear, so the process must be repeated\nuntil there are no unit clauses.)</p>\n<p>Once unit propagation is over, if we are lucky, it could be the case that all\nvariables have been decided, which means that we have found a solution and can\nstop. Otherwise, there are no more easy decisions. We must pick a variable\n<code>x</code>, mark it as decided, and explore (up to) two branches:</p>\n<ul><li><p>In the first branch, set <code>x</code> to (say) <code>true</code>, perform unit propagation, and\n continue (recursively).</p>\n</li><li><p>If the exception <code>UNSAT</code> is raised in the first branch, then setting\n <code>x</code> to <code>true</code> was a dead end. In that case, we must backtrack, that is,\n restore the state that existed just before entering the first branch,\n and make the opposite decision: set <code>x</code> to <code>false</code>,\n perform unit propagation, and continue (recursively).</p>\n</li></ul>\n\n<p><strong>Question I.</strong> (Ungraded.) Implement the function <code>explore</code> so that\n<code>explore()</code> <em>either</em> finds a solution that extends the current partial\nassignment of Boolean values to variables and terminates; <em>or</em> determines that\nthere exists no such solution and raises <code>UNSAT</code>.</p>\n<p><em>Hint.</em> Remember that <code>explore</code> assumes that there no are unit clauses, so\n<code>propagate()</code> must always be called before <code>explore()</code>.</p>\n<p>We are now almost done. The final task is to write the main function.</p>\n<p><strong>Question 8.</strong> Implement the function <code>solve</code>. The arguments of this function\nare an integer <code>n</code> and a formula <code>f</code> whose variables are comprised between 0\nincluded and <code>n</code> excluded. If the formula <code>f</code> is satisfiable, then <code>solve</code>\nmust return <code>Some solution</code>, where the function <code>solution</code> maps each variable\nin the semi-open interval <code>[0,n)</code> to a Boolean value. If the formula <code>f</code> is\nunsatisfiable, then <code>solve</code> must return <code>None</code>.</p>\n<p><em>Hint.</em> First convert the formula <code>f</code> to conjunctive normal form, then run the\nSAT solver. Either of these phases can raise the exception <code>UNSAT</code>, which must\nbe handled.</p>\n<p>Congratulations: you now have a working SAT solver!</p>\n<h2 id=\"Notes\">Notes</h2>\n\n<p>There are many ways in which this simplistic SAT solver can be improved.\nHere are a few that you can easily experiment with:</p>\n<ul><li><p>Remove the inefficient linear search in <code>find_unit_clause</code>. We want to find\n a unit clause (if one exists) in constant time. This requires setting up\n and maintaining a bag of unit clauses.</p>\n</li><li><p>Remove the inefficient linear search in <code>set_value</code>. We want to find all of the\n clauses where the variable <code>x</code> occurs, in a time that is proportional to the\n number of such clauses. This requires computing (once, at the beginning) a\n list of the clauses where <code>x</code> occurs. Better yet, separately pre-compute a\n list of the clauses where <code>x</code> occurs positively and a list of the clauses\n where <code>x</code> occurs negatively.</p>\n</li><li><p>Look for more efficient implementations of the set <code>Undecided</code>, and (at the\n same time) think about the strategies that <code>pick</code> might implement. For instance,\n it seems desirable to pick a variable that occurs in as many clauses as possible.</p>\n</li></ul>\n\n<p>The algorithm that we have implemented is a member of the family of\n<a href=\"https://en.wikipedia.org/wiki/DPLL_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">DPLL algorithms</a>.\nFor a good explanation of these algorithms (in French), accompanied\nwith simple yet reasonably efficient OCaml implementations, the reader\nis referred to the paper\n<a href=\"https://hal.inria.fr/inria-00202831/en/\" target=\"_blank\" rel=\"noopener noreferrer\">SAT-MICRO: petit mais costaud!</a>\nby Sylvain Conchon, Johannes Kanig, and Stéphane Lescuyer.</p>\n<h2 id=\"Infinite-Arrays\">Infinite Arrays</h2>\n\n<p>Conceptually, infinite arrays are exactly like ordinary arrays,\nexcept there is no need to specify their length at creation time:\ntheir length is infinite. The function call <code>InfiniteArray.make x</code>\ncreates a new infinite array and initializes every cell in it with\nthe value <code>x</code>. The cells of this array are indexed by the natural\nintegers, from zero to infinity. They can be read and written via\nthe operations <code>InfiniteArray.get</code> and <code>InfiniteArray.set</code>.</p>\n<p>In this exercise, an implementation of infinite arrays is given.\nThe module <code>InfiniteArray</code> offers the following signature:</p>\n<pre><code>  type &#39;a t\n  val make: &#39;a -&gt; &#39;a t\n  val get: &#39;a t -&gt; int -&gt; &#39;a\n  val set: &#39;a t -&gt; int -&gt; &#39;a -&gt; unit</code></pre>\n\n<p>If you are curious how infinite arrays might be implemented,\nplease study\n<a onclick=\"top.location='/exercises/infinite_arrays/';\" href=''>this exercise</a>.</p>\n"
      ]
    ],
    "prepare": "fHT9g8X7zODpuliZCDVwAChOCR/2XB/pJkZYWkysu+/wfAB9VXu0DDxa6fncuewp5TSTPzMzpKK6CZ62xz0WcQ1tA/Y8EItV74Mbe2AvZPIyDc/P6qYFw8oSVc5W9Sb+QNKUv2BCCLmX2RHTTj1JsqD0pRK0CoLxwB/M6NWOqXPgLKvcZ0GQueOoO3M7Eo1AJ5dJTApZS9leRVJBOwPxnGa8EX6VZgw4Ji7puO0RhnDENNAfJTOaeqVFjR08MLjbQ8YCHD2EolyFtXbgoUIxsjsO95eBd5Pr4QpNd9KR4fgvzcvo/RtWbJVn3xYDZT3wr2LBRwp6F+z9TVj4nh0bP3BgcP2/cJSqdOBirmY4EWV8SlRzOo9ZVSoEEV6RdviIYew1PQgKjkcm3Oywbevj0JAl7Xde+1C7xVaZR3NwjasCKpIpMELHUx3gPv0BACCiNpaAAgXMAqVzEB+AW0t76BjodPiQAkPxlGZb9EcaD+jPoMEIo/c2v35IAtf4oqRluTGNxjWjl30huiCj1FxP0nlGGQQRTVF1JmxRFRCgfM6iapcfAS8oXiNhu3yovKYKoDSU4jNnwO4jIJVUeGmDc9IbEFFxEMwOoeMuwYlAL260TwUD6O2RbXIGQhxH9WOECZqHkcBPFunRZj7WHWVIdrCIzFrBQ6nn89kM71qCtWzs3O06K4PRtuerNbIsGAcqYp5DZ6EZGR9/VUUVXPnz8janQSBVAY9NM7G8hP7kwHSMNMAbITfqxr5RdoG7Kg4iBDZLUXpN694Mr87gmAApr8QA/QjEcB8nF/UWjEKRIt5Fmcvw9Qk+b21lJsMrYovevY0JBdwOF+HvCBqj6drf3q/9wfsissrqdrwidT5SS7xvSElNHkk1Xn6FXUEQdK07OewBPVV5r5l6O4S7ae3v2MR5kTlqNbvnxQrYUbgr9LgSN9hULF4SQgL34bjEAGTnMEDBDxPaFLp5WB+MAcNrpU3ojqiQTkPn/BhRllccD+epmdES5UxVhKRQZxyL8qRhhiandSCj9KaisBOj0FwDSmETDBU4TF2KKFZU+/4dqM6fsBVdFnn3XitowI+XbbNt5WCULCYzfrO6Fs/Jx8+cq9IjA6QtQcNZmPQbe1l0TqJoTwUr9bEQgTIAWItDkj4eEcfOaZFBQqjS3HeTRi6Bbv77u5PPTmbDhRUPmJq+qXL8LMLeN4OSbaquXq9hW5otYp5DGBETGVAyRDtaV3Gu8WqrCHI0YLhHImirbP7a6GbQVwQpJXKxe3hTjRr7+28oD6oHCSFVk/aArmHsf9dp9pILpSvNc6mg15EW/pSR+dxUtZb/9pwGfJ/e22Mv+R7atcmBArcEWbmDA68f6MOoP3Jvwbxuhqqvgrodg85TDGR8JBU1VFwNXCk8X/6Viv31V4UP3Hd=",
    "test": "",
    "solution": "",
    "max-score": 9
  },
  null
]
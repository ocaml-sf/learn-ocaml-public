[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "A SAT solver",
    "stars": 3,
    "backward_exercises": [
      "fpottier/random_access_lists"
    ]
  },
  {
    "id": "sat",
    "prelude_ml": "type var = int\n\ntype formula =\n  | FConst of bool\n  | FConn  of bool * formula * formula\n  | FNeg   of formula\n  | FVar   of var\n\ntype env = var -> bool\n",
    "template": "(* ------------------------------------------------------------------------------ *)\n\n(* Building formulae. *)\n\nlet var x =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet falsity =\n  FConst false\n\nlet truth =\n  FConst true\n\nlet const sense =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet neg f =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet conn sense f1 f2 =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet conj f1 f2 =\n  conn true f1 f2\n\nlet disj f1 f2 =\n  conn false f1 f2\n\n(* ------------------------------------------------------------------------------ *)\n\n(* Evaluating formulae. *)\n\nlet rec eval (env : env) (f : formula) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet foreach_env (n : int) (body : env -> unit) : unit =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet satisfiable (n : int) (f : formula) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet valid (n : int) (f : formula) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* ------------------------------------------------------------------------------ *)\n\n(* Converting formulae to conjunctive normal form. *)\n\nmodule CNF (X : sig\n  type clause\n  val empty: clause\n  val cons: bool -> var -> clause -> clause\n  val new_var: unit -> var\n  val new_clause: clause -> unit\nend)\n= struct\n  open X\n\n  (* The conjunction of the clauses emitted by [decompose s f c] must be logically\n     equivalent to the formula [s.f \\/ c]. *)\n\n  (* It is permitted to assume that [c] is small and therefore to duplicate\n     it. It is not permitted to duplicate [f]. *)\n\n  let rec decompose (s : bool) (f : formula) (c : clause) : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  (* The clause returned by [clause s f c], in conjunction with any\n     emitted clauses, must be logically equivalent to [s.f \\/ c]. *)\n\n  and clause (s : bool) (f : formula) (c : clause) : clause =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  (* The main entry point. *)\n\n  let cnf (f : formula) : unit =\n    decompose true f empty\n\nend\n\n(* -------------------------------------------------------------------------- *)\n\n(* Recreation: determining whether two sorted lists have a common element. *)\n\nlet rec intersect (xs : int list) (ys : int list) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* ------------------------------------------------------------------------------ *)\n\n(* Representing a set of clauses in memory. *)\n\nexception UNSAT\n\nmodule Clauses () = struct\n\n  (* A clause is represented as a list of literals. *)\n\n  type literal = bool * var\n  type clause = literal list\n\n  let empty : clause =\n    (* TO DO: Define this constant. *)\n    raise TODO\n\n  let cons p x clause : clause =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  (* Clauses are numbered and are stored in an infinite array. *)\n\n  let clauses : clause option InfiniteArray.t =\n    InfiniteArray.make None\n\n  let new_clause (clause : clause) : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let count_clauses () : int =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let new_var () : var =\n    (* TO DO: Define this function. *)\n    raise TODO\n\nend\n\n(* ------------------------------------------------------------------------------ *)\n\n(* The undo trail. *)\n\nmodule Trail () : sig\n  val push: (unit -> unit) -> unit\n  type checkpoint\n  val record: unit -> checkpoint\n  val revert: checkpoint -> unit\nend = struct\n\n  let push action =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  type checkpoint\n    (* TO DO: Define this type. *)\n\n  let record () =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let revert i =\n    (* TO DO: Define this function. *)\n    raise TODO\n\nend\n\n(* ------------------------------------------------------------------------------ *)\n\n(* A set of variables. *)\n\nmodule VarSet () : sig\n  val mem: var -> bool\n  val add: var -> unit\n  val remove: var -> unit\n  val pick: unit -> var option\nend = struct\n\n  let mem x =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let add x =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let remove x =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let pick () =\n    (* TO DO: Define this function. *)\n    raise TODO\n\nend\n\n(* ------------------------------------------------------------------------------ *)\n\n(* The SAT solver. *)\n\n(* The functor application [SAT()] initializes a new solver. This solver\n   offers a function [solve], which must be called at most once, because\n   it modifies the solver's internal state. *)\n\nmodule SAT () : sig\n  (* [solve n f] determines whether the formula [f], whose variables must be\n     comprised between 0 included and [n] excluded, is satisfiable. If it is\n     satisfiable, then it returns a solution, in the form of a function of\n     variables to Boolean values. Otherwise, it returns [None]. *)\n  val solve: int -> formula -> (var -> bool) option\nend = struct\n\n  (* Create an (initially empty) set of undecided variables. *)\n\n  module Undecided = VarSet()\n\n  (* Set up an array of all clauses. Override [new_var] so that\n     newly created variables are automatically added to the set\n     of undecided variables. *)\n\n  module C = struct\n\n    include Clauses()\n\n    let new_var () : var =\n      let x = new_var() in\n      Undecided.add x;\n      x\n\n  end\n\n  (* Create an (initially empty) undo trail. *)\n\n  module Trail = Trail()\n\n  (* Set up an array [value] that maps every decided variable [x]\n     to its Boolean value. *)\n\n  let value : bool InfiniteArray.t =\n    InfiniteArray.make false\n\n  (* This is where you begin to work... *)\n\n  let mark_decided (x : var) : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let set_clause (i : int) (clause : C.clause option) : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let set_value (x : var) (p : bool) : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let find_unit_clause () : C.literal option =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let rec propagate () : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let rec explore () : unit =\n    (* TO DO: Define this function. *)\n    raise TODO\n\n  let solve (n : int) (f : formula) : (var -> bool) option =\n    (* Declare the existence of [n] variables. *)\n    for _i = 0 to n-1 do\n      ignore (C.new_var())\n    done;\n    (* TO DO: Complete the definition of this function. *)\n    raise TODO\n\nend\n",
    "descr": [
      [
        "",
        "<h1 id=\"A-Simple-SAT-Solver\">A Simple SAT Solver</h1>\n\n<p>In this exercise, we build a SAT solver, that is, an algorithm\nthat solves the\n<a href=\"https://en.wikipedia.org/wiki/Boolean_satisfiability_problem\" target=\"_blank\" rel=\"noopener noreferrer\">Boolean satisfiability problem</a>,\nand attempts to do so in an efficient manner.</p>\n<h2 id=\"Building-Formulae\">Building Formulae</h2>\n\n<p>Variables are numbered 0, 1, and so on.</p>\n<pre><code>  type var = int</code></pre>\n\n<p>The syntax of formulae is as follows:</p>\n<pre><code>  type formula =\n    | FConst of bool\n    | FConn  of bool * formula * formula\n    | FNeg   of formula\n    | FVar   of var</code></pre>\n\n<p><em>Falsity</em> is represented by <code>FConst false</code>.\n<em>Truth</em> is represented by <code>FConst true</code>.\nWe refer to falsity and truth as <em>constants</em>.\nThe <em>disjunction</em> of two formulae <code>f1</code> and <code>f2</code>\nis represented by <code>FConn (false, f1, f2)</code>,\nwhile their <em>conjunction</em> is represented by\n<code>FConn (true, f1, f2)</code>.\nThe <em>negation</em> of a formula <code>f</code>\nis represented by <code>FNeg f</code>.\nFinally, a Boolean variable <code>x</code>\nis also a formula,\nrepresented by <code>FVar x</code>.</p>\n<p>It is worth noting that <code>FConst false</code> is\na left and right unit for <code>FConn (false, _, _)</code>:\nthat is, the formulae <code>FConn (false, FConst false, f)</code>\nand <code>FConn (false, f, FConst false)</code> are\nlogically equivalent to <code>f</code>.\nDually, <code>FConst true</code> is\na left and right unit for <code>FConn (true, _, _)</code>.</p>\n<p>The duality between falsity and disjunction on the one hand\nand truth and conjunction on the other hand\ncan sometimes be exploited to avoid code duplication.</p>\n<p>We impose the following invariant on the syntax of formulae:</p>\n<ul><li><p>In a negation <code>FNeg f</code>,\n the subformula <code>f</code> is never a constant or a negation.</p>\n</li><li><p>In a composite formula <code>FConn (_, f1, f2)</code>,\n the subformulae <code>f1</code> and <code>f2</code> are never constants.</p>\n</li></ul>\n\n<p>This invariant is weak. One could think of stronger invariants, such as\n<em>negation normal form</em> (NNF), <em>disjunctive normal form</em> (DNF), and\n<em>conjunctive normal form</em> (CNF). However, transforming a formula so as to\nsatisfy these stronger invariants can be costly. Our invariant can be imposed\nby a set of <em>smart constructors</em> (that is, functions that construct formulae)\nwhile retaining the property that every constructor has constant time\ncomplexity. The four smart constructors that we need are as follows:</p>\n<pre><code>  val const: bool -&gt; formula\n  val conn: bool -&gt; formula -&gt; formula -&gt; formula\n  val neg: formula -&gt; formula\n  val var: var -&gt; formula</code></pre>\n\n<p><strong>Question 1.</strong> Implement the above four smart constructors in such a way that\nthe formulae built by these functions always satisfy the above invariant.</p>\n<h2 id=\"Evaluating-Formulae\">Evaluating Formulae</h2>\n\n<p>We can <em>evaluate</em> a formula (that is, compute its meaning, a Boolean value) if\nwe are given an <em>environment</em>, that is, a function that maps every variable to\na Boolean value.</p>\n<pre><code>  type env = var -&gt; bool</code></pre>\n\n<p><strong>Question 2.</strong> Implement a function <code>eval</code> of type <code>env -&gt; formula -&gt; bool</code>\nsuch that <code>eval env f</code> evaluates the formula <code>f</code> under the environment <code>env</code>.</p>\n<p>A formula is <em>satisfiable</em> if it evaluates to <code>true</code> under <em>some</em> environment.\nA formula is <em>valid</em> if it evaluates to <code>true</code> under <em>every</em> environment.</p>\n<p>To decide whether a formula is satisfiable, or valid, a naïve approach is to\nenumerate all environments and evaluate the formula under each such\nenvironment. If the formula at hand involves <code>n</code> variables, numbered from <code>0</code>\nto <code>n-1</code>, then there are <code>2^n</code> environments of interest.</p>\n<p><strong>Question 3.</strong> Implement a function <code>foreach_env</code> of type\n<code>int -&gt; (env -&gt; unit) -&gt; unit</code> such that\n<code>foreach_env n body</code> applies the function <code>body</code> successively\nto every environment over <code>n</code> variables.\nThen, implement the functions <code>satisfiable</code> and <code>valid</code>,\nboth of which have type <code>int -&gt; formula -&gt; bool</code>,\nsuch that,\nunder the hypothesis that the formula <code>f</code> involves <code>n</code> variables,\n<code>satisfiable n f</code> determines whether <code>f</code> is satisfiable\nand <code>valid n f</code> determines whether <code>f</code> is valid.</p>\n<p><em>Note.</em> <code>foreach_env</code> is not directly tested by the automatic grading code.\nOnly <code>satisfiable</code> and <code>valid</code> are tested.</p>\n<p><em>Hint.</em> One simple approach to implementing <code>foreach_env</code> is to proceed by\ninduction on the number <code>n</code>. When <code>n</code> is zero, then the task is easy, as there\nis only one environment over zero variables. When <code>n</code> is nonzero, if one knows\nhow to enumerate all environments over <code>n-1</code> variables, then it is not\ndifficult to see how one can enumerate all environments over <code>n</code> variables.</p>\n<p><em>Hint.</em> Another approach to implementing <code>foreach_env</code> is to note that the\nenvironments over <code>n</code> variables are in a bijection with the numbers between\n<code>0</code> (included) and <code>2^n</code> (excluded). Thus, to enumerate all environments, a\nsingle loop suffices, provided one is capable of converting an index <code>i</code> in\n<code>[0, 2^n)</code> to an environment.</p>\n<h2 id=\"Converting-Formulae-to-Conjunctive-Normal-Form\">Converting Formulae to Conjunctive Normal Form</h2>\n\n<h3 id=\"Conjunctive-Normal-Form\">Conjunctive Normal Form</h3>\n\n<p>A formula is in <em>negation normal form</em> (NNF) if it does not contain a negation\napplied to a conjunction, disjunction, or negation. In other words, in such a\nformula, every negation must be applied to a variable.</p>\n<p>A formula is in <em>conjunctive normal form</em> if it is in negation normal form and\nfurthermore it does not contain a disjunction applied to a conjunction.</p>\n<p>In other words, a formula in conjunctive normal form is a conjunction of\nclauses, where a <em>clause</em> is a disjunction of literals, and a <em>literal</em> is\neither a variable or the negation of a variable. This can be summed up by the\nfollowing grammar:</p>\n<pre><code>  (literal) l ::= x | ~x\n  (clause)  c ::= l \\/ c | false\n  (cnf)     f ::= c /\\ f | true</code></pre>\n\n<p>Here, we write <code>x</code> for the variable <code>x</code> and <code>~x</code> for the negation of the\nvariable <code>x</code>. In the following, we also use the notation <code>s.x</code>, where <code>s</code>\nis a Boolean flag, to denote <code>x</code> when <code>s</code> is <code>true</code> and <code>~x</code> when <code>s</code> is\n<code>false</code>. Thus, <code>s.x</code> is a literal.</p>\n<p>The propositional formulae that arise in real-world situations are often\nnaturally in conjunctive normal form. Unfortunately, determining whether\na formula in CNF is satisfiable is a hard problem, for which no\npolynomial-time algorithm is known to exist.\n(<a href=\"https://en.wikipedia.org/wiki/Boolean_satisfiability_problem\" target=\"_blank\" rel=\"noopener noreferrer\">3-SAT is NP-complete.</a>)\nTherefore, an algorithm that solves this problem and\nthat runs fast in practice is valuable:\nsuch an algorithm is known as a <em>SAT solver</em>.</p>\n<h3 id=\"CNF-Conversion-Principles\">CNF Conversion: Principles</h3>\n\n<p>An arbitrary formula <code>f</code> can be converted to a CNF formula <code>f&#39;</code> such that <code>f</code>\nand <code>f&#39;</code> are <em>equisatisfiable</em>, that is, <code>f</code> is satisfiable if and only if\n<code>f&#39;</code> is satisfiable. (We implement this conversion in the following question.)\nThus, a SAT solver can be applied also to a formula that is not in conjunctive\nnormal form.</p>\n<p><em>Note.</em> One can obviously determine in linear time whether a formula in\n<em>disjunctive normal form</em> (DNF) is satisfiable. (Think about it.) However,\nconverting an arbitrary formula to an equisatisfiable disjunctive normal form\nhas exponential complexity, so the existence of such a linear-time algorithm\nis not of much interest.</p>\n<p>How does the CNF conversion work?</p>\n<p>First, note that it is easy to convert a formula <code>f</code> to an equivalent formula\n<code>f&#39;</code> in negation normal form (NNF). The idea is to push every negation down\ntowards the leaves. This exploits\n<a href=\"https://en.wikipedia.org/wiki/De_Morgan%27s_laws\" target=\"_blank\" rel=\"noopener noreferrer\">De Morgan&#39;s laws</a>:</p>\n<ul><li><p><code>~(f1 /\\ f2)</code> is equivalent to <code>~f1 \\/ ~f2</code>.</p>\n</li><li><p><code>~(f1 \\/ f2)</code> is equivalent to <code>~f1 /\\ ~f2</code>.</p>\n</li></ul>\n\n<p>This transformation can be performed in linear time. In the following\nquestion, we do not implement it as a separate transformation; instead,\nwe perform this transformation on the fly, at the same time as the CNF\nconversion.</p>\n<p>Second, to perform CNF conversion, there remains to eliminate the situations\nwhere a conjunction appears inside a disjunction, as in the formula <code>a \\/ (b\n/\\ c)</code>. The idea is to introduce a fresh <em>auxiliary variable</em> to stand for the\nproblematic subformula: here, we introduce a new variable <code>x</code> to stand for the\nsubformula <code>b /\\ c</code>. In other words, we exploit the following fact:</p>\n<ul><li><code>a \\/ (b /\\ c)</code> is equivalent to <code>exists x.( (a \\/ x)  /\\  (x &lt;-&gt; b /\\ c) )</code>.</li></ul>\n\n<p>In the main formula, <code>b /\\ c</code> is replaced with <code>x</code>, so\n<code>a \\/ (b /\\ c)</code> becomes <code>a \\/ x</code>, which is in CNF form,\nas desired. On the side, we use a double implication\n<code>x &lt;-&gt; b /\\ c</code> to express the fact that <code>x</code> must have\nthe same truth value as the conjunction <code>b /\\ c</code>.</p>\n<p>A couple more remarks must be made for the above idea to really work.</p>\n<p>First, the use of a double implication <code>x &lt;-&gt; f</code> is problematic.\nBecause double implication does not exist in the syntax of formulae,\nit must be encoded as the conjunction <code>(x -&gt; f) /\\ (f -&gt; x)</code>,\nor <code>(~x \\/ f) /\\ (~f \\/ x)</code>, where the subformula <code>f</code> is\nduplicated. Unless we are careful, this duplication could cause an\nexponential blowup in the size of formulae.\nFortunately, there is in reality no need for a double implication:\na single implication <code>x -&gt; f</code> suffices. Indeed,</p>\n<ul><li><code>a \\/ (b /\\ c)</code> is equivalent to <code>exists x.( (a \\/ x)  /\\  (x -&gt; b /\\ c) )</code>.</li></ul>\n\n<p>Please take some time to understand why this is true.</p>\n<p>Second, the existential quantification <code>exists x.(...)</code> is not really\nindispensable. Indeed, the above equivalence implies that:</p>\n<ul><li><p>the original formula <code>a \\/ (b /\\ c)</code> is satisfiable if and only if the\n transformed formula <code>(a \\/ x) /\\ (x -&gt; b /\\ c)</code> is satisfiable, and</p>\n</li><li><p>a satisfying assignment of the transformed formula\n is also a satisfying assignment of the original formula.</p>\n</li></ul>\n\n<p>In summary, thanks to the above ideas, an arbitrary formula <code>f</code> can be\nconverted to a CNF formula <code>f&#39;</code> such that <code>f</code> and <code>f&#39;</code> are <em>equisatisfiable</em>\nand a satisfying assignment of <code>f&#39;</code> is also a satisfying assignment of <code>f</code>.\nFurthermore, the size of <code>f&#39;</code> is linear with respect to the size of <code>f</code>, and\nthe conversion can be performed in linear time.</p>\n<h3 id=\"CNF-Conversion-Implementation\">CNF Conversion: Implementation</h3>\n\n<p>In the next question, you must implement CNF conversion as a functor,\nnamed <code>CNF</code>, whose signature is as follows:</p>\n<pre><code>   module CNF (X : sig\n     type clause\n     val empty: clause\n     val cons: bool -&gt; var -&gt; clause -&gt; clause\n     val new_var: unit -&gt; var\n     val new_clause: clause -&gt; unit\n   end) : sig\n    val cnf: formula -&gt; unit\n  end</code></pre>\n\n<p>In short, this means that you have access to several functions that allow you\nto create new auxiliary variables and to declare new clauses. Using these\nfacilities, you must define a single function, <code>cnf</code>, which receives a formula\nas an argument and transforms it to conjunctive normal form. This CNF is stored in the internal state of the module and\nis modified by each call to its functions.</p>\n<p>In greater detail, the facilities to which you have access\ncan be described as follows.</p>\n<ul><li><p>There is an abstract type <code>clause</code> of clauses. (Recall that a clause is a\n disjunction of literals.) There is a constant <code>empty</code>, which represents the\n empty clause. (The empty clause is logically equivalent to the formula\n <code>false</code>.) There is also a function <code>cons</code>, which builds a nonempty clause:\n if <code>c</code> is a clause, then <code>cons s x c</code> represents the clause <code>s.x \\/ c</code>, that\n is, the disjunction of the literal <code>s.x</code> and of the clause <code>c</code>.</p>\n</li><li><p>There is a function <code>new_var</code>\n such that <code>new_var()</code> creates and returns a fresh variable <code>x</code>.</p>\n</li><li><p>There is a function <code>new_clause</code>\n such that <code>new_clause c</code>\n declares the clause <code>c</code>.</p>\n</li></ul>\n\n<p>The functions <code>new_var</code> and <code>new_clause</code> have a side effect: <code>new_var</code> adds\nthe newly created variable to a growing set of <em>all auxiliary variables\ncreated so far</em>; <code>new_clause c</code> adds the clause <code>c</code> to a growing conjunction\nof <em>all clauses declared so far</em>.</p>\n<p>Using these facilities, you are expected to implement the function <code>cnf</code>,\nwhich receives a formula <code>f</code> and must construct an equisatisfiable formula\nin conjunctive normal form. This construction is carried out via suitable\ncalls to <code>new_var</code> and <code>new_clause</code>. No result is returned.</p>\n<p><strong>Question 4.</strong> Implement the function <code>cnf</code>.</p>\n<p><em>Hint.</em> We suggest writing two auxiliary functions, whose types are as\nfollows:</p>\n<pre><code>  val decompose: bool -&gt; formula -&gt; clause -&gt; unit\n  val clause: bool -&gt; formula -&gt; clause -&gt; clause</code></pre>\n\n<p>(These functions should be mutually recursive.) These functions expect\nthe same parameters, namely a Boolean polarity <code>s</code>, a formula <code>f</code>, and\na clause <code>c</code>, which together represent the logical formula <code>s.f \\/ c</code>.\n(We write <code>s.f</code> for <code>f</code> if <code>s</code> is <code>true</code> and <code>~f</code> if <code>s</code> is <code>false</code>.)</p>\n<p>The function <code>decompose</code> is expected to convert <code>s.f \\/ c</code> to CNF, via\nsuitable calls to <code>new_var</code> and <code>new_clause</code>. It returns no result.</p>\n<p>The function <code>clause</code> is expected to convert <code>s.f \\/ c</code> to a clause,\nwhich it returns. It is also allowed to call <code>new_var</code> and <code>new_clause</code>\nso as to construct other clauses on the side.</p>\n<p><em>Hint.</em> The easy case in <code>decompose</code> is when <code>s.f</code> is a conjunction, because\nit then suffices to handle each conjunct independently. The easy case in\n<code>clause</code> is when <code>s.f</code> is a disjunction, because it then suffices to deal with\neach disjunct in turn and combine the results into a single clause.</p>\n<h2 id=\"Recreation-Intersection-of-Two-Sorted-Lists\">Recreation: Intersection of Two Sorted Lists</h2>\n\n<p><strong>Question 5.</strong> Implement a function <code>intersect</code>\nof type <code>int list -&gt; int list -&gt; bool</code>\nsuch that <code>intersect xs ys</code> is <code>true</code>\nif and only if the two <em>sorted</em> lists\n<code>xs</code> and <code>ys</code> have a common element.</p>\n<h2 id=\"Representing-Clauses\">Representing Clauses</h2>\n\n<p>We would now like to choose a representation of clauses in memory and\nimplement the functions <code>empty</code>, <code>cons</code>, <code>new_clause</code> and <code>new_var</code>\nthat the functor <code>CNF</code> (above) requires.</p>\n<p>We adopt the convention that a literal is represented as a pair of a Boolean\npolarity and a variable:</p>\n<pre><code>  type literal = bool * var</code></pre>\n\n<p>We adopt the convention that a clause is represented as a list of literals:</p>\n<pre><code>  type clause = literal list</code></pre>\n\n<p><strong>Question A.</strong> (Ungraded.) Implement the constant <code>empty</code> and the constructor\nfunction <code>cons</code>.</p>\n<p>We adopt the convention that clauses are numbered\nand are stored in an infinite array <code>clauses</code>.\nInfinite arrays are described at the very end of this exercise.</p>\n<p><strong>Question B.</strong> (Ungraded.) Implement the function <code>new_clause</code>, which records a\nnew clause, and the function <code>count_clauses</code>, which indicates how many clauses\nhave been recorded so far. Note that a clause that contains both the literal\n<code>x</code> and the opposite literal <code>~x</code> is unsatisfiable. In such a situation, the\nfunction <code>new_clause</code> must raise the exception <code>UNSAT</code>.</p>\n<p><em>Hint:</em> to detect this\nsituation, use <code>intersect</code>.</p>\n<p><strong>Question C.</strong> (Ungraded.) Implement the function <code>new_var</code>, which creates and\nreturns a new variable.</p>\n<h2 id=\"The-Undo-Trail\">The Undo Trail</h2>\n\n<p>A SAT solver searches a tree of candidate solutions to a Boolean constraint.\nRepeatedly, it picks a variable <code>x</code> whose value has not yet been decided, sets\nthis variable to <code>true</code> (for instance), and explores the consequences of this\ndecision, which form a subtree. If it appears after a while that this decision\nwas wrong (that is, there is no solution in this subtree) then the algorithm\nmust <em>backtrack</em>, that is, come back to the point where this decision was\nmade, undo this decision, make the opposite decision (that is, set <code>x</code> to\n<code>false</code>), and explore the consequences of this new decision, which form\nanother subtree.</p>\n<p>A solver usually maintains several mutable data structures, such as a set of\nundecided variables, a set of unit clauses, etc. (These data structures are\npresented further on.) When the solver backtracks to\nan earlier point in time, it must reestablish an earlier state of these data\nstructures. This is typically implemented either by saving and restoring an\nentire state or by keeping track of an <em>undo trail</em>, that is, a stack of <em>undo\nactions</em> that must be performed in order to return to earlier states.</p>\n<p>An undo trail presents the following abstract interface:</p>\n<pre><code>  module Trail () : sig\n    val push: (unit -&gt; unit) -&gt; unit\n    type checkpoint\n    val record: unit -&gt; checkpoint\n    val revert: checkpoint -&gt; unit\n  end</code></pre>\n\n<p>The module <code>Trail</code> is in fact a functor: that is, it takes an empty argument\n<code>()</code>. The functor application <code>Trail()</code> initializes a new undo trail, which\nis initially empty. This undo trail supports three operations:</p>\n<ul><li><code>push action</code> pushes a new undo action, represented by a function of type\n <code>unit -&gt; unit</code>, onto the trail.</li></ul>\n\n<p> The undo trail has no knowledge of what this undo action does, or what data\n structures it affects. For instance, perhaps the user has just incremented a\n counter <code>cnt</code> of type <code>int ref</code> and wishes to push an undo action whose\n effect is to decrement <code>cnt</code>. The undo trail doesn&#39;t need to know; it takes\n care only of executing the right undo actions at the right time.</p>\n<ul><li><p><code>record()</code> returns the current point in time.\n Such a value is known as a <em>checkpoint</em>.</p>\n</li><li><p><code>revert c</code> goes back in time to the checkpoint <code>c</code>\n by executing <em>in reverse order</em> all of the undo actions\n that were pushed after the checkpoint <code>c</code> was recorded.</p>\n</li></ul>\n\n<p> As a side effect, this invalidates all checkpoints that\n are strictly newer than <code>c</code>; these checkpoints must no\n longer be used.</p>\n<p><strong>Question 6.</strong> Implement the module <code>Trail</code>.</p>\n<p><em>Hint.</em> Maintain a stack of undo actions, stored in an infinite array.</p>\n<h2 id=\"A-Set-of-Variables\">A Set of Variables</h2>\n\n<p>A SAT solver must keep track of a set of <em>undecided</em> variables, that is, a\nset of variables whose value (<code>true</code> or <code>false</code>) has not yet been decided.</p>\n<p>Recall that a variable is represented as a small integer: indeed,\nvariables are numbered 0, 1, and so on.</p>\n<p>Thus, we need to implement a data structure that represents a set of (small)\nintegers. This data structure must offer the following abstract interface:</p>\n<pre><code>  module VarSet () : sig\n    val mem: var -&gt; bool\n    val add: var -&gt; unit\n    val remove: var -&gt; unit\n    val pick: unit -&gt; var option\n  end</code></pre>\n\n<p>The module <code>VarSet</code> is in fact a functor: that is, it takes an empty argument\n<code>()</code>. The functor application <code>VarSet()</code> initializes a new set, which is\ninitially empty. This set supports four operations:</p>\n<ul><li><p><code>mem x</code> tests whether the variable <code>x</code> is currently a member of the set.</p>\n</li><li><p><code>add x</code> adds the variable <code>x</code> to the set. One can assume that\n <code>x</code> initially is not in the set.</p>\n</li><li><p><code>remove x</code> removes the variable <code>x</code> from the set. One may assume\n that <code>x</code> initially is in the set.</p>\n</li><li><p><code>pick()</code> picks an arbitrary variable in the set. More precisely,\n if the set is empty, then <code>pick()</code> returns <code>None</code>. If the set is\n nonempty, then <code>pick()</code> returns <code>Some x</code>, where <code>x</code> is an arbitrary\n element of the set. The variable <code>x</code> is <em>not</em> removed from the set.</p>\n</li></ul>\n\n<p><strong>Question 7.</strong> Implement the module <code>VarSet</code>.</p>\n<p><em>Hint.</em> Several implementations are possible. We suggest maintaining an\ninfinite array of Booleans, so as to allow <code>mem</code>, <code>add</code> and <code>remove</code> to\noperate in amortized constant time. Some thought is then required to implement\n<code>pick</code>. There are several ways of doing so; this is up to you!</p>\n<h2 id=\"Implementing-a-Simple-SAT-Solver\">Implementing a Simple SAT Solver</h2>\n\n<p>At last, we come to the heart of the matter,\nthat is, implementing a SAT solver.</p>\n<p>We have written some code for you,\nwhich sets up four data structures:</p>\n<ul><li><p>A set <code>Undecided</code> of undecided variables.</p>\n</li><li><p>An array <code>C</code> of all clauses.</p>\n</li><li><p>An undo trail <code>Trail</code>.</p>\n</li><li><p>An array <code>value</code> that maps every decided variable to its Boolean value.\n (The Boolean value associated with an undecided variable is irrelevant.)</p>\n</li></ul>\n\n<p>The array <code>C.clauses</code> has type <code>clause option InfiniteArray.t</code>. The content of\nthis array changes over time: indeed, a clause is simplified when a variable\nthat occurs in it becomes decided. The empty clause, which is unsatisfiable,\nis represented by <code>Some []</code>. A clause that has been satisfied and therefore\nhas disappeared is represented by <code>None</code>.</p>\n<p>The purpose of the undo trail is to help us undo changes to the other data\nstructures, namely <code>Undecided</code> and <code>C</code>. (It turns out that it is never\nnecessary to undo a modification of the array <code>value</code>.) This is apparent\nin the next two questions.</p>\n<p><strong>Question D.</strong> (Ungraded.) Implement the function <code>mark_decided</code> so that\n<code>mark_decided x</code> takes the variable <code>x</code> out of the set <code>Undecided</code> and pushes\na suitable undo action onto the trail.</p>\n<p><strong>Question E.</strong> (Ungraded.) Implement the function <code>set_clause</code> so that\n<code>set_clause i clause</code> writes <code>clause</code> at index <code>i</code> in the array <code>C.clauses</code>\nand pushes a suitable undo action onto the trail.</p>\n<p>As mentioned above, when a variable <code>x</code> becomes decided, that is, when the\nvalue of <code>x</code> is set to <code>false</code> or <code>true</code>, we can simplify each of the clauses\nwhere <code>x</code> occurs. Every clause where the positive literal <code>x</code> appears is now\nsatisfied and disappears. Every clause where the negative literal <code>~x</code> appears\ncan be simplified by removing this literal. If the clause becomes empty, then\na contradiction has been reached and the exception <code>UNSAT</code> must be raised.</p>\n<p><strong>Question F.</strong> (Ungraded.) Implement the function <code>set_value</code> so that\n<code>set_value x p</code> sets the value of <code>x</code> to <code>p</code>, simplifies all of the\nclauses where the variable <code>x</code> occurs, and raises <code>UNSAT</code> if one\nsuch clause becomes empty.</p>\n<p>The reason why the Boolean satisfiability problem is hard is that a huge tree\nof candidate solutions must be explored. When a variable <code>x</code> is undecided, we\nusually have no idea whether <code>x</code> should be set to <code>false</code> or to <code>true</code>, so we\nhave to explore both branches.</p>\n<p>There <em>is</em> a situation, however, where it is easy to determine what the\nappropriate value of <code>x</code> should be. This situation arises when the variable\n<code>x</code> occurs in a unit clause, that is, a clause that contains just one literal.\nIf this literal is <code>x</code>, then the value of <code>x</code> must be <code>true</code>.\nIf this literal is <code>~x</code>, then the value of <code>x</code> must be <code>false</code>.\nExploiting unit clauses allows us to make progress without making arbitrary\ndecisions; therefore, it is always a profitable activity. This activity is\nknown as <em>unit propagation</em>.</p>\n<p><strong>Question G.</strong> (Ungraded.) Implement the function <code>find_unit_clause</code> so that\n<code>find_unit_clause()</code> finds and returns a unit clause, if there is one. (This\ncan be done by a naïve linear scan of the array <code>C.clauses</code>. The notes at the\nend of this exercise suggest improvements.)</p>\n<p><strong>Question H.</strong> (Ungraded.) Implement the function <code>propagate</code> so that\n<code>propagate()</code> performs unit propagation. That is, if there exists a unit\nclause <code>x</code> or <code>~x</code>, mark <code>x</code> as decided, set <code>x</code> to an appropriate value, and\nrepeat. (Because <code>set_value</code> can simplify existing clauses, exploiting a unit\nclause can cause new unit clauses to appear, so the process must be repeated\nuntil there are no unit clauses.)</p>\n<p>Once unit propagation is over, if we are lucky, it could be the case that all\nvariables have been decided, which means that we have found a solution and can\nstop. Otherwise, there are no more easy decisions. We must pick a variable\n<code>x</code>, mark it as decided, and explore (up to) two branches:</p>\n<ul><li><p>In the first branch, set <code>x</code> to (say) <code>true</code>, perform unit propagation, and\n continue (recursively).</p>\n</li><li><p>If the exception <code>UNSAT</code> is raised in the first branch, then setting\n <code>x</code> to <code>true</code> was a dead end. In that case, we must backtrack, that is,\n restore the state that existed just before entering the first branch,\n and make the opposite decision: set <code>x</code> to <code>false</code>,\n perform unit propagation, and continue (recursively).</p>\n</li></ul>\n\n<p><strong>Question I.</strong> (Ungraded.) Implement the function <code>explore</code> so that\n<code>explore()</code> <em>either</em> finds a solution that extends the current partial\nassignment of Boolean values to variables and terminates; <em>or</em> determines that\nthere exists no such solution and raises <code>UNSAT</code>.</p>\n<p><em>Hint.</em> Remember that <code>explore</code> assumes that there no are unit clauses, so\n<code>propagate()</code> must always be called before <code>explore()</code>.</p>\n<p>We are now almost done. The final task is to write the main function.</p>\n<p><strong>Question 8.</strong> Implement the function <code>solve</code>. The arguments of this function\nare an integer <code>n</code> and a formula <code>f</code> whose variables are comprised between 0\nincluded and <code>n</code> excluded. If the formula <code>f</code> is satisfiable, then <code>solve</code>\nmust return <code>Some solution</code>, where the function <code>solution</code> maps each variable\nin the semi-open interval <code>[0,n)</code> to a Boolean value. If the formula <code>f</code> is\nunsatisfiable, then <code>solve</code> must return <code>None</code>.</p>\n<p><em>Hint.</em> First convert the formula <code>f</code> to conjunctive normal form, then run the\nSAT solver. Either of these phases can raise the exception <code>UNSAT</code>, which must\nbe handled.</p>\n<p>Congratulations: you now have a working SAT solver!</p>\n<h2 id=\"Notes\">Notes</h2>\n\n<p>There are many ways in which this simplistic SAT solver can be improved.\nHere are a few that you can easily experiment with:</p>\n<ul><li><p>Remove the inefficient linear search in <code>find_unit_clause</code>. We want to find\n a unit clause (if one exists) in constant time. This requires setting up\n and maintaining a bag of unit clauses.</p>\n</li><li><p>Remove the inefficient linear search in <code>set_value</code>. We want to find all of the\n clauses where the variable <code>x</code> occurs, in a time that is proportional to the\n number of such clauses. This requires computing (once, at the beginning) a\n list of the clauses where <code>x</code> occurs. Better yet, separately pre-compute a\n list of the clauses where <code>x</code> occurs positively and a list of the clauses\n where <code>x</code> occurs negatively.</p>\n</li><li><p>Look for more efficient implementations of the set <code>Undecided</code>, and (at the\n same time) think about the strategies that <code>pick</code> might implement. For instance,\n it seems desirable to pick a variable that occurs in as many clauses as possible.</p>\n</li></ul>\n\n<p>The algorithm that we have implemented is a member of the family of\n<a href=\"https://en.wikipedia.org/wiki/DPLL_algorithm\" target=\"_blank\" rel=\"noopener noreferrer\">DPLL algorithms</a>.\nFor a good explanation of these algorithms (in French), accompanied\nwith simple yet reasonably efficient OCaml implementations, the reader\nis referred to the paper\n<a href=\"https://hal.inria.fr/inria-00202831/en/\" target=\"_blank\" rel=\"noopener noreferrer\">SAT-MICRO: petit mais costaud!</a>\nby Sylvain Conchon, Johannes Kanig, and Stéphane Lescuyer.</p>\n<h2 id=\"Infinite-Arrays\">Infinite Arrays</h2>\n\n<p>Conceptually, infinite arrays are exactly like ordinary arrays,\nexcept there is no need to specify their length at creation time:\ntheir length is infinite. The function call <code>InfiniteArray.make x</code>\ncreates a new infinite array and initializes every cell in it with\nthe value <code>x</code>. The cells of this array are indexed by the natural\nintegers, from zero to infinity. They can be read and written via\nthe operations <code>InfiniteArray.get</code> and <code>InfiniteArray.set</code>.</p>\n<p>In this exercise, an implementation of infinite arrays is given.\nThe module <code>InfiniteArray</code> offers the following signature:</p>\n<pre><code>  type &#39;a t\n  val make: &#39;a -&gt; &#39;a t\n  val get: &#39;a t -&gt; int -&gt; &#39;a\n  val set: &#39;a t -&gt; int -&gt; &#39;a -&gt; unit</code></pre>\n\n<p>If you are curious how infinite arrays might be implemented,\nplease study\n<a onclick=\"top.location='/exercises/infinite_arrays/';\" href=''>this exercise</a>.</p>\n"
      ]
    ],
    "compiled": {
      "prelude_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAAgwAAAByAAABwwAAAbWgJ1ByZWx1ZGWgwaAjdmFyAFgIAAA4AEBAQEGQwLOQoyNpbnRBQJBAAgX14QBAAPVAQEBAsMAJNi4vX2xlYXJuLW9jYW1sLWJ1aWxkL2V4ZXJjaXNlcy9mcG90dGllci9zYXQvcHJlbHVkZS5tbEFAQMAEAkFATkBAQaBAQKEEE0BBQKDBoCdmb3JtdWxhAFkIAAA4AEBAkaDgoCZGQ29uc3QAU5CgwLOQoyRib29sRUCQQAIF9eEAQAD7QECwwAQYRF9hwAQZRF9xQEChBClCoOCgJUZDb25uAFSQoMCzkAQQQJBAAgX14QBAAPqgwLOQBCJAkEACBfXhAEAA+aDAswQFQJBAAgX14QBAAPhAQLDABC9FcnTABDBFcgBYQEChBEBDoOCgJEZOZWcAVZCgwLMEEkCQQAIF9eEAQAD3QECwwAQ8RgBZAFvABD1GAFkAbkBAoQRNRKDgoCRGVmFyAFaQoMCzkARTQJBAAgX14QBAAPZAQLDABEpHAG8AccAES0cAbwEAgEBAoQRbRUBBQEBAQECwwAROQ1BQBARAQEAETKEEXkFBQKDBoCNlbnYAWggAADgAQEBAQZDAwUDAswQTQJBAAgX14QBAAPzAs5AESkCQQAIF9eEAQAD9QAIF9eEAQAD+QEBAQLDABGBJAQCCAQCCwARhSQEAggEAmEBAQARfoQRxRkFAQISVpr4AAAC6AAAAGQAAAGIAAABOoKAnUHJlbHVkZZAw4aLUnw+BRazyhBfL8Y/A06CgJlN0ZGxpYpAwSwS07aGapyLfNlFBiV+zR6CgOExlYXJub2NhbWxfaW50ZXJuYWxfaW50ZpAw+3WBgduUsgywuZFokdSmi6CgM0xlYXJub2NhbWxfY2FsbGJhY2uQMNSliLdPF5OaPQloTd04iiGgoDhDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3OQMLbGaUlV4QABrtJnVxEEqWFAhJWmvgAAAAQAAAACAAAABQAAAAWgkEBA",
      "prepare_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAA3EAAAC+AAAC0wAAArugJ1ByZXBhcmWgwqAkVE9ETwEAqwgAACAAkKMjZXhuR0CQQEBBsMAmX25vbmVfQEAA/wQCQUChBA5AQkCg06AtSW5maW5pdGVBcnJheQEArEDAkaDBoCF0AQCyCAAAOACgwJCQIWECBfXhAEAA6UBBQEFAoEdAoEJAQECwwAk2Li9fbGVhcm4tb2NhbWwtYnVpbGQvZXhlcmNpc2VzL2Zwb3R0aWVyL3NhdC9wcmVwYXJlLm1sRGttwAQCRGt2QEBAoEBAoQQmV0FAoLCgJG1ha2UBALPQwMFAwJCQIWECBfXhAEAA6sCzkAQeoAQIQJBAAgX14QBAAOtAAgX14QBAAOxAsMAEFkV3ecAEF0V3AE1AQKEEOlhAoLCgI2dldAEAtNDAwUDAswQQoMCQkCFhAgX14QBAAO9AkEACBfXhAEAA7cDBQMCzkKMjaW50QUCQQAIF9eEAQADuBA1AAgX14QBAAPBAAgX14QBAAPFAsMAEMUYATgBQwAQyRgBOAGpAQKEEVVlAoLCgI3NldAEAtdDAwUDAswQroMCQkCFhAgX14QBAAPRAkEACBfXhAEAA8sDBQMCzkAQbQJBAAgX14QBAAPPAwUAEDcCzkKMkdW5pdEZAkEACBfXhAEAA9UACBfXhAEAA9kACBfXhAEAA90ACBfXhAEAA+ECwwARSRwBrAG3ABFNHAGsBAI9AQKEEdlpAQECwwARWQ1BQwARXbwEDcwEDdkChBHpbQECgwqArRXhwZWN0ZWRHb3QBAK0IAAAgAAR5QJCgwLOQBDZAkEACBfXhAEAA+qDAs5AEO0CQQAIF9eEAQAD5QEBBBIBAoQSLXEJAoMKgLEV4cGVjdGVkR290QgEArggAACAABIpAkKDAs5CjJGJvb2xFQJBAAgX14QBAAPygwLOQBAdAkEACBfXhAEAA+0BAQQSTQKEEnl1CQKDCoC5Ob3RBU2V0RWxlbWVudAEArwgAACAABJ1AkKDAs5AEWkCQQAIF9eEAQAD9QEBBBJ9AoQSqXkJAoMKgM0V4cGVjdGVkTm9uZUdvdFNvbWUBALAIAAAgAASpQJCgwLOQBGZAkEACBfXhAEAA/kBAQQSrQKEEtl9CQKDCoDNFeHBlY3RlZFNvbWVHb3ROb25lAQCxCAAAIAAEtUCQQEBBBLJAoQS9YEJAQISVpr4AAAEYAAAAKAAAAJgAAAB6oKAnUHJlcGFyZZAwgP2wIRYg745ZohbfCwULEqCgK1N0ZGxpYl9fc2VxkDAYUHWqmbBZrUyuFctBH8wMoKAtU3RkbGliX19hcnJheZAwTjLnHPCF6nGU9DYi/ciVCKCgJlN0ZGxpYpAwSwS07aGapyLfNlFBiV+zR6CgJ1ByZWx1ZGWQMOGi1J8PgUWs8oQXy/GPwNOgoDhMZWFybm9jYW1sX2ludGVybmFsX2ludGaQMPt1gYHblLIMsLmRaJHUpougoDNMZWFybm9jYW1sX2NhbGxiYWNrkDDUpYi3TxeTmj0JaE3dOIohoKA4Q2FtbGludGVybmFsRm9ybWF0QmFzaWNzkDC2xmlJVeEAAa7SZ1cRBKlhQISVpr4AAAAEAAAAAgAAAAUAAAAFoJBAQA==",
      "solution_cmi": "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",
      "test_cmi": "",
      "exercise_lib": {
        "cma": "",
        "js": "function\ndynload(ag){\"use strict\";var\nah={},k=\"./_learn-ocaml-build/exercises/fpottier/sat/solution.ml\",j=248,f=ag.jsoo_runtime,i=f.caml_fresh_oo_id,F=f.caml_int_compare,E=f.caml_make_vect,s=f.caml_register_global,c=f.caml_string_of_jsbytes,p=f.caml_wrap_exception;function\na(a,b){return a.length==1?a(b):f.caml_call_gen(a,[b])}function\nd(a,b,c){return a.length==2?a(b,c):f.caml_call_gen(a,[b,c])}function\ne(a,b,c,d){return a.length==3?a(b,c,d):f.caml_call_gen(a,[b,c,d])}function\naf(a,b,c,d,e,g){return a.length==5?a(b,c,d,e,g):f.caml_call_gen(a,[b,c,d,e,g])}var\no=f.caml_get_global_data(),u=[0,0],v=[0,1],g=o.Assert_failure,h=o.Stdlib__list,I=o.Stdlib__array,aa=o.Stdlib;s(21,[0],\"Prelude\");var\nJ=[0,c(\"./_learn-ocaml-build/exercises/fpottier/sat/prepare.ml\"),30,4],L=c(\"Prepare.ExpectedGot\"),M=c(\"Prepare.ExpectedGotB\"),N=c(\"Prepare.NotASetElement\"),O=c(\"Prepare.ExpectedNoneGotSome\"),P=c(\"Prepare.ExpectedSomeGotNone\"),ac=c(\"Found\"),ad=[0,c(k),532,10],ae=[0,c(k),551,8],ab=[0,c(k),368,4],$=[0,c(k),363,4],W=[0,c(k),136,8],Y=[0,c(k),149,8],X=[0,c(k),151,8],Z=[0,c(k),153,8],U=c(\"SAT\"),T=[0,c(k),65,6],_=c(\"Solution.UNSAT\"),G=[j,c(\"Prepare.TODO\"),i(0)];function\nH(a){return[0,a,E(16,a)]}function\nt(c,b){if(0<=b){var\ne=c[2],d=e.length-1,f=d<=b?1:0;if(f){var\na=2*d|0,j=c[1];for(;;){if(!(b<a)){var\na=2*a|0;continue}var\nh=E(a,j);af(I[10],e,0,h,0,d);c[2]=h;var\ni=0;break}}else\nvar\ni=f;return i}throw[0,g,J]}function\nK(b,a){t(b,a);return b[2][1+a]}var\nb=[0,H,K,function(b,a,c){t(b,a);b[2][1+a]=c;return 0}];s(24,[0,G,b,[j,L,i(0)],[j,M,i(0)],[j,N,i(0)],[j,O,i(0)],[j,P,i(0)]],\"Prepare\");function\nQ(a){return[3,a]}function\nw(a){return a?v:u}function\nx(a){switch(a[0]){case\n0:return w(1-a[1]);case\n2:return a[1];default:return[2,a]}}function\nq(d,b,a){if(0===b[0])var\ne=a,c=b[1];else{if(0!==a[0])return[1,d,b,a];var\ne=b,c=a[1]}return d===c?e:[0,c]}function\nR(b,a){return q(1,b,a)}function\nS(b,a){return q(0,b,a)}function\nl(c,f){var\nb=f;for(;;)switch(b[0]){case\n0:return b[1];case\n1:if(b[1]){var\nd=l(c,b[2]);if(d){var\nb=b[3];continue}return d}var\ne=l(c,b[2]);if(e)return e;var\nb=b[3];continue;case\n2:return 1-l(c,b[1]);default:return a(c,b[1])}}function\ny(c,e){var\nd=(1<<c)-1|0,f=0;if(!(d<0)){var\nb=f;for(;;){a(e,function(b){return function(a){if(0<=a&&a<c)return 0!==(b&1<<a)?1:0;throw[0,g,T]}}(b));var\nh=b+1|0;if(d!==b){var\nb=h;continue}break}}return 0}function\nz(a,c){var\nb=[j,U,i(0)];try{y(a,function(d){var\na=l(d,c);if(a)throw b;return a});var\nd=0;return d}catch(a){a=p(a);if(a===b)return 1;throw a}}function\nV(b,a){return 1-z(b,x(a))}function\nA(c){function\ni(o,n,m){var\nd=o,b=n,f=m;for(;;)switch(b[0]){case\n0:var\nk=b[1];if(d!==k){if(f===c[1])return f;throw[0,g,W]}if(d===k)throw[0,g,X];throw[0,g,Y];case\n1:var\nl=b[1];if(d!==l){var\np=i(d,b[3],f),b=b[2],f=p;continue}if(d===l){var\nj=a(c[3],0),q=e(c[2],0,j,c[1]);h(d,b[2],q);var\nr=e(c[2],0,j,c[1]);h(d,b[3],r);return e(c[2],1,j,f)}throw[0,g,Z];case\n2:var\nd=1-d,b=b[1];continue;default:return e(c[2],d,b[1],f)}}function\nh(g,f,e){var\nd=g,b=f;for(;;){switch(b[0]){case\n0:if(d===b[1])return 0;break;case\n1:if(d===b[1]){h(d,b[2],e);var\nb=b[3];continue}break;case\n2:var\nd=1-d,b=b[1];continue}var\nj=i(d,b,e);return a(c[4],j)}}return[0,h,i,function(a){return h(1,a,c[1])}]}function\nr(m,l){var\nb=m,a=l;for(;;){if(b&&a){var\nf=a[2],c=a[1],g=b[2],d=b[1],h=d===c?1:0;if(h)var\ne=h;else{var\ni=d<c?1:0,j=i?r(g,[0,c,f]):i;if(j)var\ne=j;else{var\nk=c<d?1:0;if(k){var\nb=[0,d,g],a=f;continue}var\ne=k}}return e}return 0}}function\nn(a){var\nb=a[1];a[1]=b+1|0;return b}var\nm=[j,_,i(0)];function\nB(o){var\ni=0;function\nj(c,b,a){return[0,[0,c,b],a]}var\nf=a(b[1],0),c=[0,0];function\nk(a){function\ng(a){return 1-a[1]}var\ni=d(h[41],g,a);function\nj(a){return a[2]}var\nk=d(h[19],j,i),l=d(h[56],F,k);function\no(a){return a[1]}var\np=d(h[41],o,a);function\nq(a){return a[2]}var\ns=d(h[19],q,p);if(r(l,d(h[56],F,s)))return 0;if(0===a)throw m;var\nt=n(c);return e(b[3],f,t,[0,a])}var\ng=[0,0];function\nl(a){return c[1]}return[0,i,j,f,c,k,l,g,function(a){return n(g)}]}function\nC(j){function\ni(a){return 0}var\ng=a(b[1],i),f=[0,0];function\nc(a){var\nc=n(f);return e(b[3],g,c,a)}function\nh(a){return f[1]}return[0,c,h,function(h){var\nj=f[1]-1|0;if(!(j<h)){var\nc=j;for(;;){a(d(b[2],g,c),0);e(b[3],g,c,i);var\nk=c-1|0;if(h!==c){var\nc=k;continue}break}}f[1]=h;return 0}]}function\nD(k){var\nf=a(b[1],0),h=[0,-1];function\nc(a){return d(b[2],f,a)}function\ni(a){if(c(a))throw[0,g,$];h[1]=d(aa[17],h[1],a);return e(b[3],f,a,1)}function\nj(a){if(c(a))return e(b[3],f,a,0);throw[0,g,ab]}return[0,c,i,j,function(b){var\na=0;for(;;){if(h[1]<a)return 0;if(c(a))return[0,a];var\na=a+1|0;continue}}]}s(27,[0,Q,u,v,w,x,q,R,S,l,y,z,V,A,r,n,m,B,C,D,function(E){var\nf=D([0]),c=B([0]),w=c[8];function\nq(c){var\nb=a(w,0);a(f[2],b);return b}var\nr=c[6],k=c[3],x=c[5],y=c[2],z=c[1],l=C([0]),s=a(b[1],0);function\nt(b){a(f[3],b);function\nc(c){return a(f[2],b)}return a(l[1],c)}function\nu(b){return 1-a(f[1],b)}function\nn(f,g){e(b[3],s,f,g);var\nj=a(r,0)-1|0,t=0;if(!(j<0)){var\nc=t;for(;;){var\nn=d(b[2],k,c),y=0;if(n){var\ni=n[1],q=0;if(d(h[36],[0,g,f],i))var\no=0;else\nif(d(h[36],[0,1-g,f],i)){var\nx=function(a){return f!==a[2]?1:0},p=d(h[41],x,i);if(0===p)throw m;var\no=[0,p]}else\nq=1;if(!q){var\nu=d(b[2],k,c);e(b[3],k,c,o);var\nv=function(a,c){return function(d){return e(b[3],k,a,c)}}(c,u);a(l[1],v);y=1}}var\nw=c+1|0;if(j!==c){var\nc=w;continue}break}}return 0}function\no(v){for(;;){var\ng=[j,ac,i(0)];try{var\nm=a(r,0)-1|0,q=0;if(!(m<0)){var\ne=q;for(;;){var\no=d(b[2],k,e);if(o){var\nf=o[1];if(f&&!f[2])throw[0,g,f[1]]}var\nu=e+1|0;if(m!==e){var\ne=u;continue}break}}var\ns=0,c=s}catch(a){a=p(a);if(a[1]!==g)throw a;var\nc=[0,a[2]],w=a}if(c){var\nh=c[1],l=h[2];t(l);n(l,h[1]);continue}return c}}function\nv(h){for(;;){var\nc=a(f[4],0);if(c){var\nb=c[1];t(b);var\nd=a(l[2],0);try{n(b,1);o(0);var\ne=v(0);return e}catch(c){c=p(c);if(c===m){a(l[3],d);if(u(b)){n(b,0);o(0);continue}throw[0,g,ad]}throw c}}return c}}return[0,function(h,f){var\ne=h-1|0,i=0;if(!(e<0)){var\nc=i;for(;;){q(0);var\nk=c+1|0;if(e!==c){var\nc=k;continue}break}}try{a(A([0,z,y,q,x])[3],f);o(0);v(0);var\nj=[0,function(a){if(u(a))return d(b[2],s,a);throw[0,g,ae]}];return j}catch(a){a=p(a);if(a===m)return 0;throw a}}]}],\"Solution\");return ah}if(typeof\nmodule===\"object\"&&module.exports)module[\"exports\"]=dynload;\n"
      },
      "test_lib": {
        "cma": "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CwAAAEcAAAAEAAAADAAAAEcAAAAFAAAADQAAAEYAAAA+AAAABAAAAAAAAAATAAAAAQAAABwAAAAhAAAAaQAAAB4AAAAHAAAAIQAAAGsAAABsAAAALAEAABsAAABHAAAAEwAAACMAAAAKAAAAHgAAAAkAAAAeAAAACAAAAB4AAAAGAAAAHgAAAAUAAAAQAAAAEgAAAAgAAAArAAAABwAAAKn///8eAAAABAAAACUAAAAFAAAAAAAAAB4AAAAMAAAAHgAAAAsAAAAeAAAACgAAAB4AAAAJAAAAHgAAAAgAAAAeAAAABwAAAB4AAAAGAAAAHgAAAAQAAAAcAAAAGwAAACsAAAALAAAArv///zYAAAAAAAAAaAAAAGgAAAA4AAAAAAAAAAAAAABDAAAAaAAAAGgAAAA4AAAAAAAAAAAAAABDAAAAaAAAADgAAAAAAAAAAAAAAEMAAAA2AAAAAAAAAEAAAAAAAAAAQAAAAAMAAAA+AAAABAAAAAAAAABoAAAAaAAAADgAAAAAAAAAAAAAAEMAAABoAAAAOAAAAAAAAAAAAAAAQwAAADYAAAAAAAAAQAAAAAAAAABAAAAAAwAAAD4AAAAEAAAAAAAAAGgAAABBAAAAAQAAAD4AAAAEAAAAAAAAADgAAAAAAAAAAQAAACEAAAAeAAAABQAAACcAAAAEAAAAAAAAAB4AAAALAAAAHgAAAAoAAAAeAAAACQAAAB4AAAAIAAAAHgAAAAcAAAAeAAAABgAAAB4AAAAFAAAAHgAAAAQAAAAcAAAAGwAAACsAAAALAAAAl////zYAAAAAAAAAaAAAAGgAAAA4AAAAAAAAAAAAAABDAAAAaAAAAGgAAAA4AAAAAAAAAAAAAABDAAAAaAAAADgAAAAAAAAAAAAAAEMAAAA2AAAAAAAAAEAAAAAAAAAAQAAAAAMAAAA+AAAABAAAAAAAAABoAAAAaAAAADgAAAAAAAAAAAAAAEMAAABoAAAAOAAAAAAAAAAAAAAAQwAAADYAAAAAAAAAQAAAAAAAAABAAAAAAwAAAD4AAAAEAAAAAAAAAGgAAABBAAAAAQAAAD4AAAAEAAAAAAAAADgAAAAAAAAAAQAAACEAAAAeAAAABQAAACcAAAAEAAAAAAAAAB4AAAAKAAAAHgAAAAkAAAAeAAAACAAAAB4AAAAHAAAAHgAAAAYAAAAeAAAABQAAAB4AAAAEAAAAHAAAABsAAAArAAAACgAAAJn///82AAAAAAAAAGgAAABoAAAAOAAAAAAAAAAAAAAAQwAAAGgAAABoAAAAOAAAAAAAAAAAAAAAQwAAAGgAAABoAAAAOAAAAAAAAAAAAAAAQwAAAGgAAABoAAAAOAAAAAAAAAAAAAAAQwAAAGgAAAA4AAAAAAAAAAAAAABDAAAANgAAAAAAAABAAAAAAAAAAEAAAAADAAAAPgAAAAQAAAAAAAAAaAAAAGgAAAA4AAAAAAAAAAAAAABDAAAAaAAAADgAAAAAAAAAAAAAAEMAAAA2AAAAAAAAAEAAAAAAAAAAQAAAAAMAAAA+AAAABAAAAAAAAABoAAAAQQAAAAEAAAA+AAAABAAAAAAAAABoAAAAaAAAADgAAAAAAAAAAAAAAEMAAABoAAAAOAAAAAAAAAAAAAAAQwAAADYAAAAAAAAAQAAAAAAAAABAAAAAAwAAAD4AAAAEAAAAAAAAAGgAAABBAAAAAQAAAD4AAAAEAAAAAAAAAGgAAABoAAAAOAAAAAAAAAAAAAAAQwAAAGgAAAA4AAAAAAAAAAAAAABDAAAANgAAAAAAAABAAAAAAAAAAEAAAAADAAAAPgAAAAQAAAAAAAAAaAAAAEEAAAABAAAAPgAAAAQAAAAAAAAAOAAAAAAAAAABAAAAIQAAAB4AAAAFAAAAJwAAAAQAAAAZAAAACwAAAB4AAAAKAAAAHgAAAAkAAAAeAAAACAAAAB4AAAAHAAAAHgAAAAYAAAAeAAAABQAAABwAAAAbAAAAKwAAAAkAAABc////NgAAAAAAAABoAAAAaAAAADgAAAAAAAAAAAAAAEMAAABoAAAAaAAAADgAAAAAAAAAAAAAAEMAAABoAAAAOAAAAAAAAAAAAAAAQwAAADYAAAAAAAAAQAAAAAAAAABAAAAAAwAAAD4AAAAEAAAAAAAAAGgAAABoAAAAOAAAAAAAAAAAAAAAQwAAAGgAAAA4AAAAAAAAAAAAAABDAAAANgAAAAAAAABAAAAAAAAAAEAAAAADAAAAPgAAAAQAAAAAAAAAaAAAAEEAAAABAAAAPgAAAAQAAAAAAAAAOAAAAAAAAAABAAAAIQAAAB4AAAAGAAAAIwAAADYAAAAAAAAAHgAAAAQAAAAmAAAAAwAAAAAAAAAcAAAAIQAAAB4AAAAEAAAAGwAAAEcAAAAOAAAAJgAAAAMAAAApAAAAKgAAAAEAAAABAAAAGwAAACEAAAALAAAAOAAAAAAAAAAGAAAAJgAAAAQAAAAAAAAAOAAAAAAAAAACAAAAGwAAACsAAAABAAAA7v///zgAAAAAAAAAGAAAACcAAAAEAAAAKQAAACoAAAABAAAAAQAAABsAAAAhAAAACwAAADgAAAAAAAAABwAAACYAAAAEAAAAAAAAADgAAAAAAAAAAQAAABsAAAArAAAAAQAAAO7///84AAAAAAAAABgAAAAnAAAABAAAAAAAAABDAAAACwAAAEQAAABWAAAABwAAAAAAAAA4AAAAAAAAAAAAAAAlAAAAAwAAAAAAAAA4AAAAAAAAAAAAAAAhAAAAPwAAAAIAAAAoAAAAAgAAAAAAAAAcAAAAIQAAABsAAABHAAAAEQAAACUAAAACAAAAAAAAABwAAAAhAAAAGwAAAEcAAAARAAAAJQAAAAIAAAAWAAAARwAAABAAAAALAAAAHAAAACEAAAAbAAAARwAAAAsAAAAmAAAAAwAAAAAAAABoAAAAHAAAACIAAAAbAAAARwAAAA8AAAAlAAAAAgAAACkAAAAqAAAAAQAAAGMAAAAMAAAADAAAAB4AAAAFAAAAIgAAABwAAAAeAAAABAAAACIAAABAAAAAAAAAADYAAAAAAAAAGwAAACYAAAAEAAAAKQAAACoAAAABAAAAAQAAAAsAAABeAAAAAAAAACgAAAACAAAAAAAAAAkAAAArAAAAAAAAAPT///8lAAAAAgAAACkAAAAqAAAAAQAAAAEAAAALAAAAOAAAAAAAAAABAAAAJgAAAAQAAAAAAAAAHAAAABsAAAAmAAAAAwAAAAAAAAAcAAAAIQAAABsAAAAlAAAAAgAAAAAAAAAcAAAAGwAAACYAAAADAAAAAAAAAFcAAAAAAAQABAAAAAoAAAAYAAAAIAAAAAAAAABDAAAAGwAAAEMAAAAlAAAAAgAAAAAAAABFAAAAMgAAACEAAAALAAAARAAAADIAAAAhAAAADAAAAEMAAAAbAAAARAAAACcAAAAEAAAAAAAAAEMAAAAyAAAAIQAAABsAAABFAAAAJQAAAAIAAAAAAAAAQwAAABsAAABGAAAAJQAAAAIAAAAAAAAALAAAAAEAAAABAAAA0////wAAAAA/AAAAAAAAACgAAAACAAAAAAAAADgAAAAAAAAABAAAABsAAABHAAAADgAAACIAAAALAAAAHgAAAAQAAAAbAAAARwAAAAsAAAAiAAAAHAAAABsAAABHAAAACwAAACIAAAAeAAAABQAAABsAAABHAAAADgAAACIAAAAbAAAARwAAAAcAAAAiAAAAGwAAAEcAAAAFAAAAIQAAAB4AAAAEAAAAGwAAAEcAAAAHAAAAJgAAAAMAAAAAAAAARAAAAAoAAABEAAAACwAAAEMAAAANAAAAQwAAADgAAAAAAAAABQAAACcAAAAFAAAAAAAAAGgAAAAeAAAABAAAACIAAAAbAAAARwAAAA8AAAAhAAAAOAAAAAAAAAAAAAAAGwAAAEcAAAAOAAAAIgAAAAkAAAArAAAAAAAAAOD///8KAAAADAAAAB4AAAAFAAAAGwAAACsAAAAEAAAAr////xwAAAAhAAAAHgAAAAUAAAA4AAAAAAAAAAMAAAAbAAAARwAAAA4AAAAiAAAAGwAAAEcAAAAHAAAAJgAAAAUAAAAAAAAAOAAAAAAAAAAEAAAAGwAAAEcAAAAOAAAAIgAAAAsAAAAMAAAAGwAAAEcAAAALAAAAIgAAAB4AAAAEAAAAGwAAAEcAAAALAAAAIgAAAB4AAAAGAAAAGwAAAEcAAAAOAAAAIgAAABsAAABHAAAABwAAACIAAAAbAAAARwAAAAUAAAAhAAAAHgAAAAUAAABoAAAAHAAAACIAAAAbAAAARwAAAA8AAAAhAAAAOAAAAAAAAAAAAAAAGwAAAEcAAAAOAAAAIgAAABsAAABHAAAABwAAACYAAAADAAAAAAAAAEQAAAAKAAAARAAAAAsAAABDAAAADQAAAEMAAAA4AAAAAAAAAAUAAAAnAAAABQAAACsAAAAAAAAA8f///woAAAAMAAAAHgAAAAUAAAAeAAAABAAAABsAAAArAAAABQAAALD///8cAAAAIQAAAB4AAAAFAAAAOAAAAAAAAAADAAAAGwAAAEcAAAAOAAAAIgAAABsAAABHAAAABwAAACYAAAAEAAAAAAAAAB4AAAAIAAAAGwAAAEcAAAAOAAAAIgAAAAsAAAAMAAAAGwAAAEcAAAALAAAAIgAAAB4AAAAEAAAAGwAAAEcAAAALAAAAIgAAAB4AAAAHAAAAGwAAAEcAAAAOAAAAIgAAABsAAABHAAAABwAAACIAAAAbAAAA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9gAAAAcAAAABAAAAOAAAAAAAAAABAAAAJQAAAAMAAAABAAAAKAAAAAIAAABnAAAAfQEAAF0AAAAAAAAANwAAAAAAAAAQAAAAOAAAAAAAAAASAAAACQAAACsAAAAAAAAA2////2gAAAA4AAAAAAAAAAAAAAAhAAAACQAAACsAAAAAAAAAyP///wkAAAAsAAAAAQAAAAAAAABc3///KwAAAAAAAAC0////CQAAACsAAAAAAAAAov///zgAAAAAAAAAEgAAAAoAAAArAAAAAQAAAIb///8JAAAAKwAAAAAAAAB6////DAAAACwAAAABAAAAAQAAAFnf//9jAAAACgAAACsAAAABAAAAXf///woAAAArAAAAAQAAAEz///8JAAAAKwAAAAAAAAA9////CgAAAAwAAAArAAAAAgAAAAD///8KAAAAKwAAAAEAAAD1/v//DQAAACsAAAABAAAA2f7//2wAAAAgAAAACwAAACEAAABsAAAAOwAAAAwAAAAhAAAAaQAAAAwAAAASAAAACgAAACsAAAACAAAAt/7//wkAAAArAAAAAAAAAJv+//8KAAAADAAAAA4AAAArAAAAAwAAAIz+//9oAAAACwAAACEAAABpAAAADAAAACEAAAAKAAAADAAAAA4AAAArAAAAAwAAAG7+//8SAAAAEAAAABIAAAATAAAAKwAAAAIAAABD/v//EgAAABEAAAArAAAAAQAAACT+//8SAAAAEgAAABIAAAAWAAAAKwAAAAIAAAAL/v//bAAAAFAAAABsAAAAIAAAAAsAAAA4AAAAAAAAAAAAAAAiAAAACgAAAAwAAAAsAAAAAQAAAAIAAAAd3///AAAAABIAAAAYAAAAEgAAABoAAAAsAAAAAQAAAAMAAAA/3///KwAAAAAAAADX/f//EQAAABIAAAAYAAAAKwAAAAIAAAC//f//aQAAABIAAAAKAAAAIQAAADYAAAAAAAAAEgAAABYAAAAhAAAAEgAAAAoAAAAiAAAACgAAAAwAAAAOAAAAKwAAAAMAAACl/f//aQAAABIAAAAMAAAAIQAAADYAAAAAAAAAEgAAABgAAAAhAAAAEgAAAAwAAAAiAAAACgAAAA4AAAAQAAAAKwAAAAMAAACL/f//EgAAAAsAAAASAAAADQAAABIAAAAPAAAAKwAAAAMAAABy/f//CgAAABIAAAAOAAAAEgAAABsAAAArAAAAAwAAAFn9//8LAAAAEgAAAA8AAAASAAAAHAAAACsAAAADAAAAQP3//wwAAAASAAAAEAAAABIAAAAdAAAAKwAAAAMAAAAn/f//DAAAABEAAAASAAAAEAAAACsAAAADAAAAF/3//wwAAAAQAAAAEgAAABEAAAArAAAAAwAAAAf9//8LAAAAEgAAABMAAAASAAAAHQAAABIAAAAhAAAAKwAAAAQAAADl/P//EgAAABEAAAASAAAAFAAAABIAAAAWAAAAEgAAADEAAAArAAAABAAAAMT8//8KAAAAEgAAAA0AAAASAAAAFAAAACsAAAADAAAAqfz//woAAAASAAAAIgAAACsAAAACAAAAmPz//woAAAASAAAACQAAACsAAAACAAAAiPz//wsAAAASAAAAFgAAABIAAAAZAAAAEgAAABsAAAASAAAAJAAAABIAAAAoAAAAKwAAAAYAAAAz/P//EgAAABYAAAASAAAAGAAAABIAAAAaAAAAEgAAABwAAAASAAAAIwAAABIAAAApAAAAKwAAAAYAAADp+///EgAAABMAAAASAAAAGAAAACsAAAACAAAAvfv//2gAAABdAAAAAAAAADYAAAAAAAAAQAAAAPgAAAAJAAAAKwAAAAAAAACX+///CgAAACsAAAABAAAAjPv//2gAAAAJAAAAKwAAAAAAAACC+///CwAAACsAAAABAAAAbvv//wkAAAArAAAAAAAAAFj7//8KAAAADwAAABEAAAArAAAAAwAAADD7//8KAAAADwAAACsAAAACAAAAIvv//woAAAArAAAAAQAAABP7//8NAAAAEQAAABIAAAAJAAAAEgAAAAsAAAArAAAABAAAAOr6//8RAAAAEgAAAAkAAAASAAAACwAAACsAAAADAAAAzvr//xIAAAAKAAAAEgAAAAwAAAAsAAAAAQAAAAIAAACL+f//LAAAAAEAAAAAAAAABPr//wAAAAArAAAAAQAAAKz6//8JAAAALAAAAAEAAAAAAAAATvr//wAAAAAMAAAADwAAABIAAAARAAAAKwAAAAQAAABd+v//CgAAAAwAAAAOAAAAEAAAABIAAAAIAAAAEgAAAAoAAAASAAAADAAAABIAAAAOAAAAEgAAABAAAAASAAAAEgAAABIAAAAUAAAAEgAAABYAAAASAAAAGAAAABIAAAAaAAAAEgAAABwAAAASAAAAHgAAABIAAAAgAAAAPgAAABEAAAAAAAAAEwAAABEAAAAJAAAAKwAAAAAAAAA++f//CQAAACsAAAAAAAAAD/n//wkAAAArAAAAAAAAAAH5//8KAAAADAAAAA4AAAArAAAAAwAAAO34//8JAAAAKwAAAAAAAADS+P//CgAAAA0AAAAPAAAAKwAAAAMAAACi+P//EAAAACsAAAABAAAAmvj//xEAAAArAAAAAQAAAIn4//8SAAAACAAAACsAAAABAAAAc/j//wsAAAASAAAACgAAACsAAAACAAAAYfj//xIAAAAKAAAAKwAAAAEAAABL+P//EgAAAAsAAAArAAAAAQAAADj4//8SAAAADAAAACsAAAABAAAAJfj//wkAAAAsAAAAAQAAAAAAAAAq9///AAAAABIAAAAPAAAAKwAAAAIAAAD+9///EgAAAA8AAAArAAAAAQAAALL3//8SAAAAEAAAACsAAAABAAAAoff//w8AAAASAAAACQAAABIAAAAMAAAAKwAAAAMAAACK9///aQAAABIAAAAKAAAAIQAAAGgAAAASAAAACwAAACEAAAASAAAACAAAACIAAAAMAAAADwAAABIAAAAJAAAAEgAAAAsAAAASAAAADgAAABIAAAAXAAAAKwAAAAYAAABe9///CgAAAA4AAAARAAAAKwAAAAMAAAAu9///EQAAABIAAAAWAAAAKwAAAAIAAAAL9///CgAAAAwAAAAOAAAAEAAAABIAAAAIAAAAEgAAAAoAAAASAAAADAAAABIAAAANAAAAEgAAAA8AAAASAAAAEAAAABIAAAASAAAAEgAAABQAAAASAAAAFgAAABIAAAAXAAAAEgAAABkAAAASAAAAGwAAABIAAAAdAAAAEgAAAB8AAAASAAAAIQAAABIAAAAiAAAAPgAAABQAAAAAAAAAEwAAABAAAABoAAAAXQAAAAAAAAA2AAAAAAAAAEAAAAD4AAAACQAAACsAAAAAAAAAqfb//wsAAAArAAAAAQAAAJj2//8KAAAAKwAAAAEAAACK9v//DQAAACsAAAABAAAAM/b//wkAAAArAAAAAAAAABn2//8KAAAALAAAAAIAAAABAAAA8N3//wje//8AAAAAKwAAAAEAAAD89f//CQAAACsAAAAAAAAA6fX//woAAAAQAAAAEgAAAAkAAAArAAAAAwAAANH1//8JAAAAKwAAAAAAAACK9f//CQAAACsAAAAAAAAAY/X//wkAAAArAAAAAAAAADf1//8JAAAAKwAAAAAAAAAL9f//NgAAAAAAAAAJAAAAKwAAAAAAAAD79P//DAAAAA4AAAAQAAAAEgAAABEAAAArAAAABAAAALL0//8KAAAADAAAABIAAAAIAAAAEgAAAAsAAAASAAAAEQAAABIAAAAfAAAAEgAAACQAAAASAAAAVQAAACsAAAAIAAAAg/T//wsAAAANAAAAEgAAAAkAAAASAAAADAAAABIAAAASAAAAEgAAACAAAAASAAAAJQAAABIAAABWAAAAKwAAAAgAAADM8///DAAAAA4AAAASAAAACgAAABIAAAANAAAAEgAAABMAAAASAAAAIQAAABIAAAAmAAAAKwAAAAcAAAD78v//CQAAACsAAAAAAAAAOfL//wkAAAAsAAAAAQAAAAAAAACo3f//AAAAACsAAAABAAAAJ/L//wwAAAArAAAAAQAAABfy//8LAAAADgAAACsAAAACAAAA8PH//wwAAAAPAAAAKwAAAAIAAADW8f//CQAAACsAAAAAAAAAxfH//woAAAASAAAASwAAACsAAAACAAAAufH//wkAAAAfAAAADQAAAAMAAAA2AAAAAAAAADYAAAAAAAAANgAAAAAAAAA4AAAAAAAAAAAAAAAgAAAABAAAAAkAAAArAAAAAAAAAIfx//8KAAAAEgAAAE4AAAArAAAAAgAAAHvx//8JAAAAHwAAAA0AAAADAAAANgAAAAAAAAA2AAAAAAAAADYAAAAAAAAAOAAAAAAAAAAAAAAAIAAAAAQAAAAMAAAAKwAAAAEAAABW8f//CgAAABIAAABRAAAAKwAAAAIAAABK8f//CQAAAB8AAAANAAAAAwAAADYAAAAAAAAANgAAAAAAAAA2AAAAAAAAADgAAAAAAAAAAAAAACAAAAAEAAAACQAAACsAAAAAAAAAK/H//woAAAASAAAAVAAAACsAAAACAAAAH/H//wkAAAAfAAAADQAAAAMAAAA2AAAAAAAAADYAAAAAAAAANgAAAAAAAAA4AAAAAAAAAAAAAAAgAAAABAAAAAkAAAArAAAAAAAAAAHx//8KAAAAEgAAAFcAAAArAAAAAgAAAPXw//8JAAAAHwAAAA0AAAADAAAANgAAAAAAAAA2AAAAAAAAADYAAAAAAAAAOAAAAAAAAAAAAAAAIAAAAAQAAAASAAAAOQAAABIAAABZAAAAKwAAAAIAAADJ8P//CQAAAB8AAAANAAAAAwAAADYAAAAAAAAANgAAAAAAAAA2AAAAAAAAADgAAAAAAAAAAAAAACAAAAAEAAAAEgAAAD4AAAASAAAARwAAABIAAABOAAAAEgAAAFEAAAASAAAAUwAAABIAAABbAAAAKwAAAAYAAACN8P//CQAAAB8AAAANAAAAAwAAADYAAAAAAAAANgAAAAAAAAA2AAAAAAAAADgAAAAAAAAAAAAAACAAAAAEAAAAEgAAAD4AAAASAAAAbAAAACsAAAACAAAAXvD//wkAAAAfAAAADQAAAAMAAAA2AAAAAAAAADYAAAAAAAAANgAAAAAAAAA4AAAAAAAAAAAAAAAgAAAABAAAABIAAAAQAAAADAAAACEAAAAJAAAAHwAAAA0AAAADAAAANgAAAAAAAAA2AAAAAAAAADYAAAAAAAAAOAAAAAAAAAAAAAAAIAAAAAQAAAALAAAAEgAAADsAAAAhAAAAEgAAAEQAAAArAAAAAQAAACDw//8JAAAAHwAAAA0AAAADAAAANgAAAAAAAAA2AAAAAAAAADYAAAAAAAAAOAAAAAAAAAAAAAAAIAAAAAQAAAA2AAAAAAAAABIAAAA2AAAARwAAAA8AAAAhAAAACgAAABIAAAAfAAAAEgAAAD4AAAASAAAAOQAAACsAAAAEAAAA3+///wsAAAASAAAAIAAAABIAAAA/AAAAEgAAADoAAAArAAAABAAAAFzv//8MAAAAEgAAACEAAAASAAAAQAAAABIAAAA7AAAAKwAAAAQAAADi7v//CQAAACsAAAAAAAAAnu7//xIAAAARAAAAEgAAABsAAAASAAAASAAAABIAAABRAAAALAAAAAIAAAAEAAAAhdz//8/c//8fAAAADQAAAAQAAAA2AAAAAAAAADYAAAAAAAAANgAAAAAAAAA4AAAAAAAAAAAAAAAgAAAABAAAAAwAAAASAAAARgAAACsAAAACAAAAT+7//xIAAAAVAAAAEgAAAB8AAAASAAAATwAAACwAAAABAAAAAwAAALbc//8fAAAADQAAAAMAAAA2AAAAAAAAADYAAAAAAAAANgAAAAAAAAA4AAAAAAAAAAAAAAAgAAAABAAAAAsAAAASAAAAVQAAACsAAAACAAAAK+7//wwAAAASAAAASgAAACsAAAACAAAAIO7//xIAAABWAAAAEgAAAGUAAAASAAAAZwAAABIAAAByAAAAEgAAAHQAAAAsAAAABAAAAAUAAADT3P//Bd3//y/d//9a3f//AAAAABIAAABPAAAAIQAAAAkAAAArAAAAAAAAAP7t//8JAAAAKwAAAAAAAADy7f//CwAAABIAAAAdAAAAEgAAACIAAAASAAAAVwAAACsAAAAEAAAAzO3//wkAAAAfAAAADQAAAAMAAAA2AAAAAAAAADYAAAAAAAAANgAAAAAAAAA4AAAAAAAAAAAAAAAgAAAABAAAABIAAAAzAAAAEgAAAEwAAAArAAAAAgAAAKzt//8KAAAAEgAAAE0AAAArAAAAAgAAAJvt//8KAAAAEgAAAE4AAAArAAAAAgAAAI3t//8KAAAAEgAAAE8AAAArAAAAAgAAAH/t//8JAAAAKwAAAAAAAABm7f//CgAAACsAAAABAAAAVe3//woAAAArAAAAAQAAADjt//8KAAAADgAAABIAAABUAAAAKwAAAAMAAAAb7f//CgAAAAwAAAAOAAAAEAAAABIAAAAIAAAAEgAAAAoAAAASAAAADAAAABIAAAAOAAAAPgAAAAgAAAAAAAAAEwAAAAgAAAASAAAACgAAABIAAAAPAAAAEgAAABcAAAASAAAAPQAAABIAAABAAAAAEgAAAEcAAAASAAAATQAAABIAAABRAAAAEgAAABoAAAASAAAAVQAAACsAAAAKAAAAnez//w0AAAASAAAADQAAABIAAAAXAAAAEgAAACgAAAASAAAAOAAAABIAAAA+AAAAEgAAAFEAAAASAAAAVAAAACsAAAAIAAAAO+r//xIAAAAVAAAAEgAAABcAAAASAAAAOAAAABIAAAA7AAAAEgAAAI8AAAASAAAAUwAAACsAAAAGAAAA6un//woAAAASAAAADwAAABIAAAApAAAAEgAAADIAAAASAAAAPwAAABIAAABSAAAAKwAAAAYAAAC16P//EgAAAIoAAAArAAAAAQAAAG3o//8SAAAACgAAABIAAAAQAAAAKwAAAAIAAAAN6P//CgAAACsAAAABAAAA7ef//wsAAAArAAAAAQAAAMzn//8JAAAAKwAAAAAAAAC/5///CgAAACsAAAABAAAAp+f//woAAAArAAAAAQAAAGPn//8KAAAAKwAAAAEAAABN5///CgAAAA8AAAARAAAAEgAAAAkAAAASAAAADQAAABIAAABRAAAAEgAAAFkAAAASAAAAXAAAABIAAABeAAAAEgAAAJ0AAAASAAAAEQAAACsAAAALAAAA9+b//xIAAAAoAAAAEgAAADIAAAASAAAAQgAAABIAAABIAAAAEgAAAFsAAAArAAAABQAAALfk//9sAAAA1v///woAAAArAAAAAQAAAJPk//8KAAAAEgAAAJoAAAArAAAAAgAAAIjk//8MAAAAEgAAAEYAAAASAAAAXwAAACsAAAADAAAAM+T//xIAAABhAAAAIQAAAGgAAAALAAAAIQAAAAoAAAA/AAAAAAAAABMAAAACAAAADQAAABIAAACYAAAAKwAAAAIAAADk4///bAAAAP////8KAAAAEAAAACsAAAACAAAAGOP//woAAAAMAAAADgAAABAAAAASAAAACAAAABIAAAALAAAAPgAAAAYAAAAAAAAAEwAAAAcAAAASAAAATwAAABIAAABXAAAAEgAAAFoAAAASAAAAXAAAAA4AAAASAAAAYAAAACsAAAAGAAAAWuL//wkAAAArAAAAAAAAALfh//8KAAAAPwAAAAAAAAATAAAAAQAAADgAAAAAAAAAAAAAADgAAAAAAAAAAAAAABMAAAABAAAAIQAAABIAAABdAAAAKwAAAAEAAAA34f//EgAAAGEAAAAhAAAAaAAAAAsAAAAhAAAADAAAACsAAAABAAAA5OD//w0AAAAsAAAAAQAAAAEAAABY4P//AAAAACsAAAABAAAA1eD//woAAAANAAAAEQAAACwAAAABAAAAAwAAAGbg//8GAAAAQwAAAAsAAAAhAAAADwAAAAsAAAASAAAAZgAAAEcAAAAOAAAAIgAAAAoAAAAMAAAADwAAABIAAAAIAAAAEgAAAAoAAAA+AAAABQAAAAAAAAATAAAACAAAAAsAAAArAAAAAQAAACHg//8MAAAAKwAAAAEAAABj3///CgAAAA4AAAArAAAAAgAAAC7f//8KAAAADAAAAA4AAAAQAAAAEgAAAAgAAAA+AAAABQAAAAAAAAATAAAABQAAAAkAAAArAAAAAAAAAJDe//8JAAAAHwAAAA0AAAADAAAANgAAAAAAAAA2AAAAAAAAADYAAAAAAAAAOAAAAAAAAAAAAAAAIAAAAAQAAAALAAAAEgAAAFQAAAASAAAAXAAAABIAAABfAAAAEgAAAGEAAAARAAAAEgAAAGUAAAArAAAABwAAADve//8SAAAADQAAABIAAABeAAAAKwAAAAIAAACC3f//CgAAABIAAAAKAAAAEgAAABAAAAASAAAAFQAAABIAAABZAAAAEgAAAGEAAAASAAAAZAAAABIAAABmAAAAEgAAAKAAAAASAAAApgAAABIAAACoAAAAEgAAACAAAAASAAAAbQAAACsAAAANAAAAIt3//woAAAANAAAAEgAAAAgAAAASAAAACwAAABIAAAANAAAAEgAAABcAAAASAAAAGgAAABIAAAAcAAAAEgAAAGEAAAArAAAACQAAAIXb//8KAAAAOAAAAAAAAABsAAAARAAAAGgAAAA4AAAAAAAAABkAAAAjAAAAOAAAAAAAAAAAAAAAIQAAAAsAAAANAAAADwAAABEAAAASAAAACgAAABIAAAALAAAAEgAAAA0AAAASAAAADwAAABIAAAARAAAAEgAAABMAAAASAAAAFQAAABIAAAAXAAAAEgAAABkAAAASAAAAGwAAABIAAAAdAAAAEgAAAB8AAAASAAAAIQAAABIAAAAjAAAAEgAAACUAAAASAAAAJwAAABIAAAApAAAAEgAAACsAAAASAAAALQAAABIAAAAvAAAAEgAAADIAAAASAAAAMwAAABIAAAA1AAAAEgAAADcAAAASAAAAOQAAABIAAAA7AAAAEgAAAD0AAAASAAAAPwAAABIAAABBAAAAEgAAAEMAAAASAAAARQAAABIAAABIAAAAEgAAAEkAAAASAAAASwAAABIAAABPAAAAEgAAAE8AAAASAAAAUQAAABIAAABTAAAAEgAAAFUAAAASAAAAVwAAABIAAABZAAAAEgAAAFsAAAASAAAAXgAAABIAAABfAAAAEgAAAGEAAAASAAAAZAAAABIAAABlAAAAEgAAAGgAAAASAAAAaQAAABIAAABsAAAAEgAAAG0AAAASAAAAcAAAABIAAABxAAAAEgAAAHQAAAASAAAAdQAAABIAAAB3AAAAEgAAAHoAAAASAAAAewAAABIAAAB9AAAAEgAAAIAAAAASAAAAgQAAABIAAACDAAAAEgAAAIYAAAASAAAAhwAAABIAAACJAAAAEgAAAIwAAAASAAAAjQAAABIAAACPAAAA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",
        "js": "function\ndynload(gS){\"use strict\";var\ngT={},s=\"./_learn-ocaml-build/exercises/fpottier/sat/test.ml\",cQ=\"Unfortunately, these formulae do not have the desired relationship.\",bo=\";\\n\",aS=246,cH=\"is incorrect.\",aR=-42,cG=\"const\",bq=\"list\",cF=\"false\",t=\"Test\",cP=120,cY=\"let module V = VarSet() in\\n\",T=\"bool\",cM=\"begin match observed with\\n| None   -> ()\\n| Some x -> raise (ExpectedNoneGotSome x)\\nend\\n\",cX=\"neg\",cL=\"\",cO=\"Something is wrong. Executing the following instruction sequence:\",cN=\"):\",cV=\" variable\",cW=\"~\",cE=\"env\",cK=\"x%d\",cU=700,cS=128,cT=\"caused the following exception to be raised:\",cD=\"s\",aQ=\"()\",ar=\"int\",cI=\"let observed = V.pick() in\\n\",cJ=\"conn\",cR=248,cC=\"true\",bp=\"var\",C=\"formula\",n=gS.jsoo_runtime,cB=n.caml_check_bound,S=n.caml_equal,cA=n.caml_fresh_oo_id,cz=n.caml_ml_string_length,a=n.caml_string_of_jsbytes,aP=n.caml_wrap_exception;function\nc(a,b){return a.length==1?a(b):n.caml_call_gen(a,[b])}function\nb(a,b,c){return a.length==2?a(b,c):n.caml_call_gen(a,[b,c])}function\nl(a,b,c,d){return a.length==3?a(b,c,d):n.caml_call_gen(a,[b,c,d])}function\nr(a,b,c,d,e){return a.length==4?a(b,c,d,e):n.caml_call_gen(a,[b,c,d,e])}var\nm=n.caml_get_global_data(),cp=[0,0,[0,[0,1,0],[0,[0,2,0],[0,[0,3,0],[0,[0,1,[0,2,0]],[0,[0,1,[0,3,0]],[0,[0,2,[0,3,0]],[0,[0,1,[0,2,[0,3,0]]],0]]]]]]]],u=m.Stdlib__buffer,x=m.Assert_failure,bY=m.Match_failure,g=m.Stdlib__list,aF=m.Stdlib__array,k=m.Test_lib,f=m.Solution,i=m.Stdlib,e=m.Ast_helper,B=m.Ty,p=m.Prepare,L=m.Stdlib__printexc,w=m.Stdlib__printf,at=m.Stdlib__string,aT=m.Stdlib__random,$=m.Stdlib__hashtbl,v=m.Learnocaml_internal,U=g[19],c5=[0,a(s),270,6],dJ=[0,a(s),766,26],eG=a(cG),eH=a(cJ),eI=a(cX),eJ=a(bp),eN=a(\"FConst\"),eO=a(\"FConn\"),eP=a(\"FNeg\"),eQ=a(\"FVar\"),eU=a(cC),eV=a(cF),eW=a(cW),eX=[0,[12,cP,[4,0,0,0,0]],a(cK)],eY=a(\" &\"),eZ=a(\" |\"),gI=[0,a(s),2149,14],gJ=[0,[0,a(\"However, this is not the case. Under this assignment, this formula evaluates to false.\")],0],gK=[0,a(\"Your solver claims that this formula is satisfied by the following assignment:\")],gM=[0,a(s),2129,16],gL=[0,a(\"Your solver claims that this formula is unsatisfiable. Yet the following assignment satisfies it:\")],gN=[0,a(s),2141,16],gO=a(\"SAT\"),gP=[0,a(\"SAT_STUDENT\")],gQ=a(\"Question 8\"),gH=[0,a(\"While attempting to solve this formula, the following exception was raised:\")],gC=[0,a(cT)],gD=[0,a(cO)],gE=a(\"VarSet\"),gF=[0,a(\"VARSET_STUDENT\")],gG=a(\"Question 7\"),gy=[0,[11,a(\"ExpectedGotB (\"),[9,0,[11,a(\", \"),[9,0,[12,41,0]]]]],a(\"ExpectedGotB (%b, %b)\")],gq=[0,[11,a(cI),0],a(cI)],gr=[0,[11,a(cM),0],a(cM)],gs=[0,[11,a(\"begin match observed with\\n| None   -> raise (ExpectedSomeGotNone)\\n| Some x -> if not (\"),[2,0,[11,a(\") then raise (NotASetElement x)\\nend\\n\"),0]]],a(\"begin match observed with\\n| None   -> raise (ExpectedSomeGotNone)\\n| Some x -> if not (%s) then raise (NotASetElement x)\\nend\\n\")],gu=[0,a(s),1977,10],gt=[0,[11,a(\"let expected = \"),[9,0,[11,a(\"\\nand observed = V.mem \"),[4,0,0,0,[11,a(\" in\\nif not (expected = observed) then\\nraise (ExpectedGotB (expected, observed));\\n\"),0]]]]],a(\"let expected = %b\\nand observed = V.mem %d in\\nif not (expected = observed) then\\nraise (ExpectedGotB (expected, observed));\\n\")],gv=[0,[11,a(\"V.add \"),[4,0,0,0,[11,a(bo),0]]],a(\"V.add %d;\\n\")],gw=[0,[11,a(\"V.remove \"),[4,0,0,0,[11,a(bo),0]]],a(\"V.remove %d;\\n\")],gp=[0,[11,a(cY),0],a(cY)],gx=[0,[11,a(aQ),0],a(aQ)],gn=[0,[11,a(\"x = \"),[4,0,0,0,0]],a(\"x = %d\")],go=a(\" || \"),gj=[0,a(s),1882,8],gd=[0,a(cT)],ge=[0,a(cO)],gf=a(\"Trail\"),gg=[0,a(\"TRAIL_STUDENT\")],gh=a(\"Question 6\"),f8=[0,[11,a(\"(* Set [s] to \"),[4,0,0,0,[11,a(\" and push an undo action. *)\\nlet x = !s in s := \"),[4,0,0,0,[11,a(\"; Trail.push (fun () -> s := x);\\n\"),0]]]]],a(\"(* Set [s] to %d and push an undo action. *)\\nlet x = !s in s := %d; Trail.push (fun () -> s := x);\\n\")],f9=[0,[11,a(\"(* Take a checkpoint. *)\\nlet checkpoint\"),[4,0,0,0,[11,a(\" = Trail.record() in\\n\"),0]]],a(\"(* Take a checkpoint. *)\\nlet checkpoint%d = Trail.record() in\\n\")],f$=[0,a(s),1733,8],f_=[0,[11,a(\"(* Go back to this checkpoint. *)\\nTrail.revert checkpoint\"),[4,0,0,0,[11,a(bo),0]]],a(\"(* Go back to this checkpoint. *)\\nTrail.revert checkpoint%d;\\n\")],gb=[0,a(s),1741,8],ga=[0,[11,a(\"(* Check the value of [s]. *)\\nif \"),[4,0,0,0,[11,a(\" <> !s then raise (ExpectedGot (\"),[4,0,0,0,[11,a(\", !s));\\n\"),0]]]]],a(\"(* Check the value of [s]. *)\\nif %d <> !s then raise (ExpectedGot (%d, !s));\\n\")],f7=[0,[11,a(\"let module Trail = Trail() in\\nlet s = ref (\"),[4,0,0,0,[11,a(\") in\\n\"),0]]],a(\"let module Trail = Trail() in\\nlet s = ref (%d) in\\n\")],gc=[0,[11,a(aQ),0],a(aQ)],f6=[0,a(s),1687,8],fV=[0,a(T)],fW=[0,a(ar)],fX=[0,a(bq)],fY=[0,a(ar)],fZ=[0,a(bq)],f0=a(\"intersect\"),f1=a(\"Question 5\"),fK=[0,a(\"whereas the new formula is satisfied by this extended assignment:\")],fL=[0,a(\"The original formula is not satisfied by this assignment:\")],fM=[0,a(cQ)],fN=[0,[0,a(\"whereas the new formula is not satisfied by any extension of this assignment.\")],0],fO=[0,a(\"The original formula is satisfied by this assignment:\")],fP=[0,a(cQ)],fQ=[0,a(\"While attempting to convert this formula to conjunctive normal form, the following exception was raised:\")],fR=[0,a(\"Something is wrong. Consider this formula:\")],fS=a(\"CNF\"),fT=[0,a(\"CNF_STUDENT\")],fU=a(\"Question 4\"),fJ=[0,0,0],fI=a(\" & \"),fH=a(cW),fG=[0,[12,cP,[4,0,0,0,0]],a(cK)],fD=a(cD),fF=a(cL),fE=[0,[11,a(\"Converting this formula to conjunctive normal form yields the following new formula (of \"),[4,0,0,0,[11,a(cV),[2,0,[11,a(cN),0]]]]],a(\"Converting this formula to conjunctive normal form yields the following new formula (of %d variable%s):\")],fA=a(cD),fC=a(cL),fB=[0,[11,a(\"Something is wrong. Consider this formula (of \"),[4,0,0,0,[11,a(cV),[2,0,[11,a(cN),0]]]]],a(\"Something is wrong. Consider this formula (of %d variable%s):\")],fy=[0,0,0],fz=[0,a(\"This formula can also be displayed as follows:\")],fp=[0,a(T)],fq=[0,a(C)],fr=[0,a(ar)],fs=a(\"valid\"),ft=[0,a(T)],fu=[0,a(C)],fv=[0,a(ar)],fw=a(\"satisfiable\"),fx=a(\"Question 3\"),fk=[0,a(T)],fl=[0,a(C)],fm=[0,a(cE)],fn=a(\"eval\"),fo=a(\"Question 2\"),e5=[0,[0,a(\"The smart constructors seem correct.\")],0],e6=[0,1],e7=a(bp),e8=[0,a(C)],e9=[0,a(bp)],e_=a(cX),e$=[0,a(C)],fa=[0,a(C)],fb=a(cJ),fc=[0,a(C)],fd=[0,a(C)],fe=[0,a(C)],ff=[0,a(T)],fg=a(cG),fh=[0,a(C)],fi=[0,a(T)],fj=a(\"Question 1\"),e1=a(\"Array.get\"),en=a(\"Some\"),eo=a(\"None\"),ei=a(cC),ej=a(cF),ee=[0,[12,39,[2,0,[12,39,0]]],a(\"'%s'\")],d$=[0,[12,40,[2,0,[12,41,0]]],a(\"(%s)\")],d5=a(\"max_int\"),d6=a(\"-max_int\"),d7=[0,[4,0,0,0,0],a(\"%d\")],d1=[0,[12,34,[2,0,[12,34,0]]],a('\"%s\"')],dW=[0,a(\"The following expression:\")],dV=[0,[0,a(cH)],[0,0,0]],dS=[0,a(\"This is invalid. Producing the following result is valid:\")],dT=[0,a(\"This is invalid. Raising the following exception is valid:\")],dQ=[0,a(\"produces the following result:\")],dR=[0,a(\"raises the following exception:\")],dO=[0,[0,a(\"seems correct.\")],0],dP=[0,1],dL=[0,[0,a(cH)],0],dM=[0,[0,a(\"is correct.\")],0],dN=[0,1],dI=[0,a(s),757,24],dG=[0,[0,a(\"Not yet implemented.\")],0],dH=[0,a(\"The following exception is raised and never caught:\")],dt=a(\"Can't sample over more than 2^30 elements.\"),dp=[0,a(s),432,4],di=a(\"in\"),dj=a(\" =\"),dk=a(\"let \"),dg=[0,a(s),368,2],df=a(\"|>\"),dc=a(\"|]\"),dd=a(\"[| \"),da=a(\"]\"),db=a(\"[\"),c_=a(\")\"),c$=a(\"(\"),c4=[0,a(s),201,2],c3=[0,a(s),146,2],c7=a(\",\"),c9=a(\";\"),dl=a(\"Test.SymSeq.OutOfBounds\"),dE=a(\"Test.Fail\"),dU=[0,[0,a(\"Something is wrong.\")],0],d2=a(\"string\"),d3=a(\"learnocaml_autoregister_string_D2C37B\"),d4=a(t),d8=a(ar),d9=a(\"learnocaml_autoregister_int_1872EC\"),d_=a(t),ea=a(\"atomic_int\"),eb=a(\"learnocaml_autoregister_atomic_int_05296D\"),ec=a(t),ef=a(\"char\"),eg=a(\"learnocaml_autoregister_char_FFB3FD\"),eh=a(t),ek=a(T),el=a(\"learnocaml_autoregister_bool_58C514\"),em=a(t),ep=a(\"option\"),eq=a(\"learnocaml_autoregister_option_5F1023\"),er=a(t),es=a(\"array\"),et=a(\"learnocaml_autoregister_array_7AFD23\"),eu=a(t),ev=a(bq),ew=a(\"learnocaml_autoregister_list_9B8556\"),ex=a(t),ey=a(\"list_int\"),ez=a(\"learnocaml_autoregister_list_int_42BB52\"),eA=a(t),eC=a(\"pair\"),eD=a(\"learnocaml_autoregister_pair_CCABEA\"),eE=a(t),eF=[0,0,[0,1,0]],eK=a(\"tree\"),eL=a(\"learnocaml_autoregister_tree_DD682E\"),eM=a(t),eR=a(C),eS=a(\"learnocaml_autoregister_formula_4BCC67\"),eT=a(t),e2=a(cE),e3=a(\"learnocaml_autoregister_env_4438D8\"),e4=a(t),gz=a(\"ad_hoc_exception\"),gA=a(\"learnocaml_autoregister_ad_hoc_exception_5A61C5\"),gB=a(t),ed=m.Stdlib__char,c0=m.CamlinternalLazy,gi=m.Stdlib__set,cZ=g[17];function\nV(a){var\nb=n.caml_obj_tag(a);return 250===b?a[1]:aS===b?c(c0[2],a):a}c(aT[1],0);function\nbr(a){var\nb=a[1];a[1]=b+1|0;return b}function\nbs(d,c){var\nb=d,a=c;for(;;){if(0!==b&&a){var\nb=b-1|0,a=a[2];continue}return a}}function\nc1(b,a){return a?c(b,a[1]):a}function\nbt(b,a){var\nd=a?[0,c(b,a[1])]:a;return d}var\nW=i[19];function\naU(b,a){if(b!==W&&a!==W)return b+a|0;return W}function\nc2(b,a){return b<=a?1:0}function\nag(c){var\na=c;for(;;){if(typeof\na===\"number\")return 0===a?0:W;else\nswitch(a[0]){case\n0:var\nb=a[4];break;case\n1:var\nb=a[1];break;case\n2:var\na=a[1];continue;default:return a[1]}return b}}var\nas=0;function\nbu(d,c,a,b){return 0===a?as:[0,d,c,a,b]}function\naV(a,b){return bu(a,0,cz(a),b)}function\nbv(d){var\nb=0,a=0;for(;;){if(cz(d)<=a)return b;var\nc=n.caml_string_unsafe_get(d,a),e=cS<=c?224<=c?240<=c?4:3:2:1,b=b+1|0,a=a+e|0;continue}}function\nj(a){return aV(a,bv(a))}function\nbw(a){return b(w[10],j,a)}function\naW(a){if(10===a)throw[0,x,c3];return aV(b(at[1],1,a),1)}var\nau=aW(32),bx=aW(59),aX=1;function\nby(a){return 0===a?as:1===a?au:[1,a]}function\nbz(a,d){var\nc=0;if(typeof\na!==\"number\"&&2===a[0]){var\nb=a[1];c=1}if(!c)var\nb=a;return[2,b,d]}function\nav(a){return bz(by(a),aX)}var\nbA=av(0),bB=av(1);function\ny(a){return 0===a?bA:1===a?bB:av(a)}function\nh(b,a){if(typeof\nb===\"number\"&&!b)return a;if(typeof\na===\"number\"&&!a)return b;var\nc=ag(a);return[3,aU(ag(b),c),b,a]}function\naY(b,a){if(0<=b)return[4,ag(a),b,a];throw[0,x,c4]}function\nF(a){var\nb=ag(a);return b===W?a:[5,b,a]}var\naZ=b(at[1],80,32),bC=80;function\na0(b,c){var\na=c;for(;;){if(0<a){if(a<=80)return r(u[16],b,aZ,0,a);r(u[16],b,aZ,0,bC);var\na=a-80|0;continue}return 0}}function\nbD(c,j,i,h){var\ne=j,d=i,a=h;for(;;)if(typeof\na===\"number\"){if(0===a)return 0;if(d)throw[0,x,c5];b(u[10],c[3],10);a0(c[3],e);c[2]=e;return 0}else\nswitch(a[0]){case\n0:r(u[16],c[3],a[1],a[2],a[3]);c[2]=c[2]+a[4]|0;return 0;case\n1:var\nf=a[1];a0(c[3],f);c[2]=c[2]+f|0;return 0;case\n2:var\nk=d?a[1]:a[2],a=k;continue;case\n3:bD(c,e,d,a[2]);var\na=a[3];continue;case\n4:var\ne=e+a[2]|0,a=a[3];continue;default:if(d)var\ng=d;else\nvar\nl=c[1],g=aU(c[2],a[1])<=l?1:0;var\nd=g,a=a[2];continue}}function\na1(e,a){if(a)var\nf=a[2],h=function(a){return[0,e,[0,a,0]]},i=b(g[19],h,f),j=c(g[14],i),d=[0,a[1],j];else\nvar\nd=a;return d}function\nah(a){return l(g[26],h,a,as)}var\nc6=y(1),bE=h(j(c7),c6);function\nbF(a){return ah(a1(bE,a))}var\nc8=y(1),bG=h(j(c9),c8);function\nbH(a){return ah(a1(bG,a))}function\naw(a){var\nb=y(0);return h(aY(2,h(y(0),a)),b)}function\nX(a){var\nb=j(c_),c=h(aw(a),b);return h(j(c$),c)}function\nbI(a){var\nb=j(da),c=h(aw(a),b);return h(j(db),c)}function\nbJ(a){var\nb=j(dc),c=h(aw(a),b);return h(j(dd),c)}function\na2(a){return F(X(bF(a)))}function\nbK(a){return F(bI(bH(a)))}function\nY(b,a){if(a){var\nc=h(au,a2(a));return h(j(b),c)}return j(b)}function\nbL(a){if(a)var\nd=a[2],e=b(U,function(a){return h(F(y(1)),a)},d),c=[0,a[1],e];else\nvar\nc=a;return c}function\nbM(a){return F(ah(bL(a)))}function\nD(b,a){return bM([0,j(b),a])}function\nbN(b,a){return X(D(b,a))}function\nde(d,a){if(0<c(g[1],a)){var\nb=c(g[9],a),e=c(g[6],b),f=c(g[9],e),i=c(g[5],b),k=h(au,D(d,f)),l=h(j(df),k);return F(h(i,h(y(1),l)))}throw[0,x,dg]}function\ndh(d,c,a){var\ne=h(aX,a),f=j(di),g=h(y(1),f),k=h(aY(2,h(y(1),c)),g),l=b(i[28],d,dj);return h(F(h(j(b(i[28],dk,l)),k)),e)}function\nK(d,b){var\ne=F(c(d,b)),a=c(u[1],512);bD([0,70,0,a],0,0,e);return c(u[2],a)}var\nax=[cR,dl,cA(0)];function\nz(a){if(typeof\na===\"number\")return 0;else\nswitch(a[0]){case\n0:return 1;case\n1:return a[2]-a[1]|0;default:return a[1]}}function\nZ(a){return 0===z(a)?1:0}var\nai=0;function\ndm(a){return[0,a]}function\ndn(b,a){return b<a?[1,b,a]:ai}function\na3(a){if(0<=a)return a;throw[0,x,dp]}function\nbO(b,a){if(Z(b))return a;if(Z(a))return b;var\nc=z(a);return[2,a3(z(b)+c|0),b,a]}function\nbP(a){return l(g[25],bO,ai,a)}function\ndq(c,a){return bP(b(g[19],a,c))}function\ndr(b,a){if(!Z(b)&&!Z(a)){var\nc=z(a);return[3,a3(n.caml_mul(z(b),c)),b,a]}return ai}function\nds(b,a){return Z(a)?ai:[4,z(a),b,a]}function\naj(i,h){var\na=i,b=h;for(;;)if(typeof\na===\"number\")throw ax;else\nswitch(a[0]){case\n0:if(0===b)return a[1];throw ax;case\n1:var\ne=a[1];if(0<=b&&(e+b|0)<a[2])return e+b|0;throw ax;case\n2:var\nf=a[2],g=z(f);if(b<g){var\na=f;continue}var\na=a[3],b=b-g|0;continue;case\n3:var\nd=a[3],j=n.caml_mod(b,z(d)),k=n.caml_div(b,z(d)),l=aj(d,j);return[0,aj(a[2],k),l];default:var\nm=aj(a[3],b);return c(a[2],m)}}function\nay(h,g){var\na=h,b=g;for(;;)if(typeof\na===\"number\")return 0;else\nswitch(a[0]){case\n0:return c(b,a[1]);case\n1:var\ne=a[1],f=a[2]-1|0;if(!(f<e)){var\nd=e;for(;;){c(b,d);var\ni=d+1|0;if(f!==d){var\nd=i;continue}break}}return 0;case\n2:ay(a[2],b);var\na=a[3];continue;case\n3:var\nj=a[3],k=function(d,b){return function(a){return ay(b,function(b){return c(d,[0,a,b])})}}(b,j),a=a[2],b=k;continue;default:var\nl=a[2],m=function(b,d){return function(a){return c(b,c(d,a))}}(b,l),a=a[3],b=m;continue}}function\nbQ(b){var\na=[0,0];ay(b,function(b){a[1]=[0,b,a[1]];return 0});return c(g[9],a[1])}function\nbR(a){return a<1073741824?c(aT[5],a):c(i[2],dt)}var\no=[0,ax,z,Z,ai,dm,dn,a3,bO,bP,dq,dr,ds,aj,ay,bQ,bR,function(b,a){if(z(a)<=b)return bQ(a);var\nd=0,h=1;if(b<1)var\ne=d;else{var\nc=h,f=d;for(;;){var\ng=[0,aj(a,bR(z(a))),f],i=c+1|0;if(b!==c){var\nc=i,f=g;continue}var\ne=g;break}}return e}];function\n_(g){var\nd=b($[1],0,cS);function\ne(c){try{var\na=b($[6],d,c);return a}catch(a){a=aP(a);if(a===i[8]){var\nf=b(g,e,c);l($[5],d,c,f);return f}throw a}}return e}function\naz(d,b,a){return c(d,[0,b,a])}function\na4(c,a){return b(c,a[1],a[2])}function\na5(a){var\nb=_(function(b){var\nd=c(a,function(a,c){return az(b,a,c)});return function(a){return a4(d,a)}});return function(a,c){return az(b,a,c)}}function\nbS(g){var\ne=b($[1],0,32);return function(d){try{var\na=b($[6],e,d);return a}catch(a){a=aP(a);if(a===i[8]){var\nf=c(g,d);l($[5],e,d,f);return f}throw a}}}function\ndu(a){var\nb=bS(function(b){return a4(a,b)});return function(a,c){return az(b,a,c)}}function\na6(a){return o[4]}function\nbT(b,a){return 0===a?b:o[4]}function\nak(b,a){return 0===a?c(o[5],b):o[4]}function\ndv(c,a){var\nd=b(o[6],c,a);return function(a){return bT(d,a)}}function\nbU(b,a){return 0===a?o[4]:c(b,a-1|0)}function\nal(e,d,a){var\nf=c(d,a),g=c(e,a);return b(o[8],g,f)}function\ndw(d,c,a){function\ne(d){return b(c,d,a)}return b(o[10],d,e)}function\naA(a,b){var\nc=a<=b?1:0,d=c?[0,a,aA(a+1|0,b)]:c;return d}function\naB(f,e,a){var\nd=aA(0,a);function\nh(d){var\ng=c(e,a-d|0),h=c(f,d);return b(o[11],h,g)}var\ni=b(g[19],h,d);return c(o[9],i)}function\nbV(f,e,d){if(0===(d%2|0)){var\ng=d/2|0,h=c(e,g),i=c(f,g);return b(o[11],i,h)}var\na=d/2|0,j=c(e,a),k=c(f,a+1|0),l=b(o[11],k,j),m=c(e,a+1|0),n=c(f,a),p=b(o[11],n,m);return b(o[8],p,l)}function\na7(e,d,a){var\nf=c(d,a);return b(o[12],e,f)}function\ndx(a){var\nc=b(g[19],ak,a);return l(g[25],al,a6,c)}var\ndy=1;function\ndz(a){return ak(dy,a)}var\ndA=0;function\ndB(a){return ak(dA,a)}function\ndC(a){return al(dB,dz,a)}function\nbW(a){function\nb(a){return[0,a[1],a[2]]}return _(function(c){function\nd(b){return aB(a,c,b)}function\ne(a){return a7(b,d,a)}function\nf(a){return bU(e,a)}var\ng=0;function\nh(a){return ak(g,a)}return function(a){return al(h,f,a)}})}function\ndD(a){function\nb(a){return[0,a[1],a[2]]}var\nc=bW(a);function\nd(b){return aB(a,c,b)}return function(a){return a7(b,d,a)}}var\nd=[0,a6,a6,bT,ak,dv,bU,al,al,dw,aA,aB,aB,bV,bV,a7,dx,dC,bW,dD,function(e,d,a){var\nf=aA(0,d);function\nh(d){var\nf=c(a,d);return b(o[17],e,f)}var\ni=b(g[19],h,f);return c(g[14],i)}],a8=[cR,dE,cA(0)];function\nG(b,a){return[0,[0,[0,[0,b],0],a],0]}function\nA(a){throw[0,a8,[0,[2,a,0],0]]}function\ndF(a){function\nc(a){return A([0,[0,a],0])}return b(w[10],c,a)}function\nE(a){try{var\ne=b(k[80],0,a);return e}catch(a){a=aP(a);if(a[1]===a8)return a[2];if(a===p[1])return[0,[2,dG,0],0];var\nd=[0,[2,c(L[6],0)],0];return[0,[2,[0,dH,[0,0,[0,[2,c(L[1],a)],d]]],0],0]}}function\nbX(a){if(typeof\na===\"number\"){if(0===a)return 0}else\nif(1===a[0])throw[0,bY,dI];return 1}function\na9(a){return b(g[32],bZ,a)}function\nbZ(a){switch(a[0]){case\n0:return a9(a[2]);case\n1:throw[0,bY,dJ];default:return bX(a[2])}}function\nH(a,d){if(a9(a)){var\ne=c(d,0);return b(i[37],a,e)}return a}function\nI(d,c,a){var\ne=b(k[100],d,c);return b(k[104],e,a)}function\ndK(a,e,d,c){return I(e,a,function(e){return E(function(f){if(1-b(c,e,d))A([0,[1,a],dL]);return[0,[2,[0,[1,a],dM],dN],0]})})}function\nM(a){return[0,[2,[0,[1,a],dO],dP],0]}function\nb0(d,c,a){if(0===c[0]){if(0===a[0])return b(d,c[1],a[1])}else\nif(1===a[0])return S(c[1],a[1]);return 0}function\nb1(b,a){return 0===a[0]?[0,dQ,[0,[2,c(b,a[1])],0]]:[0,dR,[0,[2,c(L[1],a[1])],0]]}function\nb2(b,a){return 0===a[0]?[0,dS,[0,[2,c(b,a[1])],0]]:[0,dT,[0,[2,c(L[1],a[1])],0]]}function\naC(a){return[0,[1,a],dV]}function\nam(k,e,j,h,g,a,d){if(S(a,[1,p[1]]))throw p[1];var\nf=1-b0(k,a,d);if(f){var\nl=b2(e,d),m=[0,0,b1(e,a)],n=[0,dW,[0,0,[0,[1,c(h,g)],m]]],o=b(i[37],n,l);return A(b(i[37],j,o))}return f}function\ndX(a,j,i,h,f,e,d){return I(j,a,function(j){return E(function(n){var\nl=V(d);function\nm(b){function\nd(a){return c(j,b)}var\ng=c(k[82],d);function\nl(a){return c(i,b)}var\nm=c(k[82],l);function\nn(d){return D(a,[0,c(h,b),0])}var\no=0;function\np(a){return K(n,a)}return am(e,f,aC(a),p,o,g,m)}b(g[17],m,l);return M(a)})})}function\nan(a,e,m,l,j,i,h,d){return I(e,a,function(n){return E(function(o){var\ne=V(d);function\nf(f){var\nd=f[2],e=f[1];function\ng(a){return b(n,e,d)}var\no=c(k[82],g);function\np(a){return b(m,e,d)}var\nq=c(k[82],p);function\nr(f){var\nb=[0,c(j,d),0];return D(a,[0,c(l,e),b])}var\ns=0;function\nt(a){return K(r,a)}return am(h,i,aC(a),t,s,o,q)}b(g[17],f,e);return M(a)})})}function\ndY(a,e,o,n,m,j,i,h,d){return I(e,a,function(p){return E(function(f){function\ne(b){var\nd=b[3],e=b[2],f=b[1];function\ng(a){return l(p,f,e,d)}var\nq=c(k[82],g);function\nr(a){return l(o,f,e,d)}var\ns=c(k[82],r);function\nt(h){var\nb=[0,c(j,d),0],g=[0,c(m,e),b];return D(a,[0,c(n,f),g])}var\nu=0;function\nv(a){return K(t,a)}return am(h,i,aC(a),v,u,q,s)}b(g[17],e,d);return M(a)})})}function\naa(d,a){var\ne=b(g[19],d,a);return c(g[14],e)}function\na_(a,c,b){return a<c?[0,a,a_(a+1|0,c,b)]:b}function\nJ(b,a){return a_(b,a,0)}function\na$(b,a){return aa(function(b){return aa(function(a){return[0,[0,b,a],0]},a)},b)}function\ndZ(a,d){var\nc=J(0,a+1|0);return aa(function(c){return b(d,c,a-c|0)},c)}function\nd0(b,a){return aa(b,J(0,a+1|0))}function\nb3(a){var\nd=c(at[14],a);return b(w[4],d1,d)}function\nba(a){return j(b3(a))}r(v[1],d4,d3,d2,ba);function\naD(a){return a===i[19]?d5:a===(-i[19]|0)?d6:b(w[4],d7,a)}function\nN(a){return j(aD(a))}r(v[1],d_,d9,d8,N);function\nb4(a){if(0<=a)return aD(a);var\nc=aD(a);return b(w[4],d$,c)}function\nbb(a){return j(b4(a))}r(v[1],ec,eb,ea,bb);function\nb5(a){var\nd=c(ed[2],a);return b(w[4],ee,d)}function\nbc(a){return j(b5(a))}r(v[1],eh,eg,ef,bc);function\nab(a){return a?ei:ej}function\nO(a){return j(ab(a))}r(v[1],em,el,ek,O);function\nbd(b,a){return a?Y(en,[0,c(b,a[1]),0]):j(eo)}r(v[1],er,eq,ep,bd);function\naE(d,a){function\ne(a){var\nb=h(bx,y(1));return h(c(d,a),b)}var\nf=b(aF[15],e,a);return F(bJ(ah(c(aF[11],f))))}r(v[1],eu,et,es,aE);function\naG(c,a){return bK(b(U,c,a))}r(v[1],ex,ew,ev,aG);function\nac(a){return aG(N,a)}r(v[1],eA,ez,ey,ac);function\neB(a){return K(ac,a)}function\nbe(d,b,a){var\ne=[0,c(b,a[2]),0];return a2([0,c(d,a[1]),e])}r(v[1],eE,eD,eC,be);var\nR=c(d[16],eF);function\nb6(e){function\nf(a){return[0,a]}function\ng(a){var\nb=a[2];return[1,a[1],b[1],b[2]]}function\nh(a){return[2,a]}function\ni(a){return[3,a]}return _(function(a){var\nj=b(d[15],h,a),k=b(d[12],a,a),l=b(d[12],R,k),m=b(d[15],g,l),n=b(d[8],m,j),o=c(d[6],n),p=J(0,e),q=c(d[16],p),r=b(d[15],i,q),s=b(d[15],f,R),t=b(d[8],s,r);return b(d[8],t,o)})}function\nbf(e){function\ng(a){var\nb=a[2];return l(f[6],a[1],b[1],b[2])}var\na=_(function(a){var\nh=b(d[15],f[5],a),i=b(d[12],a,a),j=b(d[12],R,i),k=b(d[15],g,j),l=b(d[8],k,h),m=c(d[6],l),n=J(0,e),o=c(d[16],n),p=b(d[15],f[1],o);return b(d[8],p,m)}),h=b(d[15],f[4],R);return b(d[8],h,a)}function\nb7(e){var\ng=J(0,e),h=c(d[16],g),a=b(d[15],f[1],h);function\ni(a){var\nb=a[2];return l(f[6],a[1],b[1],b[2])}var\nj=_(function(e){var\ng=b(d[15],f[5],e),h=b(d[12],a,e),j=b(d[12],R,h),k=b(d[15],i,j),l=b(d[8],k,g),m=c(d[6],l);return b(d[8],a,m)}),k=b(d[15],f[4],R);return b(d[8],k,j)}function\nbg(b){function\nd(a){switch(a[0]){case\n0:return c(b[1],a[1]);case\n1:var\ne=d(a[3]),f=d(a[2]);return l(b[2],a[1],f,e);case\n2:var\ng=d(a[1]);return c(b[3],g);default:return c(b[4],a[1])}}return[0,d]}function\naH(a){return X(ao(a))}function\nao(a){switch(a[0]){case\n0:return D(eG,[0,O(a[1]),0]);case\n1:var\nb=[0,aH(a[3]),0],c=[0,aH(a[2]),b];return D(eH,[0,O(a[1]),c]);case\n2:return D(eI,[0,aH(a[1]),0]);default:return D(eJ,[0,N(a[1]),0])}}r(v[1],eM,eL,eK,ao);function\nb8(a){return K(ao,a)}function\nP(a){switch(a[0]){case\n0:return Y(eN,[0,O(a[1]),0]);case\n1:var\nb=[0,P(a[3]),0],c=[0,P(a[2]),b];return Y(eO,[0,O(a[1]),c]);case\n2:return Y(eP,[0,P(a[1]),0]);default:return Y(eQ,[0,N(a[1]),0])}}r(v[1],eT,eS,eR,P);function\naI(a){return X(P(a))}function\nbh(a){return K(P,a)}function\nbi(a){return 1===a[0]?a[1]?aJ(a):aK(a):ap(a)}function\naK(a){if(1===a[0]&&!a[1]){var\nb=aK(a[3]),c=h(y(1),b),d=h(j(eZ),c);return h(aK(a[2]),d)}return ap(a)}function\naJ(a){if(1===a[0]&&a[1]){var\nb=aJ(a[3]),c=h(y(1),b),d=h(j(eY),c);return h(aJ(a[2]),d)}return ap(a)}function\nap(a){switch(a[0]){case\n0:var\nb=a[1]?eU:eV;return j(b);case\n1:return X(bi(a));case\n2:var\nd=ap(a[1]);return h(j(eW),d);default:var\ne=a[1];return c(bw(eX),e)}}function\nb9(a){return K(bi,a)}function\nb_(c,a){return b(aF[2],c,a)}function\ne0(b){return function(a){return cB(b,a)[1+a]}}function\naL(b,a){return bN(e1,[0,aE(O,b_(b,a)),0])}r(v[1],e4,e3,e2,aL);function\nb$(a){var\nb=J(0,a);return c(d[16],b)}function\nca(a){var\nc=d[17],e=b$(a);return b(d[12],e,c)}function\ncb(a){var\nb=ca(a);return c(d[18],b)}function\ncc(a){var\nb=cb(a);return c(d[18],b)}function\ncd(a){var\nb=a[1];return a[2]?c(f[1],b):[2,c(f[1],b)]}function\nce(a){var\nc=f[2];function\nd(c,a){var\nd=cd(a);return b(f[8],c,d)}return l(g[25],d,c,a)}function\ncf(a){var\nc=f[3];function\nd(c,a){var\nd=ce(a);return b(f[7],c,d)}return l(g[25],d,c,a)}var\ncg=[0,b$,ca,cb,cc,cd,ce,cf,function(a){var\nc=cc(a);return b(d[15],cf,c)}];function\nch(h){function\na(a){function\nh(h){function\ni(i){function\nj(e){var\nj=bg([0,a,h,i,e]),m=bg([0,f[4],f[6],f[5],f[1]]),n=b6(1),o=l(d[20],300,3,n);return E(function(d){function\na(a){function\nb(b){return c(j[1],a)}var\nd=c(k[82],b);function\ne(b){return c(m[1],a)}return am(S,bh,dU,b8,a,d,c(k[82],e))}b(g[17],a,o);return[0,[2,e5,e6],0]})}return I(c(B[2],[0,[1,0,[0,[3,[0,e9,e[1][1]],0],e[1][1],0,0],[0,[3,[0,e8,e[1][1]],0],e[1][1],0,0]],e[1][1],0,0]),e7,j)}return I(c(B[2],[0,[1,0,[0,[3,[0,fa,e[1][1]],0],e[1][1],0,0],[0,[3,[0,e$,e[1][1]],0],e[1][1],0,0]],e[1][1],0,0]),e_,i)}return I(c(B[2],[0,[1,0,[0,[3,[0,ff,e[1][1]],0],e[1][1],0,0],[0,[1,0,[0,[3,[0,fe,e[1][1]],0],e[1][1],0,0],[0,[1,0,[0,[3,[0,fd,e[1][1]],0],e[1][1],0,0],[0,[3,[0,fc,e[1][1]],0],e[1][1],0,0]],e[1][1],0,0]],e[1][1],0,0]],e[1][1],0,0]),fb,h)}return G(fj,I(c(B[2],[0,[1,0,[0,[3,[0,fi,e[1][1]],0],e[1][1],0,0],[0,[3,[0,fh,e[1][1]],0],e[1][1],0,0]],e[1][1],0,0]),fg,a))}function\nci(j){var\na=1,b=[aS,function(g){var\nb=bf(a),c=l(d[20],50,5,b),e=0,f=[0,function(a){return 1},e];return a$([0,function(a){return 0},f],c)}];function\ng(b,a){return b===a?1:0}function\nh(b){return aL(a,b)}var\ni=f[9];return G(fo,an(fn,c(B[2],[0,[1,0,[0,[3,[0,fm,e[1][1]],0],e[1][1],0,0],[0,[1,0,[0,[3,[0,fl,e[1][1]],0],e[1][1],0,0],[0,[3,[0,fk,e[1][1]],0],e[1][1],0,0]],e[1][1],0,0]],e[1][1],0,0]),i,h,aI,ab,g,b))}function\naq(a,c){return[aS,function(f){var\ne=J(0,a+1|0);return aa(function(a){var\ne=b7(a),f=bf(a),g=b(d[8],f,e),h=l(d[20],50,c,g);return b(U,function(b){return[0,a,b]},h)},e)}]}function\ncj(m){var\na=aq(2,4);function\nd(b,a){return b===a?1:0}var\ng=f[12],h=an(fs,c(B[2],[0,[1,0,[0,[3,[0,fr,e[1][1]],0],e[1][1],0,0],[0,[1,0,[0,[3,[0,fq,e[1][1]],0],e[1][1],0,0],[0,[3,[0,fp,e[1][1]],0],e[1][1],0,0]],e[1][1],0,0]],e[1][1],0,0]),g,N,aI,ab,d,a);function\nj(b,a){return b===a?1:0}var\nk=f[11],l=an(fw,c(B[2],[0,[1,0,[0,[3,[0,fv,e[1][1]],0],e[1][1],0,0],[0,[1,0,[0,[3,[0,fu,e[1][1]],0],e[1][1],0,0],[0,[3,[0,ft,e[1][1]],0],e[1][1],0,0]],e[1][1],0,0]],e[1][1],0,0]),k,N,aI,ab,j,a);return G(fx,b(i[37],l,h))}function\nck(g){var\nh=f[2];function\ne(b,a){if(b)return c(f[1],a);var\nd=c(f[1],a);return c(f[5],d)}function\ni(d,c,a){var\ng=e(d,c);return b(f[8],g,a)}var\nd=[0,g[1]];function\nj(a){return br(d)}var\na=[0,f[3]];function\nk(c){a[1]=b(f[7],a[1],c);return 0}return[0,h,e,i,d,j,a,k,function(b){return[0,d[1],a[1]]}]}function\naM(a){var\nb=[0,0,[0,fz,[0,0,[0,[1,b9(a)],fy]]]];return[0,0,[0,[1,bh(a)],b]]}function\nad(a,b){var\nc=aM(b),d=1<a?fA:fC;return[0,[0,l(w[4],fB,a,d)],c]}function\nbj(a,b){var\nc=aM(b),d=1<a?fD:fF;return[0,[0,l(w[4],fE,a,d)],c]}function\nbk(a){return b(w[4],fG,a)}function\ncl(a){var\nc=a[1];if(a[2])return bk(c);var\nd=bk(c);return b(i[28],fH,d)}function\ncm(e,g){var\nd=c(u[1],32),f=e-1|0,h=0;if(!(f<0)){var\na=h;for(;;){var\ni=cl([0,a,c(g,a)]);b(u[14],d,i);if(a<(e-1|0))b(u[14],d,fI);var\nj=a+1|0;if(f!==a){var\na=j;continue}break}}return c(u[2],d)}function\nae(b,a){return[0,0,[0,[1,cm(b,a)],fJ]]}function\ncn(h){function\na(m){return E(function(e){var\na=V(aq(3,5));function\nd(l){var\nd=l[2],a=l[1];function\nn(e){var\nb=ck([0,a]);c(c(m[1],[0,b[1],b[3],b[5],b[7]])[1],d);return c(b[8],0)}var\ne=c(k[82],n);if(S(e,[1,p[1]]))throw p[1];if(0===e[0])var\nh=e[1];else\nvar\nq=[0,fQ,[0,[2,c(L[1],e[1])],0]],r=[0,fR,aM(d)],h=A(b(i[37],r,q));var\nj=h[2],g=h[1];function\no(e){var\nh=b(f[9],e,d),k=[0,0];function\nm(p){function\nl(b){return b<a?c(e,b):c(p,b-a|0)}var\nm=b(f[9],l,j),q=k[1],r=q||m;k[1]=r;var\nn=1-h,o=n?m:n;if(o){var\ns=[0,fK,ae(a+g|0,l)],t=b(i[37],s,0),u=[0,fM,[0,fL,ae(a,e)]],v=b(i[37],u,t),w=bj(a+g|0,j),x=b(i[37],w,v),y=ad(a,d);return A(b(i[37],y,x))}return o}b(f[10],g,m);var\nl=h?1-k[1]:h;if(l){var\nn=[0,fP,[0,fO,ae(a,e)]],o=b(i[37],n,fN),p=bj(a+g|0,j),q=b(i[37],p,o),r=ad(a,d);return A(b(i[37],r,q))}return l}return b(f[10],a,o)}b(g[17],d,a);return M(fS)})}var\nd=c(B[2],[0,[9,[0,[0,fT,e[1][1]],0]],e[1][1],[0,e[1][1],0],0]);return G(fU,b(k[58],d,a))}function\nco(g){var\na=[aS,function(a){return a$(cp,cp)}];function\nb(b,a){return b===a?1:0}var\nd=f[14];return G(f1,an(f0,c(B[2],[0,[1,0,[0,[3,[0,fZ,e[1][1]],[0,[0,[3,[0,fY,e[1][1]],0],e[1][1],0,0],0]],e[1][1],0,0],[0,[1,0,[0,[3,[0,fX,e[1][1]],[0,[0,[3,[0,fW,e[1][1]],0],e[1][1],0,0],0]],e[1][1],0,0],[0,[3,[0,fV,e[1][1]],0],e[1][1],0,0]],e[1][1],0,0]],e[1][1],0,0]),d,ac,ac,ab,b,a))}var\nbl=aR;function\nf2(a){if(typeof\na!==\"number\"&&1===a[0])return[1,[0,bl]];return a}function\nf3(a){return b(U,f2,a)}var\nf4=[0,c(a5(function(e,a){var\nf=c(e,a);function\ng(a){return[0,[1,[0,bl]],a]}var\nh=b(d[15],g,f);function\ni(f){var\ng=c(e,a-f|0);function\nh(a){return[0,[0,f],a]}return b(d[15],h,g)}var\nj=J(0,a),k=b(d[9],j,i),l=c(e,a+1|0);function\nm(a){return[0,1,a]}var\nn=b(d[15],m,l),o=c(e,a);function\np(a){return[0,0,a]}var\nq=b(d[15],p,o),r=b(d[8],q,n),s=b(d[8],r,k),t=b(d[8],s,h),u=c(d[6],t),v=c(d[4],0);return b(d[8],v,u)}),0)];function\nf5(j){return[0,function(i,s){var\nd=0,k=0,a=s;for(;;){if(a){var\ne=a[1];if(typeof\ne===\"number\"){if(0===e){var\nm=i[1];i[1]=k;var\nn=function(a){return function(b){i[1]=a;return 0}}(m);c(j[1],n);var\nk=k+1|0,a=a[2];continue}var\no=c(j[2],0),d=[0,o,d],a=a[2];continue}else{if(0===e[0]){var\nl=e[1],q=b(g[7],d,l);c(j[3],q);var\nr=a[2],d=bs(l,d),a=r;continue}var\nf=e[1],h=i[1];if(h!==aR){if(f[1]===aR)f[1]=h;else\nif(f[1]!==h)throw[0,p[3],f[1],h];var\na=a[2];continue}throw[0,x,f6]}}return a}}]}var\ncq=-1,Q=[0,bl,f3,f4,f5,cq,function(f){var\ne=c(u[1],32);function\na(a){return b(w[5],e,a)}c(a(f7),cq);var\nh=[0,0],d=[0,0];function\ni(e){if(typeof\ne===\"number\"){if(0===e){var\ni=h[1],j=h[1];b(a(f8),j,i);h[1]++;return 0}var\nk=d[1];c(a(f9),k);d[1]++;return 0}else{if(0===e[0]){var\nf=e[1];if(0<=f&&f<d[1]){var\nl=(d[1]-f|0)-1|0;c(a(f_),l);d[1]=d[1]-f|0;return 0}throw[0,x,f$]}var\ng=e[1][1];if(g!==aR)return b(a(ga),g,g);throw[0,x,gb]}}b(g[17],i,f);a(gc);return c(u[2],e)}];function\ncr(i){function\na(e){var\na=l(d[20],cU,5,Q[3][1]);return E(function(h){function\nd(g){var\na=c(Q[2],g),h=c(f[18],[0]),i=c(Q[4],h);b(i[1],[0,Q[5]],a);function\nj(g){var\nd=c(e[1],[0]),f=c(Q[4],d);return b(f[1],[0,Q[5]],a)}var\nd=c(k[82],j);if(S(d,[1,p[1]]))throw p[1];if(0===d[0])return 0;var\nl=[0,gd,[0,[2,c(L[1],d[1])],0]];return A([0,ge,[0,[1,c(Q[6],a)],l]])}b(g[17],d,a);return M(gf)})}var\nh=c(B[2],[0,[9,[0,[0,gg,e[1][1]],0]],e[1][1],[0,e[1][1],0],0]);return G(gh,b(k[58],h,a))}var\nq=c(gi[1],[0,n.caml_compare]),cs=c(a5(function(e,a){var\nf=b(d[5],0,a),g=c(e,a);function\nh(a){return[0,2,a]}var\ni=b(d[15],h,g),j=c(e,a-1|0),k=b(d[12],f,j);function\nl(a){return[0,[1,a[1]],a[2]]}var\nm=b(d[15],l,k),n=c(e,a+1|0);function\no(a){return[0,1,a]}var\np=b(d[15],o,n),q=c(e,a);function\nr(a){return[0,0,a]}var\ns=b(d[15],r,q),t=c(e,a),u=b(d[12],f,t);function\nv(a){return[0,[0,a[1]],a[2]]}var\nw=b(d[15],v,u),x=b(d[8],w,s),y=b(d[8],x,p),z=b(d[8],y,m),A=b(d[8],z,i),B=c(d[6],A),C=c(d[4],0);return b(d[8],C,B)}),0);function\nbm(d,a){try{var\ne=c(q[23],d),f=b(g[7],e,a);return f}catch(a){a=aP(a);if(a[1]===i[7])throw[0,x,gj];throw a}}function\nbn(d){var\na=0;for(;;){if(b(q[3],a,d)){var\na=a+c(aT[5],10)|0;continue}return a}}function\naf(a,c){if(c){var\nd=c[1];if(typeof\nd===\"number\")switch(d){case\n0:var\ng=af(a,c[2]);return[0,[0,bn(a),0],g];case\n1:var\ne=bn(a),h=b(q[4],e,a);return[0,[1,e],af(h,c[2])];default:return[0,0,af(a,c[2])]}else{if(0===d[0]){var\ni=af(a,c[2]);return[0,[0,bm(a,d[1]),1],i]}var\nf=bm(a,d[1]),j=b(q[6],f,a);return[0,[2,f],af(j,c[2])]}}return c}var\ngk=q[1];function\nct(a){return af(gk,a)}var\ngl=[0,cs,bm,bn,ct,b(d[15],ct,cs)];function\ngm(f){return[0,function(o){var\nd=q[1],a=o;for(;;){if(a){var\ne=a[1];if(typeof\ne===\"number\"){var\ng=c(f[4],0);if(c(q[2],d)){if(g)throw[0,p[6],g[1]]}else{if(!g)throw p[7];var\nh=g[1];if(1-b(q[3],h,d))throw[0,p[5],h]}var\na=a[2];continue}else\nswitch(e[0]){case\n0:var\ni=e[2],j=c(f[1],e[1]);if(1-(i===j?1:0))throw[0,p[4],i,j];var\na=a[2];continue;case\n1:var\nk=e[1],m=b(q[4],k,d);c(f[2],k);var\nd=m,a=a[2];continue;default:var\nl=e[1],n=b(q[6],l,d);c(f[3],l);var\nd=n,a=a[2];continue}}return a}}]}function\ncu(a){var\nd=c(q[23],a);function\ne(a){return b(w[4],gn,a)}var\nf=b(g[19],e,d);return b(at[3],go,f)}var\naN=[0,q,gl,gm,cu,function(f){var\ne=c(u[1],32);function\na(a){return b(w[5],e,a)}a(gp);var\nd=[0,q[1]];function\nh(e){if(typeof\ne===\"number\"){a(gq);if(c(q[2],d[1]))return a(gr);var\nj=cu(d[1]);return c(a(gs),j)}else\nswitch(e[0]){case\n0:var\nf=e[2],g=e[1];if(f===b(q[3],g,d[1]))return b(a(gt),f,g);throw[0,x,gu];case\n1:var\nh=e[1];c(a(gv),h);d[1]=b(q[4],h,d[1]);return 0;default:var\ni=e[1];c(a(gw),i);d[1]=b(q[6],i,d[1]);return 0}}b(g[17],h,f);a(gx);return c(u[2],e)}];function\naO(a){return a[1]===p[4]?l(w[4],gy,a[2],a[3]):c(L[1],a)}r(v[1],gB,gA,gz,aO);function\ncv(h){function\na(e){var\na=l(d[20],cU,5,aN[2][5]);return E(function(f){function\nd(b){function\nd(d){var\na=c(e[1],[0]);return c(c(aN[3],a)[1],b)}var\na=c(k[82],d);if(S(a,[1,p[1]]))throw p[1];if(0===a[0])return 0;var\nf=[0,gC,[0,[2,aO(a[1])],0]];return A([0,gD,[0,[1,c(aN[5],b)],f]])}b(g[17],d,a);return M(gE)})}var\nf=c(B[2],[0,[9,[0,[0,gF,e[1][1]],0]],e[1][1],[0,e[1][1],0],0]);return G(gG,b(k[58],f,a))}function\ncw(e,d,a){if(S(a,[1,p[1]]))throw p[1];if(0===a[0])return a[1];var\nf=[0,gH,[0,[2,c(L[1],a[1])],0]],g=ad(e,d);return A(b(i[37],g,f))}function\ncx(j){function\na(m){return E(function(z){function\na(e,a){var\nf=c(cg[8],a),g=l(d[20],1000,e,f);return b(U,function(b){return[0,a,b]},g)}var\ne=V(aq(3,7)),h=V(aq(2,5)),j=b(i[37],h,e),n=a(7,4),o=b(i[37],n,j),p=a(9,3),q=b(i[37],p,o),r=a(2,2),s=b(i[37],r,q),t=a(2,1),u=b(i[37],t,s),v=a(2,0),w=b(i[37],v,u);function\ny(e){var\nd=e[2],a=e[1];function\nn(f){var\ne=b(c(m[1],[0])[1],a,d);return bt(c(aF[2],a),e)}var\ng=cw(a,d,c(k[82],n));if(g){var\no=g[1],h=function(a){return cB(o,a)[1+a]};if(b(f[9],h,d)){if(0!==b(c(f[20],[0])[1],a,d))return 0;throw[0,x,gI]}var\np=[0,gK,ae(a,h)],q=b(i[37],p,gJ),r=ad(a,d);return A(b(i[37],r,q))}var\nj=b(c(f[20],[0])[1],a,d);if(j){var\nl=j[1];if(b(f[9],l,d)){var\ns=[0,gL,ae(a,l)],t=b(i[37],s,0),u=ad(a,d);return A(b(i[37],u,t))}throw[0,x,gM]}if(b(f[11],a,d))throw[0,x,gN];return 0}b(g[17],y,w);return M(gO)})}var\nh=c(B[2],[0,[9,[0,[0,gP,e[1][1]],0]],e[1][1],[0,e[1][1],0],0]);return G(gQ,b(k[58],h,a))}function\ncy(b){function\na(a){return 0}return H(H(H(H(H(H(H(H(ch(0),ci),cj),cn),co),cr),cv),cx),a)}var\ngR=l(k[26],0,k[109][2],cy);c(k[1],gR);n.caml_register_global(229,[0,cZ,U,V,br,bs,c1,bt,W,aU,c2,ag,as,bu,aV,bv,j,bw,aW,au,bx,aX,by,bz,av,bA,bB,y,h,aY,F,bC,aZ,a0,a1,ah,bE,bF,bG,bH,aw,X,bI,bJ,a2,bK,Y,bL,bM,D,bN,de,dh,K,o,_,az,a4,a5,bS,du,d,a8,G,A,dF,E,bX,bZ,a9,H,I,dK,M,b0,b1,b2,aC,am,dX,an,dY,aa,a_,J,a$,dZ,d0,b3,ba,ba,aD,N,N,b4,bb,bb,b5,bc,bc,ab,O,O,bd,bd,aE,aE,aG,aG,ac,ac,eB,be,be,R,b6,bf,b7,bg,ao,aH,ao,b8,P,P,aI,bh,ap,aJ,aK,bi,b9,b_,e0,aL,aL,cg,ch,ci,aq,cj,ck,aM,ad,bj,bk,cl,cm,ae,cn,co,Q,cr,aN,aO,aO,cv,cw,cx,cy],t);return gT}if(typeof\nmodule===\"object\"&&module.exports)module[\"exports\"]=dynload;\n"
      }
    },
    "max-score": 9
  },
  null
]
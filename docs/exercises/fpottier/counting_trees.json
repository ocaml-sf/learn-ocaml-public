[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Counting trees",
    "stars": 3,
    "backward_exercises": [
      "fpottier/breaking_sort"
    ]
  },
  {
    "id": "counting_trees",
    "prelude": "type tree =\n  | Leaf\n  | Node of tree * tree\n",
    "template": "(* TO DO: Define [weight] and [height]. *)\n\n(* TO DO: Define [naive_trees_of_weight]. *)\n\n(* TO DO: Define [trees_of_weights]. *)\n\n(* The function call [fix ff] creates and returns a new memoizing function [f]\n   of type [a -> b]. Its argument [ff] is itself a function, whose type is\n   [(a -> b) -> (a -> b)], and which expects to receive [f] as an argument. *)\n\n(* For example, a memoizing factorial can be defined using [fix] as\n   follows:\n\n    let fact =\n      fix (fun self ->\n        fun n ->\n          if n = 0 then 1 else n * self(n-1)\n      )\n\n   Note that the definition of [fact] does not involve [let rec]. Instead,\n   when we wish to perform a recursive call, we invoke [self], the memoizing\n   function which [fix] has constructed for us. *)\n\n(* We assume that it is permitted to use values of type [a] as keys in a hash\n   table. That is, we assume that OCaml's generic equality and hash functions\n   behave in a sensible way when applied to values of type [a]. Thus, we can\n   use the functions [create], [add], [find] provided by the module [Hashtbl]\n   in OCaml's standard library. *)\n\n(* It is now up to you to implement [fix], based on the following skeleton. *)\n\nlet fix : type a b . ((a -> b) -> (a -> b)) -> (a -> b) =\n  fun ff ->\n    let table = Hashtbl.create 128 in\n    let rec f (x : a) : b =\n      (* TO DO: complete this code. *)\n      raise TODO\n    in\n    f\n\n(* TO DO: Define [sigma]. *)\n\n(* TO DO: Define [split_weight]. *)\n\n(* TO DO: Define [trees_of_weight]. *)\n\n(* TO DO: Define [trees_of_weight_0_19]. *)\n\n(* TO DO: Define [split_wb_weight]. *)\n\n(* TO DO: Define [wb_trees_of_weight]. *)\n\n(* TO DO: Define [wb_trees_of_weight_0_19]. *)\n",
    "descr": [
      [
        "",
        "<h1 id=\"Counting-trees\">Counting trees</h1>\n\n<p>In this exercise, we write code that counts binary trees.\nThis allows us to answer questions such as:</p>\n<ul><li>How many binary trees have <strong>weight</strong> <code>w</code>?</li><li>How many binary trees have <strong>height</strong> <code>h</code>?</li><li>How many <strong>weight-balanced</strong> binary trees have weight <code>w</code>?</li><li>How many <strong>height-balanced</strong> binary trees have height <code>h</code>?</li></ul>\n\n<p>This is an opportunity to think about\n<strong>counting</strong> the inhabitants of a type,\na process that is related to\n<strong>enumerating</strong> the inhabitants of a type,\nalbeit counting is slightly simpler than enumerating.</p>\n<p>This is also an opportunity to use <strong>dynamic programming</strong>\nor <strong>memoization</strong> in order to share repeated subcomputations\nand avoid exponential time complexity.</p>\n<p>In this exercise, we focus on questions that involve weight,\nbut analogous questions involving height could be treated in\nthe same way.</p>\n<p>For simplicity, we use OCaml&#39;s built-in limited-precision integers.\nAs we compute fast-growing sequences, we are quickly in danger\nof computing incorrect results due to overflow.\nTo escape this limitation, we would have to\nuse a library such as <a href=\"https://gmplib.org/\" target=\"_blank\" rel=\"noopener noreferrer\">GNU MP</a> or <a href=\"https://opam.ocaml.org/packages/bignum/\" target=\"_blank\" rel=\"noopener noreferrer\">BigNum</a>.</p>\n<h2 id=\"Trees\">Trees</h2>\n\n<p>A binary tree is either a leaf,\nwhich carries no children,\nor a binary node,\nwhich carries two children:</p>\n<pre><code>type tree =\n  | Leaf\n  | Node of tree * tree</code></pre>\n\n<p>Here, a tree carries no data; we are interested purely in its <strong>shape</strong>,\nnot in the data that it might carry.</p>\n<h2 id=\"Weight-and-height\">Weight and height</h2>\n\n<p>The <strong>weight</strong> of a tree is the total number of its binary nodes.</p>\n<p>The <strong>height</strong> of a tree is the maximum number of binary nodes\nthat appear along a branch (that is, a path from the root to a leaf).</p>\n<p><strong>Question 1.</strong> Define a function <code>weight</code> of type <code>tree -&gt; int</code>\nwhich computes the weight of a tree.</p>\n<p><strong>Question 2.</strong> Define a function <code>height</code> of type <code>tree -&gt; int</code>\nwhich computes the height of a tree.</p>\n<h2 id=\"Counting-trees-via-a-direct-recursive-approach\">Counting trees via a direct, recursive approach</h2>\n\n<p>How many (distinct) trees of 5 nodes are there? The answer is 42.\nMore generally, if <code>w</code> is an arbitrary nonnegative integer,\nhow many trees of weight <code>w</code> are there?</p>\n<p><strong>Question 3.</strong> Define a recursive function <code>naive_trees_of_weight</code> of type\n<code>int -&gt; int</code> such that <code>naive_trees_of_weight w</code> is the number of\ntrees of weight <code>w</code>. If needed, read the hints that follow.</p>\n<p><em>Hint</em>. If a tree has positive weight <code>w</code>, then it must be of the form <code>Node\n(t1, t2)</code>, and the sizes <code>w1</code> and <code>w2</code> of its subtrees <code>t1</code> and <code>t2</code> must\nsatisfy <code>w1 + w2 + 1 = w</code>.</p>\n<p><em>Hint</em>. If there are <code>n1</code> possibles shapes for the left subtree <code>t1</code> and <code>n2</code>\npossible shapes for the right subtree <code>t2</code>, then there are <code>n1 * n2</code> possible\nshapes for the tree <code>Node (t1, t2)</code>.</p>\n<p>One problem with this recursive formulation is that it is very slow. Because\nsome subcomputations are repeated over and over again, it has exponential time\ncomplexity.</p>\n<h2 id=\"Counting-trees-by-dynamic-programming\">Counting trees by dynamic programming</h2>\n\n<p>In order to avoid repeated subcomputations,\na classic technique is <strong>dynamic programming</strong>.</p>\n<p>The idea is to decide in advance which computations will take place\nand in what order they will take place.</p>\n<p>Here, we wish to compute\nthe number of trees of weight 0,\nthe number of trees of weight 1,\nand so on,\nin this order,\nuntil we obtain the number of trees of weight <code>w</code>,\nfor some <code>w</code> of interest.\nWhile computing the number of trees of weight <code>j</code>,\nwe may need the number of trees of weight <code>i</code>,\nwhere <code>i &lt; j</code> holds. All we have to do,\nin that case, is look up this information in a table,\nsince it has been computed already.</p>\n<p><strong>Question 4.</strong> Define a nonrecursive function <code>trees_of_weights</code> of type\n<code>int -&gt; int array</code> such that <code>trees_of_weights w</code> is an array of size <code>w+1</code>\nwhose entry at index <code>w</code> is the number of trees of weight <code>w</code>.</p>\n<p>Dynamic programming is an interesting misnomer: it could instead be called\n<strong>static scheduling</strong>, since the order in which subcomputations take place is\ndecided ahead of time.</p>\n<p>It is a powerful technique, but is slightly inconvenient, as one must\nexplicitly decide the order in which computations take place and encode it\nusing one or more loops.</p>\n<p>Furthermore, in some cases, dynamic programming can perform useless work.\nIndeed, every computation in the schedule is performed exactly once. However,\nsome computations that appear in the schedule may turn out to not influence\nthe computation of the final result.</p>\n<h2 id=\"Memoization\">Memoization</h2>\n\n<p>To address the above issues, one can exploit <strong>memoization</strong>. In this\napproach, we write a recursive function, as in our initial naive approach, but\nwe arrange for the results of every call (including intermediate recursive\ncalls) to be recorded in a table. Thus, if a call is repeated, then its result\nis immediately found in the table.</p>\n<p>In this approach, each computation is performed at most once, possibly never.\nThe order in which computations take place remains implicit.</p>\n<p>Memoization can be implemented once and for all as a function <code>fix</code>. The idea\nis, instead of defining an ordinary recursive function by <code>let rec f x = e</code>,\na user can define a memoizing recursive function by <code>let f = fix (fun f x -&gt;\ne)</code>. The expression <code>e</code> is unchanged; a recursive call to <code>f</code> inside <code>e</code> is\nre-interpreted as a call to the parameter <code>f</code> of the function <code>fun f x -&gt; e</code>.</p>\n<p><strong>Question 5.</strong> Complete the definition of the function <code>fix</code>, whose skeleton\nis given to you.</p>\n<h2 id=\"Counting-trees-using-a-memoizing-recursive-function\">Counting trees using a memoizing recursive function</h2>\n\n<p>We now come back to our initial motivation, which is to answer the question:\nif <code>w</code> is an arbitrary nonnegative integer, how many trees of weight <code>w</code> are\nthere?</p>\n<p>In order to express the answer to this question in an elegant manner, let us\nfirst write two auxiliary functions, <code>sigma</code> and <code>split_weight</code>.</p>\n<p><strong>Question 6.</strong> Define a function <code>sigma</code> of type <code>int -&gt; int -&gt; (int -&gt; int)\n  -&gt; int</code> such that <code>sigma i j f</code> is the sum <code>f i + f (i+1) + ... + f j</code>. The\nsum is zero if <code>j</code> is strictly less than <code>i</code>.</p>\n<p><strong>Question 7.</strong> Define a function <code>split_weight</code> of type <code>int -&gt; (int -&gt; int\n-&gt; int) -&gt; int</code> such that <code>split_weight w f</code> is the sum of all terms of the\nform <code>f w1 w2</code>, where the weights <code>w1</code> and <code>w2</code> must obey the constraint <code>w1 + w2 = w</code>.</p>\n<p><strong>Question 8.</strong> Define a memoizing function <code>trees_of_weight</code> of type\n<code>int -&gt; int</code> such that <code>trees_of_weight w</code> is the number of\ntrees of weight <code>w</code>.</p>\n<p><strong>Question 9.</strong> Construct a list <code>trees_of_weight_0_19</code> of the values of\n<code>trees_of_weight w</code>, where <code>w</code> ranges from 0 to 19 (included).</p>\n<p><strong>Hint.</strong> First define a recursive function <code>tabulate</code> of type <code>(int -&gt; &#39;a) -&gt;\nint -&gt; int -&gt; &#39;a list</code> such that <code>tabulate f i j</code> is a list of the values <code>f\nx</code>, where <code>x</code> ranges from <code>i</code> to <code>j</code> (included).</p>\n<p>The numbers in this sequence are known as the\n<a href=\"https://oeis.org/A000108\" target=\"_blank\" rel=\"noopener noreferrer\">Catalan numbers</a>.</p>\n<h2 id=\"Counting-weight-balanced-trees\">Counting weight-balanced trees</h2>\n\n<p>The property of being <strong>weight-balanced</strong> is inductively defined as follows.\nAn empty tree <code>Leaf</code> is weight-balanced.\nA nonempty tree <code>Node(t1, t2)</code> is weight-balanced if\nits children <code>t1</code> and <code>t2</code> are weight-balanced and\ntheir weights differ by at most one.</p>\n<p><strong>Question 10.</strong> Define a function <code>split_wb_weight</code> of type <code>int -&gt; (int -&gt;\nint -&gt; int) -&gt; int</code> such that <code>split_wb_weight w f</code> is the sum of all terms of\nthe form <code>f w1 w2</code>, where <code>w1</code> and <code>w2</code> must obey the constraint <code>w1 + w2 = w</code>\nand must differ by at most one.</p>\n<p><strong>Question 11.</strong> Define a memoizing function <code>wb_trees_of_weight</code> of type <code>int\n-&gt; int</code> such that <code>wb_trees_of_weight w</code> is the number of weight-balanced\ntrees of weight <code>w</code>.</p>\n<p><strong>Question 12.</strong> Construct a list <code>wb_trees_of_weight_0_19</code> of the values of\n<code>wb_trees_of_weight w</code>, where <code>w</code> ranges from 0 to 19 (included).</p>\n<p>This is quite <a href=\"https://oeis.org/A110316\" target=\"_blank\" rel=\"noopener noreferrer\">an amazing sequence</a>, isn&#39;t it?</p>\n"
      ]
    ],
    "prepare": "x4qR7MJfC3w1YacTabc/",
    "test": "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",
    "solution": "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",
    "max-score": 12
  },
  null
]
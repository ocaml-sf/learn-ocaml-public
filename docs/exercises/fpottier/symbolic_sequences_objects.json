[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Symbolic Sequences as Objects",
    "stars": 3
  },
  {
    "id": "symbolic_sequences_objects",
    "prelude": "type 'a seq = {\n  length : int;\n  get    : int -> 'a;\n  foreach: ('a -> unit) -> unit;\n}\n\nexception OutOfBounds\n\nlet elements (foreach : ('a -> unit) -> unit) : 'a list =\n  let xs = ref [] in\n  foreach (fun x -> xs := x :: !xs);\n  List.rev !xs\n",
    "template": "(* Accessors. *)\n\n(* TO DO: Define [length]. *)\n\n(* TO DO: Define [get]. *)\n\n(* TO DO: Define [foreach]. *)\n\n(* Constructors. *)\n\n(* TO DO: Define [empty]. *)\n\n(* TO DO: Define [singleton]. *)\n\n(* TO DO: Define [sum]. *)\n\n(* TO DO: Define [product]. *)\n\n(* TO DO: Define [map]. *)\n\n",
    "descr": [
      [
        "",
        "<h1 id=\"Symbolic-Sequences-as-Objects\">Symbolic Sequences as Objects</h1>\n\n<p>In this exercise, we implement an immutable data structure\nwhich represents a <strong>sequence</strong> of elements.</p>\n<p>Unlike an ordinary <em>container</em> data structure, such as a list,\nthis data structure is <strong>symbolic</strong>: it is a <em>description</em> of a\nsequence. The elements of the sequence do not actually exist in\nmemory. It is possible to build compact descriptions of huge\nsequences.</p>\n<p>This data structure is designed so that construction is cheap:\nevery <strong>constructor</strong> function has constant time complexity.</p>\n<p>There are three <strong>destructor</strong> functions, also known as <strong>accessors</strong>. The\nfunction <code>length</code> returns the <strong>length</strong> of a sequence; it also takes constant\ntime. The <strong>random access</strong> function <code>get</code> returns the <code>i</code>-th element of a\nsequence. The <strong>iteration</strong> function <code>foreach</code> provides access to each element\nof the sequence in turn. The complexity of <code>get</code> and <code>foreach</code> is a little\nmore difficult to describe; let us say that, if a sequence is built without\nusing <code>map</code>, then the complexity of <code>get</code> is linear in the depth of the\nsequence description, and the complexity of <code>foreach</code> is linear in the length\nof the sequence plus the size of the sequence description.</p>\n<p><strong>In this exercise, we implement symbolic sequences as objects</strong>, that is,\nrecords of functions. (One could also use OCaml objects.) In a companion\nexercise, entitled &quot;Symbolic Sequences as Data&quot;, we implement them as a\ngeneralized algebraic data type (GADT). Although these two approaches give\nrise to two different ways of organizing the code, the underlying algorithm is\nthe same. In fact, the GADT-based code is the image of the object-based code\nthrough a mechanical transformation known as\n<a href='https://en.wikipedia.org/wiki/Defunctionalization'>defunctionalization</a>.</p>\n<p>In another exercise, entitled &quot;Enumerating Trees&quot;,\nwe <em>use</em> symbolic sequences.</p>\n<h2 id=\"Interface\">Interface</h2>\n\n<p>Before explaining how symbolic sequences are implemented,\nlet us first describe their interface,\nthat is,\nthe operations that they support.</p>\n<p><code>&#39;a seq</code> is the type of a sequence whose elements have type <code>&#39;a</code>.</p>\n<pre><code>  type &#39;a seq</code></pre>\n\n<h3 id=\"Constructors\">Constructors</h3>\n\n<p>There are five constructor functions:\n<code>empty</code>,\n<code>singleton</code>,\n<code>sum</code>,\n<code>product</code>,\nand <code>map</code>.</p>\n<p>The constant <code>empty</code> is the empty sequence.</p>\n<pre><code>  val empty: &#39;a seq</code></pre>\n\n<p>The sequence <code>singleton x</code> has length 1. Its single element is <code>x</code>.</p>\n<pre><code>  val singleton: &#39;a -&gt; &#39;a seq</code></pre>\n\n<p>The sequence <code>sum s1 s2</code> is the concatenation of the sequences <code>s1</code> and <code>s2</code>.</p>\n<pre><code>  val sum: &#39;a seq -&gt; &#39;a seq -&gt; &#39;a seq</code></pre>\n\n<p>The sequence <code>product s1 s2</code>, a sequence of pairs, is the Cartesian product\nof the sequences <code>s1</code> and <code>s2</code>. Its length is the product of the lengths of\n<code>s1</code> and <code>s2</code>. The first pair component is considered most significant,\nwhich means that the product of the integer sequence <code>0; 1</code> by itself is the\nsequence <code>(0, 0); (0, 1); (1, 0); (1, 1)</code>.</p>\n<pre><code>  val product: &#39;a seq -&gt; &#39;b seq -&gt; (&#39;a * &#39;b) seq</code></pre>\n\n<p>The sequence <code>map phi s</code> is the image of the sequence <code>s</code> through the function\n<code>phi</code>.</p>\n<pre><code>  val map: (&#39;a -&gt; &#39;b) -&gt; &#39;a seq -&gt; &#39;b seq</code></pre>\n\n<h3 id=\"Destructors\">Destructors</h3>\n\n<p>There are three destructors: <code>length</code>, <code>get</code>, and <code>foreach</code>.</p>\n<p><code>length s</code> returns the length of the sequence <code>s</code>.</p>\n<pre><code>  val length: &#39;a seq -&gt; int</code></pre>\n\n<p>If the index <code>i</code> is comprised between zero (included) and <code>length s</code> (excluded),\nthen <code>get s i</code> returns the <code>i</code>-th element of the sequence <code>s</code>.\nOtherwise, <code>get s i</code> raises the exception <code>OutOfBounds</code>.</p>\n<pre><code>  exception OutOfBounds\n  val get: &#39;a seq -&gt; int -&gt; &#39;a</code></pre>\n\n<p><code>foreach s k</code> iterates over all elements of the sequence <code>s</code>.\nEach element in turn is passed to the loop body <code>k</code>.\nThus, the OCaml code <code>foreach s (fun x -&gt; ...)</code> can be\ninformally understood as <code>for each x in s do ...</code>.</p>\n<pre><code>  val foreach: &#39;a seq -&gt; (&#39;a -&gt; unit) -&gt; unit</code></pre>\n\n<p><strong>Note.</strong>\nBecause sequences can be extremely long,\nOCaml&#39;s built-in type <code>int</code>, which is 63 bits wide at best,\ncan be insufficient to represent the length of a sequence.\nIn order to avoid overflows, we <em>should</em> use a type of unbounded integers,\nsuch as the type <code>Z.t</code> provided by the library\n<a href='https://github.com/ocaml/Zarith'><code>zarith</code></a>.\nHowever, for the sake of simplicity,\nin this exercise, we stick with the type <code>int</code>.</p>\n<h2 id=\"Implementation\">Implementation</h2>\n\n<p>In this exercise, we represent a sequence in memory as an OCaml record\nwith three fields: <code>length</code>, <code>get</code>, and <code>foreach</code>.</p>\n<p>Quite obviously, the <code>length</code> field holds the length of the sequence, whereas\nthe <code>get</code> and <code>foreach</code> fields contain <code>get</code> and <code>foreach</code> functions for this\nparticular sequence.</p>\n<p>This can be thought of as an <em>object</em> with three methods.\nWe could in fact use an OCaml object\ninstead of a record of functions.</p>\n<pre><code>  type &#39;a seq = {\n    length : int;\n    get    : int -&gt; &#39;a;\n    foreach: (&#39;a -&gt; unit) -&gt; unit;\n  }</code></pre>\n\n<h2 id=\"Assignment\">Assignment</h2>\n\n<p><strong>Question 1.</strong> Implement the three destructors presented above,\nin one line each.</p>\n<p><strong>Question 2.</strong> Implement the five constructor functions presented above,\nnamely\n<code>empty</code>,\n<code>singleton</code>,\n<code>sum</code>,\n<code>product</code>,\nand <code>map</code>.\nAt this stage, compute a correct value of <code>length</code>, and provide dummy <code>get</code> and\n<code>foreach</code> functions, which raise the exception <code>TODO</code> when invoked.</p>\n<p><strong>Question 3.</strong> Replace the five dummy <code>get</code> functions\nwith five correct implementations of <code>get</code>.</p>\n<p><strong>Question 4.</strong> Replace the five dummy <code>foreach</code> functions\nwith five correct implementations of <code>foreach</code>.</p>\n<p><em>Note.</em> The messages produced by the automatic grader for\nQuestion 4 may refer to the function <code>elements</code>. This\nfunction takes a <code>foreach</code> function as an argument and\nbuilds a list of the elements produced by <code>foreach</code>.\nIt is defined as follows:</p>\n<pre><code>let elements (foreach : (&#39;a -&gt; unit) -&gt; unit) : &#39;a list =\n  let xs = ref [] in\n  foreach (fun x -&gt; xs := x :: !xs);\n  List.rev !xs</code></pre>"
      ]
    ],
    "prepare": "tR9SJGPHojvFgZYn7vQR",
    "test": "",
    "solution": "0D2GwYz9lrQ51mzFr0AF7U/BTRd4VVoXL9RZFQjgbOIRc5RwVSWWDn16u0GXbbNt5WCUMnYdu40wXdQRt5GXq5NhR/E/V2ILcqR7e2ZBL+ElTqx+/2pXiyMAWJpRrnKEA2W3aZYARPzR2iPTMHwIgaCA8U0IRTbwwBZMoYeAtj/x+RL76+OjxSstPgyhxEjUPzsyAFRNGUx5X/ZZV3jy68q7QSBaYNtTN7nshP7kwHSMNI/a1/8vxrARyRH/0tObCmY4USsW69KJfXac6FQtsmcOmUbEapLgPA2X9RHUIrtVmeWet5BDdwRyE2NP1A+bdMeLFMRKVrG9B9nUndXlZSAeXIaAca+6IWY8zbjuHwQ9BB/XEVcWSnoRU/lQgML72adVPQYk//d5++iauaqbCtQljDxi1v0yeo7NW+Ijq0gCN5IC1oeKTt3mKfWECjS6YlDZCxalB4QWVR+ZDNU7ppXPjuTQU8ndlDQez59oA4ut7N2X8l2QgbMZBIz4ouFmICEDvh3nb+E9CWi1r3NAjDAETRdDFkg1PRAZXBClfJtvsAkhGn3PFiwSu+mds+155yqGO7IoxvLvXdQex7rXq6EyDB1sQtNKnuoawwdvZPJoTtZ2maU3ey9UVZBCj57EQNKUkcBPT0n11XWUGi/Tbu4NlFjBTVuehQpPp1qTi62tNl+/9KX7gT65O2mvd5XH1UFQZ6EZVVpcEFkQXqfd5Dry+mkVYNtMYy06f4Odsj8EPwQt1XnzgbdY8VzIKg4aDHICF72E69KJfVXs6AB9q8Q+/ReNtpOdIVV4jEjR1ZZOkgbm/os3tNBcOghA2U7whx0IAdcMQ3G9BAK8nhelPXN8HOKFxfipYSMbmu39QMB8Ej2MEV6XXW/WX92VbKrAOaFBIHc5jkcmKen7beSoZYViiHcuNLatxQ4IE+dkq0gCN5JRY9OUB1beL+8FQnmn3Q8AA1HuQepoSmmYQwE76EC0ju0QRlfsiDR8pUY0SPup7IRG7CEVv+RNR+PL8ukmCyISatCefOdv2nXHr+RApH6BCpNDXF6+IRBMPmukuZpef6NnETWYCiMuqKmrf3Mce8SUN7VnxaH3GwRBcyKXeVAjV69yXvpL74RagYhAAf1pHNFP5PQQcXIGQs5GjHTNEcKVtcANTenK1Wz1Ti5GbvTApU0ASVuahUlPoxaLb8lv3m7/pP3svW18HxyfvpXVYpUEG/6KUFYyEFJ+R4WtnHTgAz5HYJQR1my8uPKrsnjL1w9cLC39gqJ4zFL60tTsTDYIWE5Q65rJtTKclF/OdyELjRnEzVGdPFVG75iV2d1UzhytlBpE/qwh4x2P4AzvdN8MDhFYF0SOTUmF8sul1WUdV4GIceC6P7l6z439U2oJQUlNXklZX7oEEVpQwO7Y1aNBNQZryBxy3OS//aq8YYwp/D9tIKa8h64ZWvIj/bkM1ElDJkHFQhydO08KADmn4FCVBMGeA4RkVUeRSgFunzv0jv0QAkPn/jBmnEcjD+eu7MIJllgUfroNE+P6puFwIDgXfh38g+EbIiDjr3NWz7dEApsFUTMmJVVFFV4dqM6xr55cSEu0XnBjfrywbfxKey8RKjMlw4D9HwwZxy7XcUIuKFF7Qh6NovYfuM2IZL/0",
    "max-score": 3,
    "depend": null,
    "dependencies": []
  },
  null
]
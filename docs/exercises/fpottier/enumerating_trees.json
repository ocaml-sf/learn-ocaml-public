[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Enumerating Trees",
    "stars": 3,
    "backward_exercises": [
      "fpottier/counting_trees"
    ]
  },
  {
    "id": "enumerating_trees",
    "prelude": "type tree =\n  | Leaf\n  | Node of tree * tree\n\ntype labeled_tree =\n  | LLeaf of int\n  | LNode of labeled_tree * labeled_tree\n",
    "template": "(* Basic constructor functions. *)\n\n(* TO DO: Define [empty]. *)\n\nlet just (x : 'a) : 'a enum =\n  (* TO DO: Complete this definition. *)\n  raise TODO\n\nlet pay (enum : 'a enum) : 'a enum =\n  (* TO DO: Complete this definition. *)\n  raise TODO\n\nlet sum (enum1 : 'a enum) (enum2 : 'a enum) : 'a enum =\n  (* TO DO: Complete this definition. *)\n  raise TODO\n\nlet ( ++ ) =\n  sum\n\nlet product (enum1 : 'a enum) (enum2 : 'b enum) : ('a * 'b) enum =\n  (* TO DO: Complete this definition. *)\n  raise TODO\n\nlet ( ** ) =\n  product\n\nlet map (phi : 'a -> 'b) (enum : 'a enum) : 'b enum =\n  (* TO DO: Complete this definition. *)\n  raise TODO\n\n(* Derived constructor functions. *)\n\n(* TO DO: Define [bit]. *)\n\nlet list (elem : 'a enum) : 'a list enum =\n  (* TO DO: Complete this definition. *)\n  raise TODO\n\n(* TO DO: Define [tree]. *)\n\nlet balanced_product (enum1 : 'a enum) (enum2 : 'b enum) : ('a * 'b) enum =\n  (* TO DO: Complete this definition. *)\n  raise TODO\n\nlet ( *-* ) =\n  balanced_product\n\n(* TO DO: Define [balanced_tree]. *)\n\n(* TO DO: Define [balanced_tidy_tree]. *)\n",
    "descr": [
      [
        "",
        "<h1 id=\"Enumerating-Trees\">Enumerating Trees</h1>\n\n<p>In this exercise, we write code that can <strong>count</strong>, <strong>enumerate</strong>,\nand <strong>sample</strong> the elements of a certain data type.\nThis allows us to do things such as:</p>\n<ul><li>Count the binary trees of size <code>s</code>.</li><li>Iterate over all binary trees of size <code>s</code>.</li><li>Pick a binary tree of size <code>s</code> uniformly at random among all such trees.</li></ul>\n\n<p>We will also be interested in imposing additional invariants: for instance, we\ncan easily restrict our attention to <strong>balanced</strong> binary trees.</p>\n<p>This exercise is inspired by the paper\n<a href=\"https://www.semanticscholar.org/paper/Feat%3A-functional-enumeration-of-algebraic-types-Dureg%C3%A5rd-Jansson/46aabcca02c47095b29f934e8d7198bf4c58c27d\" target=\"_blank\" rel=\"noopener noreferrer\">Feat: functional enumeration of algebraic types</a>\nby Jonas Dureg√•rd, Patrik Jansson and Meng Wang.</p>\n<h2 id=\"Enumerations-of-Sized-Data\">Enumerations of Sized Data</h2>\n\n<p>Instead of restricting our attention to the type of trees (as in the above\nexamples), we would like to work with an arbitrary type <code>&#39;a</code> whose values are\nequipped with a notion of <strong>size</strong>. The type <code>&#39;a</code> may have an infinite number\nof values; yet, we assume that size is defined in such a way that, for every\nnatural number <code>s</code>, there is a finite subset of values of type <code>&#39;a</code> whose size\nis <code>s</code>. We would like to be able to count, enumerate, and sample this subset.</p>\n<p>With this in mind, we define an <strong>enumeration</strong> of the type <code>&#39;a</code>\nto be a function which, given a <em>nonnegative</em> size <code>s</code>,\nreturns a finite sequence of values of type <code>&#39;a</code> whose size is <code>s</code>.</p>\n<pre><code>  type &#39;a enum =\n    int -&gt; &#39;a Seq.seq</code></pre>\n\n<p>Thus, an enumeration <code>e</code> of type <code>&#39;a enum</code> represents a set of elements of\ntype <code>&#39;a</code>, grouped by size. The function call <code>e(s)</code> returns the subset of\nthe elements of size <code>s</code>.\n(This subset is represented as a sequence without duplicate elements.)\nThe function <code>e</code> is allowed to assume that its argument <code>s</code> is nonnegative;\nan enumeration must never be passed a negative size.</p>\n<p>The module <code>Seq</code>, which is given to you, implements an abstract type of\nsequences of elements. Its interface is described below.\nIts implementation is the topic of other exercises, entitled\n&quot;Symbolic Sequences as Objects&quot; and\n&quot;Symbolic Sequences as Data&quot;.</p>\n<h2 id=\"The-Seq-API\">The <code>Seq</code> API</h2>\n\n<p><code>&#39;a seq</code> is the type of a sequence whose elements have type <code>&#39;a</code>.</p>\n<pre><code>  type &#39;a seq</code></pre>\n\n<h3 id=\"Constructors\">Constructors</h3>\n\n<p>There are five constructor functions:\n<code>empty</code>,\n<code>singleton</code>,\n<code>sum</code>,\n<code>product</code>,\nand <code>map</code>.</p>\n<p>Each of these functions has <strong>constant time</strong> complexity.\nIndeed, they do not actually construct the entire sequence in memory;\nthey construct only a compact representation of it.</p>\n<p>The constant <code>empty</code> is the empty sequence.</p>\n<pre><code>  val empty: &#39;a seq</code></pre>\n\n<p>The sequence <code>singleton x</code> has length 1. Its single element is <code>x</code>.</p>\n<pre><code>  val singleton: &#39;a -&gt; &#39;a seq</code></pre>\n\n<p>The sequence <code>sum s1 s2</code> is the concatenation of the sequences <code>s1</code> and <code>s2</code>.</p>\n<pre><code>  val sum: &#39;a seq -&gt; &#39;a seq -&gt; &#39;a seq</code></pre>\n\n<p>The sequence <code>bigsum ss</code> is the concatenation of all sequences in the list\n<code>ss</code>.</p>\n<pre><code>  val bigsum: &#39;a seq list -&gt; &#39;a seq</code></pre>\n\n<p>The sequence <code>product s1 s2</code>, a sequence of pairs, is the Cartesian product\nof the sequences <code>s1</code> and <code>s2</code>. Its length is the product of the lengths of\n<code>s1</code> and <code>s2</code>. The first pair component is considered most significant,\nwhich means that the product of the integer sequence <code>0; 1</code> by itself is the\nsequence <code>(0, 0); (0, 1); (1, 0); (1, 1)</code>.</p>\n<pre><code>  val product: &#39;a seq -&gt; &#39;b seq -&gt; (&#39;a * &#39;b) seq</code></pre>\n\n<p>The sequence <code>map phi s</code> is the image of the sequence <code>s</code> through the function\n<code>phi</code>.</p>\n<pre><code>  val map: (&#39;a -&gt; &#39;b) -&gt; &#39;a seq -&gt; &#39;b seq</code></pre>\n\n<h3 id=\"Destructors\">Destructors</h3>\n\n<p>There are three destructors: <code>length</code>, <code>get</code>, and <code>foreach</code>.</p>\n<p><code>length s</code> returns the length of the sequence <code>s</code>.</p>\n<pre><code>  val length: &#39;a seq -&gt; int</code></pre>\n\n<p>If the index <code>i</code> is comprised between zero (included) and <code>length s</code> (excluded),\nthen <code>get s i</code> returns the <code>i</code>-th element of the sequence <code>s</code>.\nOtherwise, <code>get s i</code> raises the exception <code>OutOfBounds</code>.</p>\n<pre><code>  exception OutOfBounds\n  val get: &#39;a seq -&gt; int -&gt; &#39;a</code></pre>\n\n<p><code>foreach s k</code> iterates over all elements of the sequence <code>s</code>.\nEach element in turn is passed to the loop body <code>k</code>.\nThus, the OCaml code <code>foreach s (fun x -&gt; ...)</code> can be\ninformally understood as <code>for each x in s do ...</code>.</p>\n<pre><code>  val foreach: &#39;a seq -&gt; (&#39;a -&gt; unit) -&gt; unit</code></pre>\n\n<p><code>elements s</code> returns a list of all elements of the sequence <code>s</code>.\nIn principle, you don&#39;t need to use it,\nbut it can be useful for debugging.</p>\n<pre><code>  val elements: &#39;a seq -&gt; &#39;a list</code></pre>\n\n<h2 id=\"Constructing-enumerations\">Constructing enumerations</h2>\n\n<p>We begin by defining six basic functions that construct enumerations.</p>\n<p><strong>Question 1.</strong> Define a constant <code>empty</code> of type <code>&#39;a enum</code> which represents\nthe empty set.</p>\n<p><strong>Question 2.</strong> Define a function <code>just</code> of type <code>&#39;a -&gt; &#39;a enum</code> such that\n<code>just x</code> represents a singleton set, whose element is <code>x</code>, and the size of\nthis element is considered to be zero.</p>\n<p><strong>Question 3.</strong> Define a function <code>pay</code> of type <code>&#39;a enum -&gt; &#39;a enum</code> such that\nthe enumeration <code>pay e</code> represents the same set as the enumeration <code>e</code>, but\nthe size of every element is increased by one. That is, if a value <code>x</code> appears\nin <code>e</code> among the elements of size <code>s</code>, then it should appear in <code>pay e</code> among\nthe elements of size <code>s+1</code>.</p>\n<p><em>Note</em>. <code>pay</code> is so named because the elements of the enumeration <code>pay e</code> are\n<em>more expensive</em>, so to speak, than the elements of the enumeration <code>e</code>.</p>\n<p><strong>Question 4.</strong> Define a function <code>sum</code> of type <code>&#39;a enum -&gt; &#39;a enum -&gt; &#39;a\nenum</code> such that <code>sum e1 e2</code> represents the union of the sets <code>e1</code> and <code>e2</code>.\nOne can assume that the sets <code>e1</code> and <code>e2</code> are disjoint.</p>\n<p><strong>Question 5.</strong> Define a function <code>product</code> of type\n<code>&#39;a enum -&gt; &#39;b enum -&gt; (&#39;a * &#39;b) enum</code>\nsuch that <code>product e1 e2</code> represents the Cartesian product\nof the sets <code>e1</code> and <code>e2</code>.\nBy convention, the size of a pair <code>(x1, x2)</code> is the sum of the sizes\nof <code>x1</code> and <code>x2</code>.</p>\n<p><em>Hint.</em> A pair <code>(x1, x2)</code> has size <code>s</code> if and only if\n<code>x1</code> has size <code>s1</code> and <code>x2</code> has size <code>s2</code>\n<em>for some</em> integers <code>s1</code> and <code>s2</code> such that <code>s1 + s2 = s</code> holds.</p>\n<p><em>Hint.</em> Define an auxiliary function <code>up: int -&gt; int -&gt; int list</code>\nsuch that <code>up i j</code> is the list <code>[i; i+1; ...; j]</code>.\nUse the functions <code>Seq.bigsum</code>, <code>List.map</code>, and <code>Seq.product</code> so\nas to combine all of the possibilities that arise out of\nall valid choices of <code>s1</code> and <code>s2</code>.</p>\n<p><strong>Question 6.</strong> Define a function <code>map</code> of type\n<code>(&#39;a -&gt; &#39;b) -&gt; &#39;a enum -&gt; &#39;b enum</code>\nsuch that the set <code>map f e</code> is the image through <code>f</code> of the set <code>e</code>.\nBy convention, the size of the element <code>f x</code> in the enumeration <code>map f e</code>\nis the size of the element <code>x</code> in the enumeration <code>e</code>.</p>\n<h2 id=\"Enumerating-lists\">Enumerating lists</h2>\n\n<p>In the following, we use the constructor functions defined above.</p>\n<p><strong>Question 7.</strong> Define an enumeration <code>bit</code> of type <code>int enum</code>\nwhose values, <code>0</code> and <code>1</code>, are both considered to have size 0.</p>\n<p>We assume that a\n<a href=\"https://en.wikipedia.org/wiki/Memoization\" target=\"_blank\" rel=\"noopener noreferrer\">memoizing</a>\nfixed point combinator <code>fix</code> is given. Its type is\n<code>((&#39;a -&gt; &#39;b) -&gt; (&#39;a -&gt; &#39;b)) -&gt; (&#39;a -&gt; &#39;b)</code>. The idea is, instead of defining\nan ordinary recursive function by <code>let rec f x = e</code>, a user can define a\nmemoizing recursive function by <code>let f = fix (fun f x -&gt; e)</code>.\nThe implementation of <code>fix</code> uses a hash table;\nthere is an implicit assumption that\nOCaml&#39;s generic equality and hash functions\ncan be used at type <code>&#39;a</code>.\nFor more details, see the exercise &quot;Counting Trees&quot;.</p>\n<p>It is worth noting that, because an enumeration is a function,\n<code>fix</code> also has type\n<code>(&#39;a enum -&gt; &#39;a enum) -&gt; &#39;a enum</code>\nas a special case.\nThus, <code>fix</code> can be used to recursively define an enumeration.</p>\n<p><strong>Question 8.</strong> Define a function <code>list</code> of type <code>&#39;a enum -&gt; &#39;a list enum</code> such\nthat, if <code>e</code> is an enumeration of a certain set of elements, then <code>list e</code> is\nan enumeration of the lists of elements drawn from <code>e</code>. By convention, the\nsize of a list is <em>the sum of its length and of the sizes of its elements</em>.</p>\n<p><em>Hint.</em> The function <code>list</code> <em>itself</em> need not be recursive or memoized. (In\nfact, it cannot be memoized using <code>fix</code>, as its domain type <code>&#39;a enum</code> does\nnot support generic equality and hashing.) However, the value <em>returned</em> by\nthe call <code>list e</code>, which has type <code>&#39;a list enum</code>, is also a function. This\nfunction must be recursive, and, for better time and space efficiency, it\nshould be memoized.</p>\n<p><em>Hint.</em> In order to guarantee termination, every recursive call should appear\nunder a <code>pay</code> constructor. (Why is this so? Think about it.)</p>\n<p><em>Suggestion.</em> After answering these questions, go to the Toplevel pane and\nevaluate the expression <code>Seq.elements (list bit 3)</code>, which yields a list of\nall lists of bits of length 3. (Because, by convention, a bit has size 0, the\nsize of a list of bits is the length of the list.)</p>\n<h2 id=\"Enumerating-trees\">Enumerating trees</h2>\n\n<p>A binary tree is either a leaf,\nwhich carries no children,\nor a binary node,\nwhich carries two children:</p>\n<pre><code>type tree =\n  | Leaf\n  | Node of tree * tree</code></pre>\n\n<p>A tree carries no data; we are interested purely in its shape,\nnot in the data that it might carry.</p>\n<p>This definition is the same as in the exercise &quot;Counting Trees&quot;.</p>\n<p><strong>Question 9.</strong> Define an enumeration <code>tree</code> of type <code>tree enum</code> such\nthat <code>tree</code> is an enumeration of all binary trees. By convention, the\nsize of a tree is the total number of its binary nodes.</p>\n<p><em>Hint.</em> The function <code>tree</code> must be recursive. For better time and space\nefficiency, it should be memoized. In order to guarantee termination, every\nrecursive call should appear under a <code>pay</code> constructor.</p>\n<p><em>Suggestion.</em> After answering this question, go to the Toplevel pane and\nevaluate the expression <code>Seq.elements (tree 3)</code>, which yields a list of all\ntrees of size 3.</p>\n<pre><code># Seq.elements (tree 3);;\n- : tree list =\n[Node (Leaf, Node (Leaf, Node (Leaf, Leaf)));\n Node (Leaf, Node (Node (Leaf, Leaf), Leaf));\n Node (Node (Leaf, Leaf), Node (Leaf, Leaf));\n Node (Node (Leaf, Node (Leaf, Leaf)), Leaf);\n Node (Node (Node (Leaf, Leaf), Leaf), Leaf)]</code></pre>\n\n<h2 id=\"Enumerating-balanced-trees\">Enumerating balanced trees</h2>\n\n<p>The property of being weight-balanced, or <strong>balanced</strong> for short,\nis inductively defined as follows.\nAn empty tree <code>Leaf</code> is balanced.\nA nonempty tree <code>Node(t1, t2)</code> is balanced if\nits children <code>t1</code> and <code>t2</code> are balanced and\ntheir sizes differ by at most one.</p>\n<p>We would now like to construct an enumeration of the balanced\nbinary trees.</p>\n<p>To do so, we first define a variant of the <code>product</code> combinator, named\n<code>balanced_product</code>, which enumerates only balanced pairs, as opposed to all pairs.\nIt is then straightforward to enumerate the balanced trees.</p>\n<p><strong>Question 10.</strong> Define a function <code>balanced_product</code> of type\n<code>&#39;a enum -&gt; &#39;b enum -&gt; (&#39;a * &#39;b) enum</code>\nsuch that <code>balanced_product e1 e2</code> represents\nthe set of all pairs <code>(x1, x2)</code> such that\n<code>x1</code> is drawn from <code>e1</code>,\n<code>x2</code> is drawn from <code>e2</code>,\nand the sizes of <code>x1</code> and <code>x2</code> differ by at most one.\nBy convention, the size of a pair <code>(x1, x2)</code> is the sum of the sizes\nof <code>x1</code> and <code>x2</code>.</p>\n<p><em>Hint.</em> When asked to produce a sequence of pairs of size <code>s</code>,\nconsider two cases: either <code>s</code> is even, or it is odd. In each\ncase, under the constraint that the pair <code>(x1, x2)</code> is balanced and has size <code>s</code>,\nwhat are the possible sizes of <code>x1</code> and <code>x2</code>?</p>\n<p><strong>Question 11.</strong> Define an enumeration <code>balanced_tree</code> of type <code>tree enum</code>\nsuch that <code>balanced_tree</code> is an enumeration of all balanced binary trees.</p>\n<p><em>Suggestion.</em> After answering this question, go to the Toplevel pane and\ncheck that there are 4 balanced trees of size 4:</p>\n<pre><code># Seq.elements (balanced_tree 4);;\n- : tree list =\n[Node (Node (Leaf, Leaf), Node (Leaf, Node (Leaf, Leaf)));\n Node (Node (Leaf, Leaf), Node (Node (Leaf, Leaf), Leaf));\n Node (Node (Leaf, Node (Leaf, Leaf)), Node (Leaf, Leaf));\n Node (Node (Node (Leaf, Leaf), Leaf), Node (Leaf, Leaf))]</code></pre>\n\n<p>and there is only one balanced tree of size 7:</p>\n<pre><code># Seq.elements (balanced_tree 7);;\n- : tree list =\n[Node (Node (Node (Leaf, Leaf), Node (Leaf, Leaf)),\n  Node (Node (Leaf, Leaf), Node (Leaf, Leaf)))]</code></pre>\n\n<h2 id=\"Enumerating-balanced-tidy-labeled-trees\">Enumerating balanced tidy labeled trees</h2>\n\n<p>As a final twist, let us consider a slightly richer type of <strong>labeled trees</strong>,\nwhere every leaf carries an integer datum:</p>\n<pre><code>type labeled_tree =\n  | LLeaf of int\n  | LNode of labeled_tree * labeled_tree</code></pre>\n\n<p>The <strong>fringe</strong> of a labeled tree is the sequence of integers\nfound at its leaves, listed from from left to right.</p>\n<p>A labeled tree of size <code>s</code> is <strong>tidy</strong> if its fringe is the sequence\n<code>0; 1; ... ; s-1</code>.</p>\n<p><strong>Question 12.</strong> Define an enumeration <code>balanced_tidy_tree</code> of type\n<code>labeled_tree enum</code> such that <code>balanced_tidy_tree</code> is an enumeration\nof all balanced tidy labeled trees.</p>\n<p><em>Hint.</em> First write a function <code>label</code> of type <code>tree -&gt; labeled_tree</code>\nwhich converts a tree to a tidy labeled tree of the same shape. Then,\napply this transformation to the enumeration <code>balanced_tree</code> defined\nin Question 11.</p>\n<p><em>Suggestion.</em> After answering this question, go to the Toplevel pane and\nadmire the 4 balanced tidy labeled trees of size 4:</p>\n<pre><code># Seq.elements (balanced_tidy_tree 4);;\n- : labeled_tree list =\n[LNode (LNode (LLeaf 0, LLeaf 1), LNode (LLeaf 2, LNode (LLeaf 3, LLeaf 4)));\n LNode (LNode (LLeaf 0, LLeaf 1), LNode (LNode (LLeaf 2, LLeaf 3), LLeaf 4));\n LNode (LNode (LLeaf 0, LNode (LLeaf 1, LLeaf 2)), LNode (LLeaf 3, LLeaf 4));\n LNode (LNode (LNode (LLeaf 0, LLeaf 1), LLeaf 2), LNode (LLeaf 3, LLeaf 4))]</code></pre>"
      ]
    ],
    "prepare": "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",
    "test": "",
    "solution": "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",
    "max-score": 12
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Parser Combinators",
    "stars": 3,
    "backward_exercises": [
      "fpottier/nondet_monad_seq"
    ]
  },
  {
    "id": "parser_combinators",
    "prelude_ml": "",
    "template": "(* The type [parser] satisfies the monad API: [return], [>>=]. *)\n\n(* [return a] always succeeds, consumes no input, and returns [a]. *)\n\nlet return (a : 'a) : 'a parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* [p >>= f] is the sequential composition of the parsers [p] and [f]. *)\n\nlet (>>=) (p : 'a parser) (f : 'a -> 'b parser) : 'b parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The type [parser] supports the nondeterminism monad API: [fail], [choose],\n   [at_most_once]. *)\n\n(* The parser [fail] accepts the empty language: it always fails. *)\n\nlet fail : 'a parser =\n  fun cursor ->\n    (* TO DO: Define this function. *)\n    raise TODO\n\n(* The parser [choose p q] accepts the union of the languages accepted\n   by the parsers [p] and [q]. *)\n\nlet choose (p : 'a parser) (q : 'a parser) : 'a parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The parser [at_most_once p] accepts the same language as [p], but\n   accepts each input string in at most one way. *)\n\nlet at_most_once (p : 'a parser) : 'a parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The type [parser] supports the applicative functor API: [map], [<&>]. *)\n\n(* [map f p] accepts the same language as the parser [p], and applies the\n   function [f] to every result produced by [p]. *)\n\nlet map (f : 'a -> 'b) (p : 'a parser) : 'b parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The parser [p <&> q] accepts the concatenation of the languages accepted\n   by the parsers [p] and [q]. For each value [a] returned by [p] and for\n   each value [b] returned by [q], it returns the pair [(a, b)]. *)\n\nlet (<&>) (p : 'a parser) (q : 'b parser) : ('a * 'b) parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The parser [p >> q] accepts the concatenation of the languages accepted\n   by the parsers [p] and [q]. For each value [a] returned by [p] and for\n   each value [b] returned by [q], it returns just [b]. *)\n\nlet (>>) (p : 'a parser) (q : 'b parser) : 'b parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The parser [p << q] accepts the concatenation of the languages accepted\n   by the parsers [p] and [q]. For each value [a] returned by [p] and for\n   each value [b] returned by [q], it returns just [a]. *)\n\nlet (<<) (p : 'a parser) (q : 'b parser) : 'a parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The type [parser] supports a number of operations that are specific of the\n   parser combinator monad. The most basic two are [any] and [eof]. On top of\n   these two, more combinators are defined, including [sat], [char], [digit],\n   and so on. *)\n\n(* [any] succeeds if and only if the cursor is currently not at the end of the\n   input stream. It consumes and returns the next input token. *)\n\nlet any : token parser =\n  fun cursor ->\n    (* TO DO: Define this function. *)\n    raise TODO\n\n(* [eof] succeeds if and only if the cursor is currently at the end of the\n   input stream. It consumes nothing, and returns [()]. It is idempotent:\n   [eof >> eof] is the same as [eof]. *)\n\nlet eof : unit parser =\n  fun cursor ->\n    (* TO DO: Define this function. *)\n    raise TODO\n\n(* The parser [sat p] consumes and returns the next input token if this\n   token satisfies the predicate [p]. It fails otherwise. *)\n\nlet sat (p : token -> bool) : token parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The parser [char c] consumes and returns the next input token if this\n   token is the character [c]. It fails otherwise. *)\n\nlet char (c : token) : token parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The parser [digit] consumes the next token if this token is a character\n   in the range ['0'..'9']. It returns an integer between 0 and 9. *)\n\nlet is_digit c : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet decode_digit c : int =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet digit: int parser =\n  (* TO DO: Define this parser. *)\n  fail\n\n(* Iteration. *)\n\n(* The parser [star p] accepts the concatenation of any number of strings\n   accepted by the parser [p]. The parser [plus p] accepts the concatenation\n   of any nonzero number of strings accepted by the parser [p]. *)\n\n(* The parser [p] must be non-nullable, that is, must not accept the empty\n   string. This ensures that the mutual recursion in the definitions of [star]\n   and [plus] is well-founded: before a recursive call takes place, at list\n   one input token is consumed. *)\n\nlet rec star (p : 'a parser) : 'a list parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nand plus (p : 'a parser) : 'a list parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* The parsers [number_lax] and [number] both recognize a nonempty sequence of\n   digits and return its meaning as an integer. Whereas [number_lax] accepts a\n   sequence of arbitrary (nonzero) length, [number] has longest-match semantics:\n   it will recognize only a sequence of maximum length (thus returns at most one\n   result). *)\n\nlet decode_digits (digits : int list) : int =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet number_lax : int parser =\n  (* TO DO: Define this parser. *)\n  fail\n\nlet number : int parser =\n  (* TO DO: Define this parser. *)\n  fail\n\n(* Support for iterated applications of left-associative operators. *)\n\ntype 'a op =\n  'a -> 'a -> 'a\n\n(* The parser [additive_op] recognizes one of the characters '+' or '-'\n   and interprets it as the corresponding operation on integers. *)\n\nlet additive_op : int op parser =\n  (* TO DO: Define this parser. *)\n  fail\n\n(* The parser [multiplicative_op] recognizes one of the characters '*' or '/'\n   and interprets it as the corresponding operation on integers. *)\n\nlet multiplicative_op : int op parser =\n  (* TO DO: Define this parser. *)\n  fail\n\n(* The parser [chainl1 p op] recognizes the language [p (op p)*]. A string in\n   this language is interpreted as a left-associative chain of applications of\n   operators to values. *)\n\nlet chainl1 (p : 'a parser) (op : 'a op parser) : 'a parser =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* A simple grammar of additions and subtractions of constants. *)\n\n(* A sum is a nonempty list of numbers, separated by additive operators, which\n   are considered left-associative. *)\n\nlet sum : int parser =\n  (* TO DO: Define this parser. *)\n  fail\n\n(* The higher-order function [fix] allows defining a recursive parser,\n   that is, a parser whose definition refers to itself. Left recursion\n   is forbidden: that is, a recursive call is permitted only after a\n   nonempty segment of the input has been consumed. *)\n\nlet fix (pp : 'a parser -> 'a parser) : 'a parser =\n  let rec p cursor = pp p cursor in\n  p\n\n(* A simple grammar of arithmetic expressions. *)\n\n(* A term is a nonempty list of factors, separated by additive operators,\n   which are left-associative. *)\n\n(* A factor is a nonempty list of atoms, separated by multiplicative\n   operators, which are left-associative. *)\n\n(* An atom is either a number or a term surrounded with parentheses. *)\n\nlet rec term : int parser =\n  (* TO DO: Define this parser. *)\n  fail\n",
    "descr": [
      [
        "",
        "<h1 id=\"Parser-Combinators\">Parser Combinators</h1>\n\n<p>In this exercise, on top of an implementation of the nondeterminism monad\n(which is given), we build a set of <strong>parser combinators</strong> and use them to\nbuild a parser for a simple language of arithmetic expressions.</p>\n<h2 id=\"Parsers\">Parsers</h2>\n\n<p>A <strong>parser</strong> is an algorithm which recognizes the structure of a piece of text\nand produces a convenient representation of this structure.</p>\n<p>For instance, a parser for arithmetic expressions, applied to the string\n<code>&quot;1+2*3&quot;</code>, would recognize that this sequence of characters represents an\naddition whose left-hand operand is the literal <code>1</code> and whose right-hand\noperand is the multiplication of the literals <code>2</code> and <code>3</code>. It would then\npossibly return an <em>abstract syntax tree</em> (a data structure that records this\ninformation in a natural way), or possibly evaluate this arithmetic expression\non the fly and return just the <em>integer value</em> <code>7</code>. It is up to us, when we\ndefine a parser, to decide what type of result it returns.</p>\n<p>A parser for arithmetic expressions, applied to the string <code>&quot;1+2)&quot;</code>, would\nreject this ill-formed input. Thus, a parser can return zero results, or in\nother words, <em>fail</em>.</p>\n<p>The reason why we view the arithmetic expression <code>&quot;1+2*3&quot;</code> as an addition\n(whose right-hand operand is a multiplication) is that we follow the usual\nconvention that &quot;multiplicative operators have priority over additive\noperators&quot;. In the absence of this convention, the input string <code>&quot;1+2*3&quot;</code>\nwould be <em>ambiguous</em>. A parser for arithmetic expressions, applied to this\nstring, would have to indicate that the value of this expression is either\n<code>7</code> or <code>9</code>, depending on how it is interpreted. Thus, in general, a parser\ncan return <em>multiple results</em>.</p>\n<p>These remarks suggest that a parser is a nondeterministic computation. Thus,\nwe can and should take advantage of the <em>nondeterminism monad</em> to facilitate\nthe implementation of parsers.</p>\n<p>The nondeterminism monad is the topic of several other exercises, where it\nis implemented in different ways,\nusing\n<a onclick=\"top.location='/exercises/nondet_monad_seq/';\" href=''>sequences</a>,\nusing\n<a onclick=\"top.location='/exercises/nondet_monad_cont/';\" href=''>continuations</a>,\nand as an\n<a onclick=\"top.location='/exercises/nondet_monad_defun/';\" href=''>abstract machine</a>.\nAll three implementations present the same API to the user.\nIn the following sections,\nwe explain the nondeterminism monad and its API.\nWe also recall the API of sequences, offered by the module <code>Seq</code>.\nThen, we come back to parsers.</p>\n<h2 id=\"The-Nondeterminism-Monad\">The Nondeterminism Monad</h2>\n\n<p>When searching for the solution of a problem, one must typically\nexplore multiple choices. If a series of choices lead to a failure\n(a dead end), then one must backtrack and explore another avenue.</p>\n<p>There are a number of ways in which nondeterminism and backtracking\ncan be implemented. Regardless of which implementation mechanism is\nchosen, it is desirable to hide it behind an abstraction barrier and\npresent the end user with <strong>a simple API for constructing an executing\nnondeterministic computations</strong>.</p>\n<p>This API is known as the <strong>nondeterminism monad</strong>. It offers the\nfollowing key elements:</p>\n<ul><li><p>A type <code>&#39;a m</code>, the type of computations that yield results of type\n <code>&#39;a</code>.</p>\n</li><li><p>A number of constructor functions for constructing computations,\n such as <code>fail: &#39;a m</code>, which represents failure, and <code>choose: &#39;a m\n  -&gt; &#39;a m -&gt; &#39;a m</code>, which expresses a nondeterministic choice\n between two computations.</p>\n</li><li><p>A single observation function, <code>sols: &#39;a m -&gt; &#39;a Seq.t</code>, which\n converts a computation to a sequence of results, thereby allowing\n the user to execute this computation and observe its results. The\n name <code>sols</code> stands for <code>solutions</code>.</p>\n</li></ul>\n\n<p>A monad can be thought of as a <strong>mini-programming language</strong> where\ncomputations are first-class citizens: we have a type of\ncomputations, ways of building computations, and a way of executing\ncomputations.</p>\n<p>A computation in the nondeterminism monad can produce zero, one, or\nmore results. Indeed, a computation that fails produces zero\nresults. A computation that succeeds normally produces one result.\nA computation that uses <code>choose</code> can produce more than one result.\nIt is in fact possible to construct computations that produce an\ninfinite number of results!</p>\n<h2 id=\"The-Nondeterminism-Monad-39-s-API\">The Nondeterminism Monad&#39;s API</h2>\n\n<p>The signature, or API, of the nondeterminism monad is as follows:</p>\n<pre><code>module NonDet : sig\n\n  (* Type. *)\n  type &#39;a m\n\n  (* Constructor functions. *)\n  val return: &#39;a -&gt; &#39;a m\n  val (&gt;&gt;=): &#39;a m -&gt; (&#39;a -&gt; &#39;b m) -&gt; &#39;b m\n  val fail: &#39;a m\n  val choose: &#39;a m -&gt; &#39;a m -&gt; &#39;a m\n  val delay: (unit -&gt; &#39;a m) -&gt; &#39;a m\n\n  (* Observation function. *)\n  val sols: &#39;a m -&gt; &#39;a Seq.t\n\nend</code></pre>\n\n<p>As explained above, a value of type <code>&#39;a m</code> is <strong>a description of a\ncomputation</strong>, which, once executed, produces a sequence of results\nof type <code>&#39;a</code>.</p>\n<p>To execute a computation <code>m</code>, one must first convert it to a\nsequence of type <code>&#39;a Seq.t</code>, whose elements can then be demanded,\none by one. (More information on the module <code>Seq</code> is given below.)\nThis conversion is performed by the observation function <code>sols</code>.</p>\n<p>The call <code>sols m</code> typically terminates in constant time; the actual\ncomputation described by <code>m</code> takes place only when the elements of\nthe sequence <code>sols m</code> are demanded, and only insofar as necessary to\nproduce the elements that are demanded. For instance, applying\n<code>Seq.head</code> to the sequence <code>sols m</code> forces the computation to\nproceed up to the point where it is able to produce its first\nresult.</p>\n<p>The constructor functions <code>return</code> and <code>(&gt;&gt;=)</code> exist in all monads.\n(They are also known as <code>return</code> and <code>bind</code>.) <code>return</code> constructs a\ntrivial computation, which does nothing except return a value,\nwhereas <code>(&gt;&gt;=)</code> constructs the sequential composition of two\ncomputations. Together, they allow constructing the sequential\ncomposition of an arbitrary number of computations.</p>\n<ul><li><p>The computation <code>return v</code> succeeds exactly once with the value\n <code>v</code>. In other words, the sequence of values that it produces is\n the singleton sequence composed of just <code>v</code>.</p>\n</li><li><p>The computation <code>m1 &gt;&gt;= m2</code> is the sequential composition of the\n computations <code>m1</code> and <code>m2</code>. This composition operator is\n asymmetric: whereas its first argument <code>m1</code> is a computation of\n type <code>&#39;a m</code>, its second argument <code>m2</code> is a function of type <code>a -&gt;\n  &#39;b m</code>. Every value <code>x</code> produced by <code>m1</code> is passed to <code>m2</code>,\n yielding a computation <code>m2 x</code>. The sequence of values produced by\n <code>m1 &gt;&gt;= m2</code> is the concatenation of the sequences of values\n produced by the computations <code>m2 x</code>, where <code>x</code> ranges over the\n values produced by <code>m1</code>.</p>\n</li></ul>\n\n<p>The constructor functions <code>fail</code> and <code>choose</code> are specific of the\nnondeterminism monad. <code>fail</code> can be thought of as a 0-ary\ndisjunction, whereas <code>choose</code> is a binary disjunction. Together,\nthey allow constructing the disjunction of an arbitrary number of\ncomputations.</p>\n<ul><li><p>The computation <code>fail</code> returns no result. In other words, it\n produces an empty sequence of values.</p>\n</li><li><p>The sequence of values produced by <code>choose m1 m2</code> is the\n concatenation of the sequences of values produced by <code>m1</code>\n and by <code>m2</code>.</p>\n</li></ul>\n\n<p>The constructor function <code>delay</code> is not exploited in this exercise on parser\ncombinators. Although we could implement a <code>delay</code> parser combinator (and, in\na real-world implementation of parser combinators, this combinator would be\nuseful), in this exercise, we won&#39;t.</p>\n<h2 id=\"The-Seq-API\">The <code>Seq</code> API</h2>\n\n<p>The type of <strong>on-demand sequences</strong> is defined in a module named <code>Seq</code>.\nBeginning with version 4.07,\nthis module is part of OCaml&#39;s standard library.</p>\n<pre><code>module Seq : sig\n\n  type &#39;a t = unit -&gt; &#39;a node\n\n  and +&#39;a node =\n  | Nil\n  | Cons of &#39;a * &#39;a t\n\n  val nil : &#39;a t\n  val cons: &#39;a -&gt; &#39;a t -&gt; &#39;a t\n  val singleton: &#39;a -&gt; &#39;a t\n\n  val map: (&#39;a -&gt; &#39;b) -&gt; &#39;a t -&gt; &#39;b t\n  val concat: &#39;a t -&gt; &#39;a t -&gt; &#39;a t\n  val flatten: &#39;a t t -&gt; &#39;a t\n\n  val take: int -&gt; &#39;a t -&gt; &#39;a t\n\n  val head: &#39;a t -&gt; &#39;a option\n\n  val of_list: &#39;a list -&gt; &#39;a t\n  val to_list: &#39;a t -&gt; &#39;a list\n\nend</code></pre>\n\n<p>This data type is closely related to the algebraic data type of lists.\nIndeed, if instead of <code>unit -&gt; &#39;a node</code> one had written just <code>&#39;a node</code>,\nthen this data type would have been isomorphic to the type of lists.</p>\n<p>The presence of <code>unit -&gt; ...</code> indicates that a sequence is in fact a function.\nCalling this function, by applying it to the value <code>()</code>, amounts to requesting\nthe head of the sequence. This head can be either <code>Nil</code>, which means that the\nsequence is empty, or <code>Cons (x, xs)</code>, which means that the first element of\nthe sequence is <code>x</code> and the remaining elements form another sequence <code>xs</code>. It\nis worth noting that <code>xs</code> is itself a function, so the elements of the\nsequence <code>xs</code> need not be explicitly computed until <code>xs</code> is applied.</p>\n<p>Sequences are closely related to <em>iterators</em> in object-oriented languages,\nsuch as C++ and Java. Yet, sequences are much simpler than iterators, for\ntwo reasons:</p>\n<ul><li><p>they involve no mutable state;</p>\n</li><li><p>they are just as easy to construct and to use as ordinary lists.</p>\n</li></ul>\n\n<p>The functions <code>nil</code>, <code>cons</code>, and <code>singleton</code> are constructor functions.</p>\n<p>The functions <code>map</code>, <code>concat</code>, <code>flatten</code> are analogues for sequences\nof the standard list functions <code>List.map</code>, <code>(@)</code>, and\n<code>List.flatten</code>.</p>\n<p>The function <code>Seq.take</code> truncates a sequence at a certain length:\n<code>Seq.take n xs</code> is a sequence that begins like <code>xs</code> but has at most\n<code>n</code> elements.</p>\n<p>The function <code>Seq.head</code> demands the first element of a sequence. If\nthe sequence begins with an element <code>x</code>, then <code>Some x</code> is returned;\notherwise, <code>None</code> is returned. This forces enough computation to\ntake place so as to be able to produce the first element of the\nsequence.</p>\n<p>The functions <code>Seq.of_list</code> and <code>Seq.to_list</code> convert between lists\nand sequences, both ways. One must keep in mind that applying\n<code>Seq.to_list</code> to a sequence <code>xs</code> causes all of its elements to be\ndemanded: that is, it forces all of the suspended computations to\ntake place. In particular, if <code>xs</code> is an infinite sequence, then\n<code>Seq.to_list xs</code> does not terminate.</p>\n<h2 id=\"What-39-s-a-Parser\">What&#39;s a Parser?</h2>\n\n<p>As explained earlier, a parser reads a piece of input text and produces zero,\none, or more results, where each result represents a possible interpretation\nof this text.</p>\n<p>We wish to construct parsers in a compositional way: that is, we wish to\nconstruct complex parsers by combining simpler parsers. Thus, we must allow\nfor the possibility that a parser does not necessarily read <em>all</em> of the\ninput, from beginning to end, but reads only a <em>fragment</em> of the input. In\nother words, if a <strong>cursor</strong> is a pointer into the input text, then a parser\nmust receive an initial cursor as an argument. Furthermore, instead of\nreturning just a number of <em>results</em>, a parser must return a number of <em>pairs\nof a result and a final cursor</em>, so that we can tell how far it has\nprogressed.</p>\n<p>This leads us to the following type definition:</p>\n<pre><code>type &#39;a parser =\n  cursor -&gt; (&#39;a * cursor) NonDet.m</code></pre>\n\n<p>Thus, a parser is a function which, when applied to an initial cursor,\nconstructs a nondeterministic computation which, when executed, produces a\nnumber of pairs of a result and a final cursor.</p>\n<p>Now, what is a cursor? It turns out that we need only one operation on\ncursors, namely reading the character that follows the cursor, if there is\none. This operation takes a cursor and returns either a pair <code>(c, cursor)</code> of\na character and a new cursor (which points one character further than the\noriginal cursor) or nothing (which means that the end of the input stream has\nbeen reached).</p>\n<p>This remark implies that a cursor <em>is</em> a sequence of characters: indeed, a\nsequence, as provided by the module <code>Seq</code>, is precisely a representation of\nsequences that offers just one way of observing a sequence, by demanding its\nfirst element.</p>\n<pre><code>type token =\n  char\ntype cursor =\n  token Seq.t</code></pre>\n\n<p>For simplicity, we assume that the input is a sequence of characters. More\ngenerally, it would be possible to define parsers that accept sequences of\n<strong>tokens</strong>, where the type of tokens is chosen by the user.</p>\n<h2 id=\"Executing-a-Parser\">Executing a Parser</h2>\n\n<p>How does one run a parser <code>p</code>?\nFirst, the input string <code>input</code> must be converted to a sequence\nof characters, therefore, a cursor.\nApplying the parser <code>p</code> to this initial cursor\nyields a computation in the <code>NonDet</code> monad.\nRunning this computation,\nby applying <code>NonDet.sols</code>,\nyields a sequence of pairs of a result and a final cursor.</p>\n<p>Assuming that we are not interested in the final cursors,\nwe discard them, by applying <code>Seq.map fst</code>.\nThis yields a sequence of results.\n(If the parser <code>p</code> has been constructed in such a way that it can\nsucceed only at the end of the input stream,\nthen every final cursor must be an empty sequence of characters,\nso no information is lost by discarding it.)</p>\n<p>The code for executing a parser is as follows:</p>\n<pre><code>let run (p : &#39;a parser) (input : string) : &#39;a Seq.t =\n  input\n  |&gt; Seq.of_string\n  |&gt; p\n  |&gt; NonDet.sols\n  |&gt; Seq.map fst</code></pre>\n\n<p>Implementing <code>run</code> could have been the first question of this exercise. We\nprefer to give it and start on a sound basis. The function <code>run</code> is used by\nthe automatic grader: if your code does not behave as expected, you will see\nan error message where <code>run</code> appears.</p>\n<h2 id=\"The-Parser-Monad\">The Parser Monad</h2>\n\n<p>In short, a parser is a nondeterministic computation that maintains a current\nstate, namely, the current cursor.</p>\n<p>Because a parser is a computation, it should not come as a surprise that\n<strong>parsers form a monad</strong>. That is, the type <code>&#39;a parser</code> can be equipped with\nthe basic combinators <code>return</code>, <code>&gt;&gt;=</code>. In fact, all of the\nconstructor functions offered by the nondeterminism monad can be lifted up to\nthe level of the parser monad. Parsers offer the following API:</p>\n<pre><code>  (* Type. *)\n  type &#39;a parser\n\n  (* Observation function. *)\n  val run: &#39;a parser -&gt; string -&gt; &#39;a Seq.t\n\n  (* Constructor functions. (The Monad API.) *)\n  val return: &#39;a -&gt; &#39;a parser\n  val (&gt;&gt;=): &#39;a parser -&gt; (&#39;a -&gt; &#39;b parser) -&gt; &#39;b parser\n\n  (* Constructor functions. (The Applicative Functor API.) *)\n  val map: (&#39;a -&gt; &#39;b) -&gt; &#39;a parser -&gt; &#39;b parser\n  val (&lt;&amp;&gt;): &#39;a parser -&gt; &#39;b parser -&gt; (&#39;a * &#39;b) parser\n  val (&gt;&gt;): &#39;a parser -&gt; &#39;b parser -&gt; &#39;b parser\n  val (&lt;&lt;): &#39;a parser -&gt; &#39;b parser -&gt; &#39;a parser\n\n  (* Constructor functions. (The Nondeterminism API.) *)\n  val fail: &#39;a parser\n  val choose: &#39;a parser -&gt; &#39;a parser -&gt; &#39;a parser\n  val at_most_once: &#39;a parser -&gt; &#39;a parser\n\n  (* Constructor functions. (The Parser API.) *)\n  val any: token parser\n  val eof: unit parser\n  val char: token -&gt; token parser</code></pre>\n\n<p>The above constructor functions are also known as <strong>parser combinators</strong>.</p>\n<p>The first group of combinators form the <em>Monad</em> API. The meaning of each\ncombinator can be briefly described as follows:</p>\n<ul><li><p>The parser <code>return x</code> consumes no input (that is, it does not move the\n current cursor) and returns exactly one result, namely <code>x</code>.</p>\n</li><li><p>The parser <code>p &gt;&gt;= q</code> is the sequential composition of <code>p</code> and <code>q</code>. The\n parser <code>p</code> is executed first. If (and every time) <code>p</code> produces a result <code>x</code>\n and advances the current cursor, the parser <code>q x</code> is executed, thereby\n producing a final result and further advancing the cursor.</p>\n</li></ul>\n\n<p>The next group of combinators form the <em>Applicative Functor</em> API. These\ncombinators can in fact be implemented in terms of <code>return</code> and <code>&gt;&gt;=</code>.\n(In other words, &quot;every monad is an applicative functor&quot;.)</p>\n<ul><li><p>The parser <code>map f p</code> works like <code>p</code>. In addition, the function <code>f</code> is used\n to transform every result produced by <code>p</code>.</p>\n</li><li><p>The combinators <code>&lt;&amp;&gt;</code>, <code>&gt;&gt;</code>, and <code>&lt;&lt;</code> are special cases of the\n sequential composition combinator <code>&gt;&gt;=</code>. It is not difficult to guess,\n based on their types, how they are supposed to behave.</p>\n</li></ul>\n\n<p>The following group form the <em>Nondeterminism</em> API. These combinators make\nsense in a setting where a computation can produce zero, one, or more results.</p>\n<ul><li><p>The parser <code>fail</code> always fails.</p>\n</li><li><p>The parser <code>choose p q</code> represents an alternative between the parsers <code>p</code>\n and <code>q</code>. The sequence of result/cursor pairs that it produces is the\n concatenation of the sequences produced by <code>p</code> and <code>q</code> separately.</p>\n</li><li><p>The parser <code>at_most_once p</code> works like <code>p</code>, but produces at most one result.\n Thus, if <code>p</code> fails, then <code>at_most_once p</code> fails, too.\n If <code>p</code> produces a result, then <code>at_most_once p</code> produces this result, too,\n and commits to it: any further results that <code>p</code> could produce are ignored.</p>\n</li></ul>\n\n<p>The last group of combinators are specific of parsers; they form the <em>Parser</em> API.</p>\n<ul><li><p>The parser <code>any</code> returns the next character (that is, the character at the\n current cursor) and consumes this character (by advancing the cursor). If\n the cursor is at the end of the input stream already, then <code>any</code> fails.</p>\n</li><li><p>The parser <code>eof</code> does not move the cursor. If the cursor is at the end of the\n input stream, then it returns <code>()</code>. Otherwise, it fails.</p>\n</li><li><p>The parser <code>char c</code> tests whether the next character is the character <code>c</code>.\n If so, it consumes this character (by advancing the cursor). Otherwise, it\n fails.</p>\n</li></ul>\n\n<p><strong>Question 1.</strong> Implement all of the constructor functions listed above.</p>\n<h2 id=\"Recursion\">Recursion</h2>\n\n<p>A <em>recursive</em> parser is a parser whose definition refers to itself. In other\nwords, since a parser is a function of a cursor to a nondeterministic\ncomputation, a recursive parser is just a recursive function.</p>\n<p>Recursive parsers are extremely common and useful. One must be careful,\nthough, to ensure termination. If a parser <code>p</code> applied to a certain cursor\ncauses a recursive call to <code>p</code> <em>at the very same cursor</em>, then the program\nwill not terminate (or will terminate abruptly by exhausting the space\nallotted to the stack). In technical speak, <strong>left recursion is forbidden</strong>. A\ncycle of recursive calls is permitted only if, somewhere along the cycle, the\ncurrent cursor is advanced.</p>\n<p>As an example of a valid recursive definition, we now wish to define the\nparser combinators <code>star</code> and <code>plus</code>.</p>\n<p>The parser <code>star p</code> accepts the concatenation of <em>any number</em> of strings\naccepted by the parser <code>p</code>. The parser <code>plus p</code> accepts the concatenation of\n<em>any nonzero</em> number of strings accepted by the parser <code>p</code>.</p>\n<p>As their names suggest, these combinators are analogous to the iteration\nconstructs <code>p*</code> and <code>p+</code> that are standard in regular expressions. However,\nthe parsers <code>star p</code> and <code>plus p</code> do <em>not</em> have &quot;longest-match&quot; semantics:\nthey accept <em>any</em> number of repetitions. Thus, they will often succeed in\n<em>more than one</em> way.</p>\n<p>In the definition of <code>star p</code> and <code>plus p</code>, it is permitted to assume that the\nparser <code>p</code> does <em>not</em> accept the empty string. In other words, the parser <code>p</code>\n<em>must</em> consume a nonempty fragment of the input. In other words still, it\n<em>must</em> advance the cursor. This guarantees that the (mutual) recursion in the\ndefinitions of <code>star</code> and <code>plus</code> is well-founded.</p>\n<p>In the following question, we use <code>star</code>, <code>plus</code>, and other parser combinators\nin order to build parsers that recognize (decimal) digits and numbers. A\n<strong>digit</strong> is a character in the range <code>&#39;0&#39;..&#39;9&#39;</code>. A <strong>number</strong> is a nonempty\nsequence of digits.</p>\n<p><strong>Question 2.</strong> Define the parser combinators <code>star</code> and <code>plus</code>, whose type is\n<code>&#39;a parser -&gt; &#39;a list parser</code>. Define a parser <code>digit</code> of type <code>int parser</code>\nthat recognizes a digit and returns its value as an integer in the range\n<code>0..9</code>. Define a parser <code>number_lax</code> of type <code>int parser</code> that recognizes a\ndigit sequence <em>of arbitrary nonzero length</em> and returns its interpretation as\nan integer. Define a parser <code>number</code> of type <code>int parser</code> that recognizes a\nnonempty digit sequence <em>of maximal length</em> and returns its interpretation as\nan integer.</p>\n<h2 id=\"Parsing-Arithmetic-Expressions\">Parsing Arithmetic Expressions</h2>\n\n<p>In the last part of this exercise, we would like to parse and evaluate\narithmetic expressions. We begin with a very simple language where only\ninteger literals, addition, and subtraction are permitted (Question 3).\nThen, we add multiplication, division, and the ability to enclose a\nsubexpression within parentheses (Question 4).</p>\n<p>In the following, <code>&#39;a op</code> is an abbreviation for the type of a binary\noperation whose operands and result have type <code>&#39;a</code>:</p>\n<pre><code>type &#39;a op =\n  &#39;a -&gt; &#39;a -&gt; &#39;a</code></pre>\n\n<p>The following three unnumbered questions are not explicitly graded.\nQuestion 3, which relies on them, is graded, so you will receive\nfeedback after you complete Question 3.</p>\n<p><strong>Question.</strong> Define a parser <code>additive_op</code> of type <code>int op\nparser</code> that recognizes one of the characters <code>&#39;+&#39;</code> or <code>&#39;-&#39;</code> and\ninterprets it as the corresponding operation on integers.</p>\n<p><strong>Question.</strong> Define a parser <code>multiplicative_op</code> of type <code>int op\nparser</code> that recognizes one of the characters <code>&#39;*&#39;</code> or <code>&#39;/&#39;</code> and\ninterprets it as the corresponding operation on integers.</p>\n<p><strong>Question.</strong> Define a parser combinator <code>chainl1</code> of type\n<code>&#39;a parser -&gt; &#39;a op parser -&gt; &#39;a parser</code> such that the parser\n<code>chainl1 p op</code> recognizes a nonempty sequence of <code>p</code>&#39;s,\nseparated with <code>op</code>&#39;s,\nand interprets it as a left-parenthesized chain of applications\nof operators to values.</p>\n<p><strong>Question 3.</strong> Define a parser <code>sum</code> of type <code>int parser</code> that recognizes and\nevaluates a <strong>sum</strong>, that is, a nonempty sequence of numbers, separated by\nadditive operators. For instance, the string <code>&quot;24-12-12&quot;</code> should be evaluated\nto the single integer result <code>0</code>.</p>\n<p>We now wish to introduce the multiplicative operators as well as the ability\nto enclose a subexpression within parentheses. In other words, we would like\nto parse the language described by the following <strong>context-free grammar</strong>:</p>\n<pre><code>  expr ::= number\n         | expr additive_op expr\n         | expr multiplicative_op expr\n         | &#39;(&#39; expr &#39;)&#39;</code></pre>\n\n<p>Unfortunately, this grammar cannot directly be used as a guide in the\ndefinition of a parser. Indeed, it exhibits several flaws. To begin with, it\nis ambiguous: it does not indicate that every operator should be considered\nleft-associative, nor does it indicate that multiplicative operators have\ngreater priority than additive operators. Furthermore, it is left-recursive:\nseveral right-hand sides in the definition of <code>expr</code> begin with <code>expr</code> itself.\nA parser whose structure is modeled directly after this grammar would diverge.</p>\n<p>In order to work around these problems, a common solution is to use a slightly\nmore complex grammar, where three syntactic categories are distinguished,\nnamely <strong>atoms</strong>, <strong>factors</strong>, and <strong>terms</strong>:</p>\n<pre><code>  atom   ::= number\n           | &#39;(&#39; term &#39;)&#39;\n  factor ::= atom ( additive_op atom )*\n  term   ::= factor ( multiplicative_op factor )*</code></pre>\n\n<p>This grammar can be transcribed in English as follows:</p>\n<ul><li><p>An <strong>atom</strong> is either a number or a term enclosed in parentheses.</p>\n</li><li><p>A <strong>factor</strong> is a nonempty sequence of atoms, separated with additive operators.</p>\n</li><li><p>A <strong>term</strong> is a nonempty sequence of factors, separated with multiplicative operators.</p>\n</li></ul>\n\n<p>This grammar is still recursive, because <code>term</code> depends on <code>factor</code> which\ndepends on <code>atom</code> which depends on <code>term</code>. However, it is not left-recursive:\nalong this cycle, at least one input symbol (namely, an opening parenthesis)\nmust be consumed.</p>\n<p><strong>Question 4.</strong> Define a parser <code>term</code> of type <code>int parser</code> that recognizes\nand evaluates a <strong>term</strong>, as defined by the above grammar. For instance, the\nstring <code>&quot;49-12*(2+2)&quot;</code> should be evaluated to the single integer result <code>1</code>.</p>\n<p><em>Hint.</em> One approach is to define <code>atom</code>, <code>factor</code> and <code>term</code> as three\nmutually recursive functions. An alternative approach is to use the parser\ncombinator <code>fix</code>, whose type is <code>(&#39;a parser -&gt; &#39;a parser) -&gt; &#39;a parser</code>,\nand whose definition is given to you.</p>\n<h2 id=\"Notes\">Notes</h2>\n\n<p>The parser monad, and parser combinators, are often considered an attractive\napproach to parsing, for several reasons:</p>\n<ul><li><p>Because parsers are ordinary functions, they are <strong>notationally\n lightweight</strong>. In particular, because recursive and mutually recursive\n parsers can be easily defined, <strong>a grammar can be directly transcribed as a\n parser</strong> of identical structure.</p>\n</li><li><p>Because parsers are ordinary functions, it is easy to define highly\n parameterized, <strong>highly reusable</strong> parser combinators, such as <code>star</code>,\n <code>plus</code>, and <code>chainl1</code> in this exercise.</p>\n</li></ul>\n\n<p><em>Note.</em> The first argument above works better in Haskell than in OCaml. In\nOCaml, the right-hand side of a recursive definition must be a syntactic\nfunction <code>fun ...</code> or a lazy thunk <code>lazy ...</code>, which makes things more\nverbose: unpleasant eta-expansions are often required. Also, in OCaml,\nexplicit uses of the <code>delay</code> combinator may be required, whereas in Haskell,\nevery computation is suspended by default.</p>\n<p>That said, parser combinators, as presented here, also have several deep\nlimitations:</p>\n<ul><li><p>They <strong>do not support left recursion</strong>, which causes an infinite loop.</p>\n</li><li><p>They <strong>do not guarantee unambiguity</strong>. In other words, it can be very\n difficult to convince oneself, by inspection of the code, that a parser\n can produce at most one result.</p>\n</li><li><p>They <strong>do not guarantee linear time complexity</strong>. This is related to\n the previous point: because a parser is a nondeterministic computation,\n its execution involves backtracking. In degenerate cases, it\n can require <strong>exponential time</strong> in the length of the input.</p>\n</li><li><p>Although parser combinators do guarantee linear space complexity,\n in practice,\n <strong>their space requirement can be very large</strong>.\n This is again due to nondeterminism:\n the data structures that are required in order to support backtracking,\n known as <em>choice points</em>,\n tend to accumulate\n even when they are not needed,\n because it is not statically known which computations may or may not\n produce more than one result.\n Explicit uses of the combinator <code>at_most_once</code> can remedy this to some extent,\n but placing them correctly requires expertise and effort.</p>\n</li></ul>\n\n<p>It is possible to try and remedy some of the above limitations by performing\naggressive <em>memoization</em>, as suggested in the paper\n<a href=\"https://ir.cwi.nl/pub/25145/25145.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Practical, general parser combinators</a>\nby Izmaylova, Afroozeh and van der Storm (2016). This is technically quite\nimpressive, but also quite complex, and still does not offer guaranteed\nunambiguity.</p>\n<p>We wrote above that &quot;a parser is a nondeterministic computation that maintains\na current state, namely, the current cursor&quot;. In fact, our Parser monad can be\nviewed as an application of the\n<a href=\"https://en.wikibooks.org/wiki/Haskell/Monad_transformers\" target=\"_blank\" rel=\"noopener noreferrer\">State monad transformer</a>\nto the nondeterminism monad,\nextended with parser-specific operations such as <code>any</code> and <code>eof</code>.\nWe could have taken advantage of this remark to make our code more\nmodular and more abstract. For the sake of simplicity,\nwe preferred to keep it more concrete.</p>\n<p>In summary, we have presented parser combinators because they constitute <strong>a\ngood programming exercise</strong> and a nice illustration of <strong>nondeterministic\nprogramming in the presence of state</strong>. That said, as a parsing technique,\nthey have problematic limitations. If you wish to build a parser for a\nspecific language, we recommend looking into other parsing techniques, such as\nLR(1) or SGLR, depending on your specific needs. We also recommend using an\nexisting <strong>parser generator</strong> instead of writing your own parsing code, as a\nmature dedicated tool can offer a range of services that is difficult to\nmatch.</p>\n"
      ]
    ],
    "compiled": {
      "prelude_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAAAoAAAACAAAABgAAAAWgJ1ByZWx1ZGVAhJWmvgAAALoAAAAZAAAAYgAAAE6goCdQcmVsdWRlkDBOnbsAqlp54g2UeJ51iRmhoKAmU3RkbGlikDBLBLTtoZqnIt82UUGJX7NHoKA4TGVhcm5vY2FtbF9pbnRlcm5hbF9pbnRmkDD7dYGB25SyDLC5kWiR1KaLoKAzTGVhcm5vY2FtbF9jYWxsYmFja5Aw1KWIt08Xk5o9CWhN3TiKIaCgOENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljc5AwtsZpSVXhAAGu0mdXEQSpYUCElaa+AAAABAAAAAIAAAAFAAAABaCQQEA=",
      "prepare_cmi": "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",
      "solution_cmi": "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",
      "test_cmi": "",
      "exercise_lib": {
        "cma": "",
        "js": "function\ndynload(as){\"use strict\";var\nat={},e=as.jsoo_runtime,C=e.caml_register_global;function\na(a,b){return a.length==1?a(b):e.caml_call_gen(a,[b])}function\nb(a,b,c){return a.length==2?a(b,c):e.caml_call_gen(a,[b,c])}function\np(a,b,c,d){return a.length==3?a(b,c,d):e.caml_call_gen(a,[b,c,d])}var\nT=e.caml_get_global_data().Stdlib__list;C(1,[0],\"Prelude\");var\nX=[248,e.caml_string_of_jsbytes(\"Prepare.TODO\"),e.caml_fresh_oo_id(0)];function\nq(a){return 0}function\nY(b,a,c){return[0,b,a]}function\nZ(a){return function(b){return[0,a,q]}}function\nD(c,e,h){var\nb=a(e,0);if(b)var\nf=b[2],g=function(a){return D(c,f,a)},d=[0,a(c,b[1]),g];else\nvar\nd=b;return d}function\nr(d,c,g){var\nb=a(d,0);if(b){var\ne=b[2],f=function(a){return r(e,c,a)};return[0,b[1],f]}return a(c,0)}function\nE(c,g){var\nb=a(c,0);if(b){var\nd=0,e=b[2],f=function(a){return E(e,a)};return r(b[1],f,d)}return b}function\nF(c,e){return 0===c?q:function(g){var\nb=a(e,0);if(b)var\nf=F(c-1|0,b[2]),d=[0,b[1],f];else\nvar\nd=b;return d}}function\n_(c){var\nb=a(c,0),d=b?[0,b[1]]:b;return d}function\nG(a,e){if(a)var\nc=a[2],d=function(a){return G(c,a)},b=[0,a[1],d];else\nvar\nb=a;return b}function\ns(c,a,b,g){if(a===b)return 0;var\nd=a+1|0;function\nf(a){return s(c,d,b,a)}return[0,e.caml_string_get(c,a),f]}function\n$(a){var\nb=e.caml_ml_string_length(a),c=0;return function(d){return s(a,c,b,d)}}function\nH(d){var\nb=a(d,0);if(b)var\ne=H(b[2]),c=[0,b[1],e];else\nvar\nc=b;return c}function\naa(e){var\nb=0,c=e;for(;;){var\nd=a(c,0);if(d){var\nb=b+1|0,c=d[2];continue}return b}}var\nt=[0,q,Y,Z,D,r,E,F,_,G,s,$,H,aa,function(j,i,h){var\nf=i,e=h;for(;;){var\nd=a(f,0),c=a(e,0);if(d){if(c){var\ng=b(j,d[1],c[1]);if(g){var\nf=d[2],e=c[2];continue}return g}}else\nif(!c)return 1;return 0}}];function\ni(c,b,a){return p(c,0,b,a)}function\nk(d,c,a){return b(c,d,a)}function\nab(e,d,c,a){return b(e,function(b,a){return p(d,b,c,a)},a)}function\nl(c,b){return a(b,0)}function\nu(e,d,a,c){return b(e,a,function(e){return b(d,a,c)})}function\nac(a,d){function\nc(a){return 0}return b(a,function(b,a){return[0,b,a]},c)}function\nI(d){function\nb(h){var\nb=a(d,0);if(b){var\nc=b[1],e=c[2],f=c[1],g=function(a,b){return k(f,a,b)};return function(a,b){return u(g,e,a,b)}}return l}return function(a,c){return i(b,a,c)}}function\nm(a,d){function\nc(a){return 0}return b(a,function(b,a){return[0,[0,b,I(a)]]},c)}function\nad(b){function\na(d){var\na=m(b,0);if(a){var\nc=a[1][1];return function(a,b){return k(c,a,b)}}return l}return function(b,c){return i(a,b,c)}}function\nv(d,a){function\nb(h){var\nb=m(d,0);if(b){var\nc=b[1],e=v(a,c[2]),f=c[1],g=function(a,b){return k(f,a,b)};return function(a,b){return u(g,e,a,b)}}return a}return function(a,c){return i(b,a,c)}}function\nJ(e,b){function\nc(g){var\nc=m(e,0);if(c){var\nd=c[1],f=J(d[2],b);return v(a(b,d[1]),f)}return l}return function(a,b){return i(c,a,b)}}var\nc=[0,i,k,ab,l,u,ac,I,m,ad,v,J];function\nae(e,d){var\nf=a(e,a(t[11],d)),g=a(c[6],f);function\nh(a){return a[1]}return b(t[4],h,g)}function\nK(b,a){return 0===a?b:e.caml_div(b,a)}C(2,[0,X,t,c,ae,K],\"Prepare\");function\nd(d,b){return a(c[2],[0,d,b])}function\nf(f,e,d){function\ng(a){return b(e,a[1],a[2])}var\nh=a(f,d);return b(c[3],h,g)}function\nL(a){return c[4]}function\nj(f,e,d){var\ng=a(e,d),h=a(f,d);return b(c[5],h,g)}function\nM(d,b){var\ne=a(d,b);return a(c[9],e)}function\nn(c,b){function\ne(b){var\ne=a(c,b);return function(a){return d(e,a)}}return function(a){return f(b,e,a)}}function\nw(b,a){function\nc(b){function\nc(a){var\nc=[0,b,a];return function(a){return d(c,a)}}return function(b){return f(a,c,b)}}return function(a){return f(b,c,a)}}function\ng(b,a){function\nc(b){return a}return function(a){return f(b,c,a)}}function\nN(b,a){function\nc(b){return g(a,function(a){return d(b,a)})}return function(a){return f(b,c,a)}}function\nO(d){var\nb=a(d,0);return b?a(c[2],[0,b[1],b[2]]):c[4]}function\naf(b){return a(b,0)?c[4]:a(c[2],[0,0,b])}function\nx(c){function\nb(b){return a(c,b)?function(a){return d(b,a)}:L}return function(a){return f(O,b,a)}}function\nh(a){return x(function(b){return a===b?1:0})}function\nP(a){var\nb=48<=a?1:0,c=b?a<=57?1:0:b;return c}function\nQ(a){return a-48|0}var\nR=n(Q,x(P));function\ny(a){var\nb=0;function\nc(a){return d(b,a)}var\ne=z(a);return function(a){return j(e,c,a)}}function\nz(a){function\nb(b){function\nc(a){var\nc=[0,b,a];return function(a){return d(c,a)}}var\ne=y(a);return function(a){return f(e,c,a)}}return function(c){return f(a,b,c)}}function\nS(a){var\nb=0;function\nc(b,a){return(10*b|0)+a|0}return p(T[25],c,b,a)}var\nU=n(S,z(R));function\nA(a){return M(U,a)}function\nag(b,a){return b-a|0}function\nah(a){return d(ag,a)}var\nai=g(h(45),ah);function\naj(b,a){return b+a|0}function\nak(a){return d(aj,a)}var\nal=g(h(43),ak);function\nB(a){return j(al,ai,a)}function\nam(a){return d(K,a)}var\nan=g(h(47),am),ao=e.caml_mul;function\nap(a){return d(ao,a)}var\naq=g(h(42),ap);function\nV(a){return j(aq,an,a)}function\no(a,c){var\nd=w(a,y(w(c,a)));return n(function(a){var\nc=a[2],d=a[1];function\ne(c,a){return b(a[1],c,a[2])}return p(T[25],e,d,c)},d)}var\nar=o(A,B);function\nW(c){function\na(d){return b(c,a,d)}return a}C(4,[0,d,f,L,j,M,n,w,g,N,O,af,x,h,P,Q,R,y,z,S,U,A,B,V,o,ar,W,W(function(a){var\nb=h(41),c=N(g(h(40),a),b);return o(o(function(a){return j(A,c,a)},V),B)})],\"Solution\");return at}if(typeof\nmodule===\"object\"&&module.exports)module[\"exports\"]=dynload;\n"
      },
      "test_lib": {
        "cma": "",
        "js": "function\ndynload(fI){\"use strict\";var\nfJ={},cl=\"Seq.take\",cg=\"number_lax\",cp=\"Seq.to_list\",cq=\"any\",ce=\"sum\",cd=\"is incorrect.\",ck=\"%d\",a0=\"map\",cc=\"at_most_once\",co=\"return\",cj=\"term\",B=\"./_learn-ocaml-build/exercises/fpottier/parser_combinators/test.ml\",o=\"mono\",E=\"Test\",i=\"parser\",ci=\"unit\",ab=\"token\",cf=\"char\",cb=\"fail\",b$=\"choose\",ca=\"digit\",cn=128,ch=\"Char.code\",P=\"int\",cm=248,C=100,b_=\"number\",s=fI.jsoo_runtime,aZ=s.caml_equal,b7=s.caml_fresh_oo_id,b9=s.caml_int_compare,b6=s.caml_ml_string_length,a=s.caml_string_of_jsbytes,b8=s.caml_wrap_exception;function\nb(a,b){return a.length==1?a(b):s.caml_call_gen(a,[b])}function\nd(a,b,c){return a.length==2?a(b,c):s.caml_call_gen(a,[b,c])}function\nl(a,b,c,d){return a.length==3?a(b,c,d):s.caml_call_gen(a,[b,c,d])}function\nz(a,b,c,d,e){return a.length==4?a(b,c,d,e):s.caml_call_gen(a,[b,c,d,e])}var\nk=s.caml_get_global_data(),bB=[0,[0,a(\"Something is wrong.\")],0],L=k.Stdlib__buffer,F=k.Assert_failure,bw=k.Match_failure,f=k.Stdlib__list,m=k.Stdlib,c=k.Ast_helper,q=k.Ty,y=k.Prepare,t=k.Test_lib,K=k.Stdlib__printf,bD=k.Stdlib__char,R=k.Stdlib__string,bF=k.Stdlib__array,ao=k.Stdlib__printexc,aG=k.Stdlib__hashtbl,a1=k.Stdlib__random,H=k.Learnocaml_internal,r=k.Solution,ay=f[19],fj=k.Learnocaml_report,cr=f[17];b(a1[1],0);var\ncw=[0,a(B),243,6],c3=[0,a(B),677,26],fC=[0,43,[0,45,[0,42,[0,47,[0,49,[0,50,[0,40,[0,41,0]]]]]]]],fD=a(cj),fE=[0,a(P)],fF=[0,a(i)],fG=a(\"Question 4\"),fx=[0,43,[0,45,[0,49,[0,50,0]]]],fy=a(ce),fz=[0,a(P)],fA=[0,a(i)],fB=a(\"Question 3\"),fl=[0,65,[0,49,[0,50,0]]],fm=[0,4,0],fn=a(b_),fo=[0,a(P)],fp=[0,a(i)],fq=a(cg),fr=[0,a(P)],fs=[0,a(i)],ft=a(ca),fu=[0,a(P)],fv=[0,a(i)],fw=a(\"Question 2\"),fk=a(\"Question 1\"),fi=[0,[11,a(\"The code seems correct. Tested \"),[4,0,0,0,[11,a(\" parsers on \"),[4,0,0,0,[11,a(\" input strings.\"),0]]]]],a(\"The code seems correct. Tested %d parsers on %d input strings.\")],ev=a(cf),ew=[0,a(ab)],ex=[0,a(i)],ey=[0,a(ab)],ez=a(\"eof\"),eA=[0,a(ci)],eB=[0,a(i)],eC=a(cq),eD=[0,a(ab)],eE=[0,a(i)],eF=a(\">>\"),eG=[0,a(o)],eH=[0,a(i)],eI=[0,a(o)],eJ=[0,a(i)],eK=[0,a(ci)],eL=[0,a(i)],eM=a(a0),eN=[0,a(o)],eO=[0,a(i)],eP=[0,a(ab)],eQ=[0,a(i)],eR=[0,a(o)],eS=[0,a(ab)],eT=a(cc),eU=[0,a(o)],eV=[0,a(i)],eW=[0,a(o)],eX=[0,a(i)],eY=a(b$),eZ=[0,a(o)],e0=[0,a(i)],e1=[0,a(o)],e2=[0,a(i)],e3=[0,a(o)],e4=[0,a(i)],e5=a(cb),e6=[0,a(o)],e7=[0,a(i)],e8=a(\">>=\"),e9=[0,a(o)],e_=[0,a(i)],e$=[0,a(o)],fa=[0,a(i)],fb=[0,a(o)],fc=[0,a(o)],fd=[0,a(i)],fe=a(co),ff=[0,a(o)],fg=[0,a(i)],fh=[0,a(o)],d6=a(cb),d7=a(ca),d8=a(cg),d9=a(b_),d_=a(ce),d$=a(cj),ea=a(cq),eb=a(ch),ec=a(a0),ed=a(co),ee=a(b$),ef=a(cc),eg=[0,[12,39,[0,[12,39,0]]],a(\"'%c'\")],eh=a(cf),ei=a(ch),ej=a(a0),ek=[0,[11,a(\">>= fun \"),[2,0,[11,a(\" ->\"),0]]],a(\">>= fun %s ->\")],el=a(\"eof >>\"),eq=a(\"run\"),er=a(cl),es=a(cp),et=a(\"compare\"),eu=a(\"List.sort\"),ep=a(cl),en=a(cp),d5=[0,a(B),1216,4],d4=[0,a(B),1220,4],d3=[0,41,0],dP=[4,[0,[0,0]]],dB=a(\"Some\"),dC=a(\"None\"),dw=a(\"true\"),dx=a(\"false\"),dv=[0,[12,39,[2,0,[12,39,0]]],a(\"'%s'\")],dt=[0,[4,0,0,0,0],a(ck)],dk=[0,[12,34,[2,0,[12,34,0]]],a('\"%s\"')],dd=[0,a(\"The following expression:\")],dc=[0,[0,a(cd)],[0,0,0]],da=[0,a(\"This is invalid. Producing the following result is valid:\")],db=[0,a(\"This is invalid. Raising the following exception is valid:\")],c_=[0,a(\"produces the following result:\")],c$=[0,a(\"raises the following exception:\")],c8=[0,[0,a(\"seems correct.\")],0],c9=[0,1],c5=[0,[0,a(cd)],0],c6=[0,[0,a(\"is correct.\")],0],c7=[0,1],c2=[0,a(B),668,24],c0=[0,[0,a(\"Not yet implemented.\")],0],c1=[0,a(\"The following exception is raised and never caught:\")],cK=a(\"\"),cJ=[0,a(B),344,2],cI=a(\"|>\"),cG=a(\"|]\"),cH=a(\"[| \"),cE=a(\"]\"),cF=a(\"[\"),cC=a(\")\"),cD=a(\"(\"),cB=[0,[4,0,0,0,0],a(ck)],cv=[0,a(B),174,2],cu=[0,a(B),119,2],cs=[0,a(B),13,14],cy=a(\",\"),cA=a(\";\"),cL=a(\"Test.SymSeq.OutOfBounds\"),cY=a(\"Test.Fail\"),dl=a(\"string\"),dm=a(\"learnocaml_autoregister_string_9B8556\"),dn=a(E),dp=a(P),dq=a(\"learnocaml_autoregister_int_42BB52\"),dr=a(E),dy=a(\"bool\"),dz=a(\"learnocaml_autoregister_bool_CCABEA\"),dA=a(E),dD=a(\"option\"),dE=a(\"learnocaml_autoregister_option_DD682E\"),dF=a(E),dG=a(\"array\"),dH=a(\"learnocaml_autoregister_array_4BCC67\"),dI=a(E),dJ=a(\"list\"),dK=a(\"learnocaml_autoregister_list_4438D8\"),dL=a(E),dM=a(\"list_int\"),dN=a(\"learnocaml_autoregister_list_int_5A61C5\"),dO=a(E),dQ=[0,65,[0,66,0]],dR=[0,0,[0,1,0]],dT=[0,49,[0,50,0]],dU=[0,43,[0,45,0]],dV=[0,42,[0,47,0]];function\nn(c,a){return b(c,a)}function\nI(a){if(a)return a[1];throw[0,F,cs]}var\nJ=m[19];function\naz(b,a){if(b!==J&&a!==J)return b+a|0;return J}function\nct(b,a){return b<=a?1:0}function\nQ(c){var\na=c;for(;;){if(typeof\na===\"number\")return 0===a?0:J;else\nswitch(a[0]){case\n0:var\nb=a[4];break;case\n1:var\nb=a[1];break;case\n2:var\na=a[1];continue;default:return a[1]}return b}}var\nac=0;function\na2(d,c,a,b){return 0===a?ac:[0,d,c,a,b]}function\naA(a,b){return a2(a,0,b6(a),b)}function\na3(d){var\nb=0,a=0;for(;;){if(b6(d)<=a)return b;var\nc=s.caml_string_unsafe_get(d,a),e=cn<=c?224<=c?240<=c?4:3:2:1,b=b+1|0,a=a+e|0;continue}}function\ng(a){return aA(a,a3(a))}function\nad(a){return d(K[10],g,a)}function\naB(a){if(10===a)throw[0,F,cu];return aA(d(R[1],1,a),1)}var\nae=aB(32),a4=aB(59),a5=1;function\na6(a){return 0===a?ac:1===a?ae:[1,a]}function\na7(a,d){var\nc=0;if(typeof\na!==\"number\"&&2===a[0]){var\nb=a[1];c=1}if(!c)var\nb=a;return[2,b,d]}function\naf(a){return a7(a6(a),a5)}var\na8=af(0),a9=af(1);function\nv(a){return 0===a?a8:1===a?a9:af(a)}function\nh(b,a){if(typeof\nb===\"number\"&&!b)return a;if(typeof\na===\"number\"&&!a)return b;var\nc=Q(a);return[3,az(Q(b),c),b,a]}function\na_(b,a){if(0<=b)return[4,Q(a),b,a];throw[0,F,cv]}function\nw(a){var\nb=Q(a);return b===J?a:[5,b,a]}var\naC=d(R[1],80,32),a$=80;function\naD(b,c){var\na=c;for(;;){if(0<a){if(a<=80)return z(L[16],b,aC,0,a);z(L[16],b,aC,0,a$);var\na=a-80|0;continue}return 0}}function\nba(b,j,i,h){var\ne=j,c=i,a=h;for(;;)if(typeof\na===\"number\"){if(0===a)return 0;if(c)throw[0,F,cw];d(L[10],b[3],10);aD(b[3],e);b[2]=e;return 0}else\nswitch(a[0]){case\n0:z(L[16],b[3],a[1],a[2],a[3]);b[2]=b[2]+a[4]|0;return 0;case\n1:var\nf=a[1];aD(b[3],f);b[2]=b[2]+f|0;return 0;case\n2:var\nk=c?a[1]:a[2],a=k;continue;case\n3:ba(b,e,c,a[2]);var\na=a[3];continue;case\n4:var\ne=e+a[2]|0,a=a[3];continue;default:if(c)var\ng=c;else\nvar\nl=b[1],g=az(b[2],a[1])<=l?1:0;var\nc=g,a=a[2];continue}}function\nbb(d,c){var\na=b(L[1],512);ba([0,d,0,a],0,0,c);return b(L[2],a)}function\naE(e,a){if(a)var\ng=a[2],h=function(a){return[0,e,[0,a,0]]},i=d(f[19],h,g),j=b(f[14],i),c=[0,a[1],j];else\nvar\nc=a;return c}function\nS(a){return l(f[26],h,a,ac)}var\ncx=v(1),bc=h(g(cy),cx);function\nbd(a){return S(aE(bc,a))}var\ncz=v(1),be=h(g(cA),cz);function\nbf(a){return S(aE(be,a))}function\nD(a){return b(ad(cB),a)}function\nag(a){var\nb=v(0);return h(a_(2,h(v(0),a)),b)}function\nah(a){var\nb=g(cC),c=h(ag(a),b);return h(g(cD),c)}function\nbg(a){var\nb=g(cE),c=h(ag(a),b);return h(g(cF),c)}function\nbh(a){var\nb=g(cG),c=h(ag(a),b);return h(g(cH),c)}function\nbi(a){return w(ah(bd(a)))}function\nbj(a){return w(bg(bf(a)))}function\nbk(b,a){if(a){var\nc=h(ae,bi(a));return h(g(b),c)}return g(b)}function\nbl(a){if(a)var\nc=a[2],e=d(ay,function(a){return h(w(v(1)),a)},c),b=[0,a[1],e];else\nvar\nb=a;return b}function\nbm(a){return w(S(bl(a)))}function\nx(b,a){return bm([0,g(b),a])}function\nbn(b,a){return ah(x(b,a))}function\nG(d,a){if(0<b(f[1],a)){var\nc=b(f[9],a),e=b(f[6],c),i=b(f[9],e),j=b(f[5],c),k=h(ae,x(d,i)),l=h(g(cI),k);return w(h(j,h(v(1),l)))}throw[0,F,cJ]}function\nM(c,a){return bb(70,w(b(c,a)))}function\nbo(a){function\nb(b,a){var\nc=d(R[1],1,b);return d(m[28],c,a)}return l(f[26],b,a,cK)}var\naF=[cm,cL,b7(0)];function\nu(a){return typeof\na===\"number\"?0:0===a[0]?1:a[1]}function\nN(a){return 0===u(a)?1:0}var\nai=0;function\ncM(a){return[0,a]}function\nbp(b,a){if(N(b))return a;if(N(a))return b;var\nc=u(a);return[1,u(b)+c|0,b,a]}function\ncN(a){return l(f[25],bp,ai,a)}function\ncO(b,a){if(!N(b)&&!N(a)){var\nc=u(a);return[2,s.caml_mul(u(b),c),b,a]}return ai}function\ncP(b,a){return N(a)?ai:[3,u(a),b,a]}function\nT(i,h){var\na=i,c=h;for(;;)if(typeof\na===\"number\")throw aF;else\nswitch(a[0]){case\n0:if(0===c)return a[1];throw aF;case\n1:var\nf=a[2],g=u(f);if(c<g){var\na=f;continue}var\na=a[3],c=c-g|0;continue;case\n2:var\ne=a[3],j=s.caml_mod(c,u(e)),k=u(e),l=d(y[5],c,k),m=T(e,j);return[0,T(a[2],l),m];default:var\nn=T(a[3],c);return b(a[2],n)}}function\naj(e,d){var\na=e,c=d;for(;;)if(typeof\na===\"number\")return 0;else\nswitch(a[0]){case\n0:return b(c,a[1]);case\n1:aj(a[2],c);var\na=a[3];continue;case\n2:var\nf=a[3],g=function(d,c){return function(a){return aj(c,function(c){return b(d,[0,a,c])})}}(c,f),a=a[2],c=g;continue;default:var\nh=a[2],i=function(c,d){return function(a){return b(c,b(d,a))}}(c,h),a=a[3],c=i;continue}}function\nbq(c){var\na=[0,0];aj(c,function(b){a[1]=[0,b,a[1]];return 0});return b(f[9],a[1])}var\np=[0,aF,u,N,ai,cM,bp,cN,cO,cP,T,aj,bq,function(c,a){if(u(a)<=c)return bq(a);var\ne=0,i=1;if(c<1)var\nf=e;else{var\nd=i,g=e;for(;;){var\nj=u(a),h=[0,T(a,b(a1[5],j)),g],k=d+1|0;if(c!==d){var\nd=k,g=h;continue}var\nf=h;break}}return f}];function\nak(g){var\nc=d(aG[1],0,cn);function\ne(b){try{var\na=d(aG[6],c,b);return a}catch(a){a=b8(a);if(a===m[8]){var\nf=d(g,e,b);l(aG[5],c,b,f);return f}throw a}}return e}function\naH(d,c,a){return b(d,[0,c,a])}function\nbr(b,a){return d(b,a[1],a[2])}function\naI(a){var\nc=ak(function(c){var\nd=b(a,function(a,b){return aH(c,a,b)});return function(a){return br(d,a)}});return function(a,b){return aH(c,a,b)}}function\naJ(a){return p[4]}function\ncQ(b,a){return 0===a?b:p[4]}function\nU(c,a){return 0===a?b(p[5],c):p[4]}function\nbs(c,a){return 0===a?p[4]:b(c,a-1|0)}function\nV(e,c,a){var\nf=b(c,a),g=b(e,a);return d(p[6],g,f)}function\nal(a,b){var\nc=a<=b?1:0,d=c?[0,a,al(a+1|0,b)]:c;return d}function\nam(g,e,a){var\nc=al(0,a);function\nh(c){var\nf=b(e,a-c|0),h=b(g,c);return d(p[8],h,f)}var\ni=d(f[19],h,c);return b(p[7],i)}function\nbt(f,e,c){if(0===(c%2|0)){var\ng=d(y[5],c,2),h=b(e,g),i=b(f,g);return d(p[8],i,h)}var\na=d(y[5],c,2),j=b(e,a),k=b(f,a+1|0),l=d(p[8],k,j),m=b(e,a+1|0),n=b(f,a),o=d(p[8],n,m);return d(p[6],o,l)}function\naK(e,c,a){var\nf=b(c,a);return d(p[9],e,f)}function\ncR(a){var\nb=d(f[19],U,a);return l(f[25],V,aJ,b)}var\ncS=1;function\ncT(a){return U(cS,a)}var\ncU=0;function\ncV(a){return U(cU,a)}function\ncW(a){return V(cV,cT,a)}function\nbu(a){function\nb(a){return[0,a[1],a[2]]}return ak(function(c){function\nd(b){return am(a,c,b)}function\ne(a){return aK(b,d,a)}function\nf(a){return bs(e,a)}var\ng=0;function\nh(a){return U(g,a)}return function(a){return V(h,f,a)}})}function\ncX(a){function\nb(a){return[0,a[1],a[2]]}var\nc=bu(a);function\nd(b){return am(a,c,b)}return function(a){return aK(b,d,a)}}var\ne=[0,aJ,aJ,cQ,U,bs,V,V,al,am,am,bt,bt,aK,cR,cW,bu,cX,function(e,c,a){var\ng=al(0,c);function\nh(c){var\nf=b(a,c);return d(p[13],e,f)}var\ni=d(f[19],h,g);return b(f[14],i)}],aL=[cm,cY,b7(0)];function\nW(b,a){return[0,[0,[0,[0,b],0],a],0]}function\nan(a){throw[0,aL,[0,[2,a,0],0]]}function\ncZ(a){function\nb(a){return an([0,[0,a],0])}return d(K[10],b,a)}function\nA(a){try{var\ne=d(t[80],0,a);return e}catch(a){a=b8(a);if(a[1]===aL)return a[2];if(a===y[1])return[0,[2,c0,0],0];var\nc=[0,[2,b(ao[6],0)],0];return[0,[2,[0,c1,[0,0,[0,[2,b(ao[1],a)],c]]],0],0]}}function\nbv(a){if(typeof\na===\"number\"){if(0===a)return 0}else\nif(1===a[0])throw[0,bw,c2];return 1}function\naM(a){return d(f[32],bx,a)}function\nbx(a){switch(a[0]){case\n0:return aM(a[2]);case\n1:throw[0,bw,c3];default:return bv(a[2])}}function\nO(a,c){if(aM(a)){var\ne=b(c,0);return d(m[37],a,e)}return a}function\nj(c,b,a){var\ne=d(t[C],c,b);return d(t[104],e,a)}function\nc4(a,e,c,b){return j(e,a,function(e){return A(function(f){if(1-d(b,e,c))an([0,[1,a],c5]);return[0,[2,[0,[1,a],c6],c7],0]})})}function\nap(a){return[0,[2,[0,[1,a],c8],c9],0]}function\nby(c,b,a){if(0===b[0]){if(0===a[0])return d(c,b[1],a[1])}else\nif(1===a[0])return aZ(b[1],a[1]);return 0}function\nbz(c,a){return 0===a[0]?[0,c_,[0,[2,b(c,a[1])],0]]:[0,c$,[0,[2,b(ao[1],a[1])],0]]}function\nbA(c,a){return 0===a[0]?[0,da,[0,[2,b(c,a[1])],0]]:[0,db,[0,[2,b(ao[1],a[1])],0]]}function\naq(a){return[0,[1,a],dc]}function\nX(j,e,i,h,g,a,c){if(aZ(a,[1,y[1]]))throw y[1];var\nf=1-by(j,a,c);if(f){var\nk=bA(e,c),l=[0,0,bz(e,a)],n=[0,dd,[0,0,[0,[1,b(h,g)],l]]],o=d(m[37],n,k);return an(d(m[37],i,o))}return f}function\nde(a,k,i,h,g,e,c){return j(k,a,function(j){return A(function(l){function\nk(c){function\nd(a){return b(j,c)}var\nf=b(t[82],d);function\nk(a){return b(i,c)}var\nl=b(t[82],k);function\nm(d){return x(a,[0,b(h,c),0])}var\nn=0;function\no(a){return M(m,a)}return X(e,g,aq(a),o,n,f,l)}d(f[17],k,c);return ap(a)})})}function\ndf(a,e,l,k,i,h,g,c){return j(e,a,function(j){return A(function(m){function\ne(f){var\nc=f[2],e=f[1];function\nm(a){return d(j,e,c)}var\nn=b(t[82],m);function\no(a){return d(l,e,c)}var\np=b(t[82],o);function\nq(f){var\nd=[0,b(i,c),0];return x(a,[0,b(k,e),d])}var\nr=0;function\ns(a){return M(q,a)}return X(g,h,aq(a),s,r,n,p)}d(f[17],e,c);return ap(a)})})}function\ndg(a,e,n,m,k,i,h,g,c){return j(e,a,function(j){return A(function(o){function\ne(c){var\nd=c[3],e=c[2],f=c[1];function\no(a){return l(j,f,e,d)}var\np=b(t[82],o);function\nq(a){return l(n,f,e,d)}var\nr=b(t[82],q);function\ns(h){var\nc=[0,b(i,d),0],g=[0,b(k,e),c];return x(a,[0,b(m,f),g])}var\nu=0;function\nv(a){return M(s,a)}return X(g,h,aq(a),v,u,p,r)}d(f[17],e,c);return ap(a)})})}function\nY(c,a){var\ne=d(f[19],c,a);return b(f[14],e)}function\naN(a,c,b){return a<c?[0,a,aN(a+1|0,c,b)]:b}function\nar(b,a){return aN(b,a,0)}function\ndh(b,a){return Y(function(b){return Y(function(a){return[0,[0,b,a],0]},a)},b)}function\ndi(a,c){var\nb=ar(0,a+1|0);return Y(function(b){return d(c,b,a-b|0)},b)}function\ndj(b,a){return Y(b,ar(0,a+1|0))}function\nbC(a){var\nc=b(R[14],a);return d(K[4],dk,c)}function\nas(a){return g(bC(a))}z(H[1],dn,dm,dl,as);z(H[1],dr,dq,dp,D);function\nds(a){return d(K[4],dt,a)}function\ndu(a){var\nc=b(bD[2],a);return d(K[4],dv,c)}function\nbE(a){return a?dw:dx}function\naO(a){return g(bE(a))}z(H[1],dA,dz,dy,aO);function\naP(c,a){return a?bk(dB,[0,b(c,a[1]),0]):g(dC)}z(H[1],dF,dE,dD,aP);function\naQ(c,a){function\ne(a){var\nd=h(a4,v(1));return h(b(c,a),d)}var\nf=d(bF[15],e,a);return w(bh(S(b(bF[11],f))))}z(H[1],dI,dH,dG,aQ);function\nat(b,a){return bj(d(ay,b,a))}z(H[1],dL,dK,dJ,at);function\nau(a){return at(D,a)}z(H[1],dO,dN,dM,au);function\nbG(a){return M(au,a)}function\nav(a){return[1,a,dP]}function\nbH(b,a){return 0===a[0]?d(f[7],b,a[1]):a[1]}var\naR=[0,bH,function(a,c){var\nf=0;function\ne(f,c){if(typeof\nc===\"number\")switch(c){case\n0:return a[3];case\n1:var\ng=a[8],h=function(a){return a};return d(a[6],h,g);case\n2:return I(a[11]);case\n3:return I(a[12]);case\n4:return I(a[13]);case\n5:return I(a[14]);default:return I(a[15])}else\nswitch(c[0]){case\n0:var\ni=bH(f,c[1]);return b(a[1],i);case\n1:var\nj=c[2],k=function(a){return e([0,a,f],j)},l=e(f,c[1]);return d(a[2],l,k);case\n2:var\nm=e(f,c[2]),n=e(f,c[1]);return d(a[4],n,m);case\n3:var\no=e(f,c[1]);return b(a[5],o);case\n4:var\np=e(f,c[1]);return d(a[7],a[9],p);default:var\nq=b(a[10],c[1]),r=function(a){return a};return d(a[6],r,q)}}return e(f,c)}],aS=b(e[14],dQ);function\nbI(a){return[0,a]}function\nbJ(a){return[1,a]}var\nbK=b(e[14],dR),bL=aI(function(i,a){var\nc=d(e[13],bJ,bK),f=ar(0,a),g=b(e[14],f),h=d(e[13],bI,g);return d(e[7],h,c)});function\nbM(a){return[0,a]}function\nbN(a){return[1,a[1],a[2]]}function\nbO(a){return[2,a[1],a[2]]}function\nbP(a){return[3,a]}function\nbQ(a){return[4,a]}function\nbR(a){return[5,a]}var\ndS=b(aI(function(c,a){var\nf=d(e[13],bR,aS),g=b(e[4],1),h=b(c,a),i=d(e[13],bQ,h),j=b(c,a),k=d(e[13],bP,j),l=b(c,a),m=b(c,a),n=d(e[10],m,l),o=d(e[13],bO,n),p=b(c,a+1|0),q=b(c,a),r=d(e[10],q,p),s=d(e[13],bN,r),t=d(e[7],s,o),u=d(e[7],t,k),v=d(e[7],u,i),w=d(e[7],v,g),x=d(e[7],w,f),y=b(e[5],x),z=b(e[4],0),A=b(bL,a),B=d(e[13],bM,A),C=d(e[7],B,z);return d(e[7],C,y)}),0),aT=[0,aS,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR,dS,b(e[16],aS)],aU=b(e[14],dT),aV=b(e[14],dU),bS=b(e[14],dV);function\ndW(a){return[0,a,0]}var\ndX=d(e[13],dW,aU),aw=b(e[17],aU),dY=d(e[10],aw,aV),dZ=b(e[16],dY),d0=d(e[10],dZ,aw);function\nd1(a){var\nb=a[2],c=a[1];function\ne(a,b){return d(m[37],a[1],[0,a[2],b])}return l(f[26],e,c,b)}var\nd2=d(e[13],d1,d0),bT=d(e[7],aV,bS);function\nbU(a){return d(m[37],[0,40,a],d3)}function\nbV(a){var\nb=a[2];return d(m[37],a[1],[0,b[1],b[2]])}var\nZ=[0,aU,aV,bS,dX,aw,d2,bT,bU,bV,ak(function(a){var\nc=d(e[10],bT,a),f=d(e[10],a,c),g=d(e[13],bV,f),h=d(e[13],bU,a),i=d(e[7],h,g),j=b(e[5],i);return d(e[7],aw,j)})];function\naW(c,a){if(0<=a&&a<c){var\ne=(c-1|0)-a|0;if(26<=e)throw[0,F,d4];var\nf=b(bD[1],97+e|0);return d(R[1],1,f)}throw[0,F,d5]}function\nbW(b,a){return g(aW(b,a))}function\naX(b,a){return 0===a[0]?bW(b,a[1]):D(a[1])}function\nax(c,a){var\ne=0;if(typeof\na===\"number\")e=1;else\nswitch(a[0]){case\n1:var\nf=ax(c+1|0,a[2]),i=h(v(1),f),j=aW(c+1|0,0),k=b(ad(ek),j),l=h(v(1),k),d=h(w(h(aY(c,a[1]),l)),i);break;case\n4:var\nm=ax(c,a[1]),n=h(v(1),m),d=w(h(g(el),n));break;default:e=1}if(e)var\nd=aY(c,a);return w(d)}function\naY(c,a){if(typeof\na===\"number\"){if(1===a){var\nd=[0,g(ea),0];return x(ec,[0,g(eb),d])}}else\nswitch(a[0]){case\n0:return x(ed,[0,aX(c,a[1]),0]);case\n2:var\ne=[0,_(c,a[2]),0];return x(ee,[0,_(c,a[1]),e]);case\n3:return x(ef,[0,_(c,a[1]),0]);case\n5:var\nf=a[1],h=[0,bn(eh,[0,b(ad(eg),f),0]),0];return x(ej,[0,g(ei),h])}return _(c,a)}function\n_(b,a){if(typeof\na===\"number\")switch(a){case\n0:return g(d6);case\n2:return g(d7);case\n3:return g(d8);case\n4:return g(d9);case\n5:return g(d_);case\n6:return g(d$)}return ah(ax(b,a))}function\nbX(a){return _(0,a)}function\nem(a){return G(en,[0,a,0])}function\neo(b,a){return G(ep,[0,D(b),[0,a,0]])}function\nbY(d,a,c){var\ne=[0,as(d),0],f=[0,G(eq,[0,bX(c),e]),0],b=G(es,[0,G(er,[0,D(a),f]),0]);return 1<a?G(eu,[0,g(et),[0,b,0]]):b}var\nbZ=[0,aW,bW,aX,aX,aY,ax,bX,em,eo,bY,function(b,a){function\nc(c){return bY(b,a,c)}return function(a){return M(c,a)}}];function\n$(a){function\nd(d){function\ne(e){function\nf(f){function\ng(g){function\nh(h){function\ni(i){function\nk(k){function\nl(l){function\nm(m){function\no(c){return b(a,[0,d,e,f,g,h,i,k,l,m,c,0,0,0,0,0])}var\np=b(q[2],[0,[1,0,[0,[3,[0,ey,c[1][1]],0],c[1][1],0,0],[0,[3,[0,ex,c[1][1]],[0,[0,[3,[0,ew,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]],c[1][1],0,0]);return n(function(a){return j(p,ev,a)},o)}var\no=b(q[2],[0,[3,[0,eB,c[1][1]],[0,[0,[3,[0,eA,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]);return n(function(a){return j(o,ez,a)},m)}var\nm=b(q[2],[0,[3,[0,eE,c[1][1]],[0,[0,[3,[0,eD,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]);return n(function(a){return j(m,eC,a)},l)}var\nl=b(q[2],[0,[1,0,[0,[3,[0,eL,c[1][1]],[0,[0,[3,[0,eK,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0],[0,[1,0,[0,[3,[0,eJ,c[1][1]],[0,[0,[3,[0,eI,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0],[0,[3,[0,eH,c[1][1]],[0,[0,[3,[0,eG,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]],c[1][1],0,0]],c[1][1],0,0]);return n(function(a){return j(l,eF,a)},k)}var\nk=b(q[2],[0,[1,0,[0,[1,0,[0,[3,[0,eS,c[1][1]],0],c[1][1],0,0],[0,[3,[0,eR,c[1][1]],0],c[1][1],0,0]],c[1][1],0,0],[0,[1,0,[0,[3,[0,eQ,c[1][1]],[0,[0,[3,[0,eP,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0],[0,[3,[0,eO,c[1][1]],[0,[0,[3,[0,eN,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]],c[1][1],0,0]],c[1][1],0,0]);return n(function(a){return j(k,eM,a)},i)}var\ni=b(q[2],[0,[1,0,[0,[3,[0,eX,c[1][1]],[0,[0,[3,[0,eW,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0],[0,[3,[0,eV,c[1][1]],[0,[0,[3,[0,eU,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]],c[1][1],0,0]);return n(function(a){return j(i,eT,a)},h)}var\nh=b(q[2],[0,[1,0,[0,[3,[0,e4,c[1][1]],[0,[0,[3,[0,e3,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0],[0,[1,0,[0,[3,[0,e2,c[1][1]],[0,[0,[3,[0,e1,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0],[0,[3,[0,e0,c[1][1]],[0,[0,[3,[0,eZ,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]],c[1][1],0,0]],c[1][1],0,0]);return n(function(a){return j(h,eY,a)},g)}var\ng=b(q[2],[0,[3,[0,e7,c[1][1]],[0,[0,[3,[0,e6,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]);return n(function(a){return j(g,e5,a)},f)}var\nf=b(q[2],[0,[1,0,[0,[3,[0,fd,c[1][1]],[0,[0,[3,[0,fc,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0],[0,[1,0,[0,[1,0,[0,[3,[0,fb,c[1][1]],0],c[1][1],0,0],[0,[3,[0,fa,c[1][1]],[0,[0,[3,[0,e$,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]],c[1][1],0,0],[0,[3,[0,e_,c[1][1]],[0,[0,[3,[0,e9,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]],c[1][1],0,0]],c[1][1],0,0]);return n(function(a){return j(f,e8,a)},e)}var\ne=b(q[2],[0,[1,0,[0,[3,[0,fh,c[1][1]],0],c[1][1],0,0],[0,[3,[0,fg,c[1][1]],[0,[0,[3,[0,ff,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]],c[1][1],0,0]);return n(function(a){return j(e,fe,a)},d)}var\nb0=[0,r[1],r[2],r[3],r[4],r[5],r[6],r[8],r[10],r[11],r[13],[0,r[16]],[0,r[20]],[0,r[21]],[0,r[25]],[0,r[27]]];function\naa(h,c,a){function\ne(i){function\nc(a){var\nc=bo(i),j=d(aR[2],b0,a),k=d(y[4],j,c),l=b(y[2][12],k),e=d(f[56],b9,l),g=b(f[1],e)+1|0,m=[0,e];function\nn(l){var\ne=d(aR[2],h,a),i=d(y[4],e,c),j=d(y[2][7],g,i),k=b(y[2][12],j);return d(f[56],b9,k)}var\no=b(t[82],n);return X(aZ,bG,bB,d(bZ[11],c,g),a,o,m)}return d(f[17],c,a)}d(f[17],e,c);var\ng=b(f[1],c),i=b(f[1],a),j=l(K[4],fi,i,g);return[0,d(fj[8],1,j),0]}function\nb1(a){return W(fk,$(function(a){return A(function(c){var\nb=l(e[18],C,4,aT[13]);return aa(a,b,l(e[18],1000,3,aT[12]))})}))}function\nb2(a){return W(fw,$(function(a){function\nf(f){function\ng(g){function\nh(c){var\nh=[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],[0,f],[0,g],[0,c],a[14],a[15]];return A(function(r){var\nc=b(e[14],fl),f=b(e[16],c),g=l(e[18],C,4,f),i=l(e[18],C,4,Z[5]),j=d(m[37],i,g),k=l(e[18],C,4,Z[4]),n=d(m[37],k,j);function\na(a){return[0,av(a),[0,a,0]]}var\no=a(3),p=d(m[37],o,fm),q=a(2);return aa(h,n,d(m[37],q,p))})}var\ni=b(q[2],[0,[3,[0,fp,c[1][1]],[0,[0,[3,[0,fo,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]);return n(function(a){return j(i,fn,a)},h)}var\nh=b(q[2],[0,[3,[0,fs,c[1][1]],[0,[0,[3,[0,fr,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]);return n(function(a){return j(h,fq,a)},g)}var\ng=b(q[2],[0,[3,[0,fv,c[1][1]],[0,[0,[3,[0,fu,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]);return n(function(a){return j(g,ft,a)},f)}))}function\nb3(a){return W(fB,$(function(a){function\nf(c){var\nf=[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],[0,c],a[15]];return A(function(k){var\na=b(e[14],fx),c=b(e[16],a),g=l(e[18],C,4,c),h=l(e[18],C,4,Z[6]),i=d(m[37],h,g),j=[0,av(5),[0,5,0]];return aa(f,i,d(m[37],j,0))})}var\ng=b(q[2],[0,[3,[0,fA,c[1][1]],[0,[0,[3,[0,fz,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]);return n(function(a){return j(g,fy,a)},f)}))}function\nb4(a){return W(fG,$(function(a){function\nf(c){var\nf=[0,a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],[0,c]];return A(function(k){var\na=b(e[14],fC),c=b(e[16],a),g=l(e[18],C,4,c),h=l(e[18],C,4,Z[10]),i=d(m[37],h,g),j=[0,av(6),[0,6,0]];return aa(f,i,d(m[37],j,0))})}var\ng=b(q[2],[0,[3,[0,fF,c[1][1]],[0,[0,[3,[0,fE,c[1][1]],0],c[1][1],0,0],0]],c[1][1],0,0]);return n(function(a){return j(g,fD,a)},f)}))}function\nb5(b){function\na(a){return 0}return O(O(O(O(O(0,b1),b2),b3),b4),a)}var\nfH=l(t[26],0,t[109][2],b5);b(t[1],fH);s.caml_register_global(190,[0,cr,ay,n,I,J,az,ct,Q,ac,a2,aA,a3,g,ad,aB,ae,a4,a5,a6,a7,af,a8,a9,v,h,a_,w,a$,aC,aD,bb,aE,S,bc,bd,be,bf,D,ag,ah,bg,bh,bi,bj,bk,bl,bm,x,bn,G,M,bo,p,ak,aH,br,aI,e,aL,W,an,cZ,A,bv,bx,aM,O,j,c4,ap,by,bz,bA,bB,aq,X,de,df,dg,Y,aN,ar,dh,di,dj,bC,as,as,D,D,ds,du,bE,aO,aO,aP,aP,aQ,aQ,at,at,au,au,bG,av,aR,aT,Z,bZ,$,b0,aa,b1,b2,b3,b4,b5],E);return fJ}if(typeof\nmodule===\"object\"&&module.exports)module[\"exports\"]=dynload;\n"
      }
    },
    "max-score": 4
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Implementing Nondeterminism with Continuations",
    "stars": 3
  },
  {
    "id": "nondet_monad_cont",
    "prelude": "(* The module [Seq] is standard as of OCaml 4.07. *)\n\nmodule Seq = struct\n\n  type 'a t = unit -> 'a node\n\n  and +'a node =\n  | Nil\n  | Cons of 'a * 'a t\n\n  let nil =\n    fun () -> Nil\n\n  let cons x xs =\n    fun () -> Cons (x, xs)\n\n  let singleton x =\n    cons x nil\n\n  let rec map (f : 'a -> 'b) (xs : 'a t) : 'b t =\n    fun () ->\n      match xs() with\n      | Nil ->\n          Nil\n      | Cons (x, xs) ->\n          Cons (f x, map f xs)\n\n  let rec concat (xs : 'a t) (ys : 'a t) : 'a t =\n    fun () ->\n      match xs() with\n      | Nil ->\n          ys()\n      | Cons (x, xs) ->\n          Cons (x, concat xs ys)\n\n  let rec flatten (xss : 'a t t) : 'a t =\n    fun () ->\n      match xss() with\n      | Nil ->\n          Nil\n      | Cons (xs, xss) ->\n          concat xs (flatten xss) ()\n\n  let rec take n (xs : 'a t) : 'a t =\n    if n = 0 then\n      nil\n    else\n      fun () ->\n        match xs() with\n        | Nil ->\n            Nil\n        | Cons (x, xs) ->\n            Cons (x, take (n-1) xs)\n\n  let head (xs : 'a t) : 'a option =\n    match xs() with\n    | Nil ->\n        None\n    | Cons (x, _) ->\n        Some x\n\n  let rec of_list (xs : 'a list) : 'a t =\n    fun () ->\n      match xs with\n      | [] ->\n          Nil\n      | x :: xs ->\n          Cons (x, of_list xs)\n\n  (* A word of warning: [to_list] does not terminate if it is applied\n     to an infinite sequence. Furthermore, this version of [to_list]\n     is not tail-recursive and could exhaust the stack space if it was\n     applied to a long sequence. *)\n\n  let rec to_list (xs : 'a t) : 'a list =\n    match xs() with\n    | Nil ->\n        []\n    | Cons (x, xs) ->\n        x :: to_list xs\n\nend\n\n(* A failure continuation takes no argument and returns a final answer. *)\n\ntype 'answer failure =\n  unit -> 'answer\n\n(* A success continuation takes one argument (a result) and returns a final\n   answer. *)\n\ntype ('a, 'answer) success =\n  'a -> 'answer failure -> 'answer\n\n(* A nondeterministic computation produces a sequence of results.\n   It is represented (in this implementation) as a function [compute]\n   which accepts a success continuation [s] and a failure continuation [f].\n   It is polymorphic in the answer type of these continuations. *)\n\n(* The OCaml annotation [@@unboxed] improves efficiency, but otherwise\n   has no impact. *)\n\ntype 'a m = {\n  compute: 'answer . ('a, 'answer) success -> 'answer failure -> 'answer\n} [@@unboxed]\n\n(* In the implementation of [delay], the function call [m()] takes place\n   only when [compute] is invoked -- not right now. *)\n\nlet delay (m : unit -> 'a m) : 'a m =\n  let compute s f = (m()).compute s f in\n  { compute }\n\n(* The effect of executing the computation [tick m] is to first increment the\n   global counter [work], then execute the computation [m]. *)\n\n(* The grading code uses these operations in order to check that computations\n   are executed on demand, that is, as late as possible. *)\n\nlet work =\n  ref 0\n\nlet reset() =\n  work := 0\n\nlet tick (m : 'a m) : 'a m =\n  delay (fun () ->\n    work := !work + 1;\n    m\n  )\n\nlet snapshot (x : 'a) : 'a * int =\n  (x, !work)\n",
    "template": "let return (x : 'a) : 'a m =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet (>>=) (m1 : 'a m) (m2 : 'a -> 'b m) : 'b m =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet fail : 'a m =\n  (* TO DO: Define this constant. (Delete the whole line.) *)\n  delay (fun () -> raise TODO)\n\nlet choose (m1 : 'a m) (m2 : 'a m) : 'a m =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet sols (m : 'a m) : 'a Seq.t =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet reflect (o : unit -> ('a * 'a m) option) : 'a m =\n  delay (fun () ->\n    match o() with\n    | None ->\n        (* TO DO: Complete this definition. *)\n        raise TODO\n    | Some (x, m) ->\n        (* TO DO: Complete this definition. *)\n        raise TODO\n  )\n\nlet msplit (m : 'a m) : unit -> ('a * 'a m) option =\n  fun () ->\n    m.compute\n      (* TO DO: Complete this definition. *)\n      (fun x f -> raise TODO)\n      (fun  () -> raise TODO)\n\nlet at_most_once (m : 'a m) : 'a m =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet rec interleave (m1 : 'a m) (m2 : 'a m) : 'a m =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet rec (>>-) (m1 : 'a m) (m2 : 'a -> 'b m) : 'b m =\n  (* TO DO: Define this function. *)\n  raise TODO\n",
    "descr": [
      [
        "",
        "<h1 id=\"Implementing-Nondeterminism-with-Continuations\">Implementing Nondeterminism with Continuations</h1>\n\n<p>In this exercise, we build an implementation of the nondeterminism\nmonad. This monad admits several possible implementations; the one\nthat we choose here is a continuation-based implementation where a\ncomputation receives two continuations, a <em>success continuation</em>\nand a <em>failure continuation</em>, which it invokes to indicate the\npresence or absence of more results.</p>\n<h2 id=\"The-Nondeterminism-Monad\">The Nondeterminism Monad</h2>\n\n<p>When searching for the solution of a problem, one must typically\nexplore multiple choices. If a series of choices lead to a failure\n(a dead end), then one must backtrack and explore another avenue.</p>\n<p>There are a number of ways in which nondeterminism and backtracking\ncan be implemented. Regardless of which implementation mechanism is\nchosen, it is desirable to hide it behind an abstraction barrier and\npresent the end user with <strong>a simple API for constructing an executing\nnondeterministic computations</strong>.</p>\n<p>This API is known as the <strong>nondeterminism monad</strong>. It offers the\nfollowing key elements:</p>\n<ul><li><p>A type <code>&#39;a m</code>, the type of computations that yield results of type\n <code>&#39;a</code>.</p>\n</li><li><p>A number of constructor functions for constructing computations,\n such as <code>fail: &#39;a m</code>, which represents failure, and <code>choose: &#39;a m\n  -&gt; &#39;a m -&gt; &#39;a m</code>, which expresses a nondeterministic choice\n between two computations.</p>\n</li><li><p>A single observation function, <code>sols: &#39;a m -&gt; &#39;a Seq.t</code>, which\n converts a computation to a sequence of results, thereby allowing\n the user to execute this computation and observe its results.\n (More information on the module <code>Seq</code> is given further on.)\n The name <code>sols</code> stands for <code>solutions</code>.</p>\n</li></ul>\n\n<p>A monad can be thought of as a <strong>mini-programming language</strong> where\ncomputations are first-class citizens: we have a type of\ncomputations, ways of building computations, and a way of executing\ncomputations.</p>\n<p>A computation in the nondeterminism monad can produce zero, one, or\nmore results. Indeed, a computation that fails produces zero\nresult. A computation that succeeds normally produces one result.\nA computation that uses <code>choose</code> can produce more than one result.\nIt is in fact possible to construct computations that produce an\ninfinite number of results!</p>\n<p>Thus, a useful way to think of a computation is as <strong>a sequence of\nresults</strong>.</p>\n<p>Because of this remark, one might be tempted to define the type <code>&#39;a\nm</code> as a synonym for <code>&#39;a Seq.t</code>, the type of sequences of values of\ntype <code>&#39;a</code>. However, although it is possible to represent a\ncomputation internally as a sequence (and we will do so in this\nexercise), this is not necessarily the best implementation\ntechnique. Thus, we prefer to make the API more flexible by viewing\n<code>&#39;a m</code> as an abstract type and by offering an observation function,\n<code>sols</code>, which converts a computation to a sequence.</p>\n<h2 id=\"The-Nondeterminism-Monad-39-s-API\">The Nondeterminism Monad&#39;s API</h2>\n\n<p>The signature, or API, of the nondeterminism monad is as follows:</p>\n<pre><code>  (* Type. *)\n  type &#39;a m\n\n  (* Constructor functions. *)\n  val return: &#39;a -&gt; &#39;a m\n  val (&gt;&gt;=): &#39;a m -&gt; (&#39;a -&gt; &#39;b m) -&gt; &#39;b m\n  val fail: &#39;a m\n  val choose: &#39;a m -&gt; &#39;a m -&gt; &#39;a m\n  val delay: (unit -&gt; &#39;a m) -&gt; &#39;a m\n  val at_most_once: &#39;a m -&gt; &#39;a m\n  val interleave: &#39;a m -&gt; &#39;a m -&gt; &#39;a m\n  val (&gt;&gt;-): &#39;a m -&gt; (&#39;a -&gt; &#39;b m) -&gt; &#39;b m\n\n  (* Observation function. *)\n  val sols: &#39;a m -&gt; &#39;a Seq.t</code></pre>\n\n<p>As explained above, a value of type <code>&#39;a m</code> is <strong>a description of a\ncomputation</strong>, which, once executed, produces a sequence of results\nof type <code>&#39;a</code>.</p>\n<p>To execute a computation <code>m</code>, one must first convert it to a\nsequence of type <code>&#39;a Seq.t</code>, whose elements can then be demanded,\none by one.\nThis conversion is performed by the observation function <code>sols</code>.</p>\n<p>The call <code>sols m</code> typically terminates in constant time; the actual\ncomputation described by <code>m</code> takes place only when the elements of\nthe sequence <code>sols m</code> are demanded, and only insofar as necessary to\nproduce the elements that are demanded. For instance, applying\n<code>Seq.head</code> to the sequence <code>sols m</code> forces the computation to\nproceed up to the point where it is able to produce its first\nresult.</p>\n<p>The constructor functions <code>return</code> and <code>(&gt;&gt;=)</code> exist in all monads.\n(They are also known as <code>return</code> and <code>bind</code>.) <code>return</code> constructs a\ntrivial computation, which does nothing but return a value,\nwhereas <code>(&gt;&gt;=)</code> constructs the sequential composition of two\ncomputations. Together, they allow constructing the sequential\ncomposition of an arbitrary number of computations.</p>\n<ul><li><p>The computation <code>return v</code> succeeds exactly once with the value\n <code>v</code>. In other words, the sequence of values that it produces is\n the singleton sequence composed of just <code>v</code>.</p>\n</li><li><p>The computation <code>m1 &gt;&gt;= m2</code> is the sequential composition of the\n computations <code>m1</code> and <code>m2</code>. This composition operator is\n asymmetric: whereas its first argument <code>m1</code> is a computation of\n type <code>&#39;a m</code>, its second argument <code>m2</code> is a function of type <code>a -&gt;\n  &#39;b m</code>. Every value <code>x</code> produced by <code>m1</code> is passed to <code>m2</code>,\n yielding a computation <code>m2 x</code>. The sequence of values produced by\n <code>m1 &gt;&gt;= m2</code> is the concatenation of the sequences of values\n produced by the computations <code>m2 x</code>, where <code>x</code> ranges over the\n values produced by <code>m1</code>.</p>\n</li></ul>\n\n<p>The constructor functions <code>fail</code> and <code>choose</code> are specific of the\nnondeterminism monad. <code>fail</code> can be thought of as a 0-ary\ndisjunction, whereas <code>choose</code> is a binary disjunction. Together,\nthey allow constructing the disjunction of an arbitrary number of\ncomputations.</p>\n<ul><li><p>The computation <code>fail</code> returns no result. In other words, it\n produces an empty sequence of values.</p>\n</li><li><p>The sequence of values produced by <code>choose m1 m2</code> is the\n concatenation of the sequences of values produced by <code>m1</code>\n and by <code>m2</code>.</p>\n</li></ul>\n\n<p>The constructor function <code>delay</code> is used to delay the construction\nof a computation until the moment when this computation must be\nexecuted. Indeed, a difficulty that arises in a strict programming\nlanguage, such as OCaml, is that the arguments passed to constructor\nfunctions, such as <code>return</code> and <code>choose</code>, are evaluated immediately,\nat construction time. For instance, when one writes <code>choose e1 e2</code>,\nboth of the OCaml expressions <code>e1</code> and <code>e2</code> are evaluated before\n<code>choose</code> is invoked. If the evaluation of <code>e2</code> performs nontrivial\nwork, then this work arguably takes place too early: indeed, there\nshould be no need to evaluate <code>e2</code> until all of the values produced\nby <code>e1</code> have been demanded. To remedy this, one may write <code>choose e1\n(delay (fun () -&gt; e2))</code>. There, the expression <code>e2</code> is placed in the\nbody of an anonymous function, so <code>e2</code> is not evaluated immediately.\nThis anonymous function, whose type is <code>unit -&gt; &#39;a m</code>,\nis converted by <code>delay</code> to a computation of type <code>&#39;a m</code>.\nThis conversion requires no serious work;\nit is performed in constant time.\nAn intuitive reason why this is possible is that the type <code>&#39;a m</code>\nrepresents a <em>suspended</em> computation already,\nso the type <code>unit -&gt; &#39;a m</code> represents a <em>suspended suspended</em>\ncomputation, which is essentially the same thing; these types\nare interconvertible at no cost.</p>\n<p>The computations <code>e</code> and <code>delay (fun () -&gt; e)</code> produce the same\nsequence of results. The only difference between them is the time at\nwhich the evaluation of <code>e</code> takes place: either immediately, or only\nwhen the first result is demanded.</p>\n<p>It is worth noting that in a lazy language, such as Haskell, there\nis no need for <code>delay</code>. In such a language, when one writes <code>choose\ne1 e2</code>, the expressions <code>e1</code> and <code>e2</code> are <em>not</em> evaluated\nimmediately: they are evaluated only when their value is demanded.\nThus, the fact that <code>e2</code> need not be evaluated until all of the\nvalues produced by <code>e1</code> have been demanded goes without saying. The\nfact that there is no need for explicit uses of <code>delay</code> is arguably\na strength of lazy languages. At the same time, the fact that it is\nnot obvious where laziness plays a crucial role is arguably a\nweakness of lazy languages. In OCaml, in contrast, the explicit use\nof <code>delay</code> can be verbose, but helps understand what is going on.</p>\n<p>The constructor function <code>at_most_once</code> constructs a computation\nthat succeeds at most once. If <code>m</code> fails, then <code>at_most_once m</code>\nfails as well. If <code>m</code> produces a result <code>x</code>, possibly followed with\nmore results, then <code>at_most_once m</code> produces just the result <code>x</code>,\nand no more. This combinator can be used to commit to a result and\nprevent any other choices from being explored. In other words, it\nlimits the amount of backtracking that takes place.</p>\n<p>The constructor function <code>interleave</code> has the same type as <code>choose</code>.\nIt is a <em>fair disjunction</em> operator. An ordinary disjunction <code>choose\nm1 m2</code> gives priority to its left branch: it first lets <code>e1</code> produce\nas many results as it wishes, then gives control to <code>e2</code>. This can\nbe problematic: if <code>e1</code> produces a large number of results, then\n<code>e2</code> is tried very late. At an extreme, if <code>e1</code> produces an infinite\nnumber of results, then <code>e2</code> is never tried. For instance, supposing\nthat <code>evens</code> produces the infinite sequence <code>0, 2, 4, ...</code> and\n<code>odds</code> produces the infinite sequence <code>1, 3, 5, ...</code>,\nthe disjunction <code>choose evens odds</code> is equivalent to just <code>evens</code>,\nwhich seems counter-intuitive and undesirable. In contrast,\n<code>interleave</code> is defined in such a way that <code>interleave evens odd</code>\nproduces the infinite sequence <code>0, 1, 2, 3, 4, 5, ...</code>.\nIt is <em>fair</em> in the sense that each branch in turn is allowed\nto produce a result.</p>\n<p>The constructor function <code>(&gt;&gt;-)</code> has the same type as <code>(&gt;&gt;=)</code>.\nIt is a <em>fair sequencing</em> operator.\nIndeed, a problem with ordinary sequencing <code>(&gt;&gt;=)</code> is that\nit gives rise to ordinary (unfair) disjunctions.\nTo see this, suppose that the left-hand argument of <code>(&gt;&gt;=)</code>\nis a computation that produces <code>x</code> as its first result,\nfollowed with a computation <code>m1</code> that may produce more results.\nThus, this left-hand argument is equivalent to\n<code>choose (return x) m1</code>.\nWhen we sequentially compose it with a computation <code>m2</code>,\nwe obtain\n<code>(choose (return x) m1) &gt;&gt;= m2</code>,\nwhich is equivalent to\n<code>choose (return x &gt;&gt;= m2) (m1 &gt;&gt;= m2)</code>,\nwhich itself is the same as\n<code>choose (m2 x) (m1 &gt;&gt;= m2)</code>.\nWe are faced with an ordinary (unfair) disjunction.\nThe problem, again, is that if <code>m2 x</code> produces an\ninfinite number of results, then <code>m1 &gt;&gt;= m2</code>\nis never executed.\nTo remedy this problem,\nthe fair sequencing operator <code>(&gt;&gt;-)</code>\nis defined in such a way that\n<code>choose (return x) m1 &gt;&gt;- m2</code>\nis equivalent to\n<code>interleave (m2 x) (m1 &gt;&gt;- m2)</code>.\nThus, it gives rise to a fair disjunction.</p>\n<h2 id=\"The-Seq-API\">The <code>Seq</code> API</h2>\n\n<p>The type of <strong>on-demand sequences</strong> is defined in a module named <code>Seq</code>.\nBeginning with version 4.07,\nthis module is part of OCaml&#39;s standard library.</p>\n<pre><code>module Seq : sig\n\n  type &#39;a t = unit -&gt; &#39;a node\n\n  and +&#39;a node =\n  | Nil\n  | Cons of &#39;a * &#39;a t\n\n  val nil : &#39;a t\n  val cons: &#39;a -&gt; &#39;a t -&gt; &#39;a t\n  val singleton: &#39;a -&gt; &#39;a t\n\n  val map: (&#39;a -&gt; &#39;b) -&gt; &#39;a t -&gt; &#39;b t\n  val concat: &#39;a t -&gt; &#39;a t -&gt; &#39;a t\n  val flatten: &#39;a t t -&gt; &#39;a t\n\n  val take: int -&gt; &#39;a t -&gt; &#39;a t\n\n  val head: &#39;a t -&gt; &#39;a option\n\n  val of_list: &#39;a list -&gt; &#39;a t\n  val to_list: &#39;a t -&gt; &#39;a list\n\nend</code></pre>\n\n<p>This data type is closely related to the algebraic data type of lists.\nIndeed, if instead of <code>unit -&gt; &#39;a node</code> one had written just <code>&#39;a node</code>,\nthen this data type would have been isomorphic to the type of lists.</p>\n<p>The presence of <code>unit -&gt; ...</code> indicates that a sequence is in fact a function.\nCalling this function, by applying it to the value <code>()</code>, amounts to requesting\nthe head of the sequence. This head can be either <code>Nil</code>, which means that the\nsequence is empty, or <code>Cons (x, xs)</code>, which means that the first element of\nthe sequence is <code>x</code> and the remaining elements form another sequence <code>xs</code>. It\nis worth noting that <code>xs</code> is itself a function, so the elements of the\nsequence <code>xs</code> need not be explicitly computed until <code>xs</code> is applied.</p>\n<p>Sequences are closely related to <em>iterators</em> in object-oriented languages,\nsuch as C++ and Java. Yet, sequences are much simpler than iterators, for\ntwo reasons:</p>\n<ul><li><p>they involve no mutable state;</p>\n</li><li><p>they are just as easy to construct and to use as ordinary lists.</p>\n</li></ul>\n\n<p>The functions <code>nil</code>, <code>cons</code>, and <code>singleton</code> are constructor functions.</p>\n<p>The functions <code>map</code>, <code>concat</code>, <code>flatten</code> are analogues for sequences\nof the standard list functions <code>List.map</code>, <code>(@)</code>, and\n<code>List.flatten</code>.</p>\n<p>The function <code>Seq.take</code> truncates a sequence at a certain length:\n<code>Seq.take n xs</code> is a sequence that begins like <code>xs</code> but has at most\n<code>n</code> elements.</p>\n<p>The function <code>Seq.head</code> demands the first element of a sequence. If\nthe sequence begins with an element <code>x</code>, then <code>Some x</code> is returned;\notherwise, <code>None</code> is returned. This forces enough computation to\ntake place so as to be able to produce the first element of the\nsequence.</p>\n<p>The functions <code>Seq.of_list</code> and <code>Seq.to_list</code> convert between lists\nand sequences, both ways. One must keep in mind that applying\n<code>Seq.to_list</code> to a sequence <code>xs</code> causes all of its elements to be\ndemanded: that is, it forces all of the suspended computations to\ntake place. In particular, if <code>xs</code> is an infinite sequence, then\n<code>Seq.to_list xs</code> does not terminate.</p>\n<h2 id=\"Implementing-the-Nondeterminism-Monad\">Implementing the Nondeterminism Monad</h2>\n\n<p>In this exercise, we <strong>implement</strong> the nondeterminism monad by representing a\ncomputation as a function that receives two <strong>continuations</strong> as arguments: a\nsuccess continuation and a failure continuation. The idea is, a computation\nthat wishes to produce a result does so by invoking its success continuation;\na computation that wishes to indicate the absence of a result does so by\ninvoking its failure continuation.</p>\n<p>A <strong>failure continuation</strong> takes no argument. Thus, its argument type is\n<code>unit</code>. Its result type does not concern us at this point; it is chosen at a\nhigher level by whoever runs the whole process. We use a type variable\n<code>&#39;answer</code> for this type, and we make it a parameter. Thus, the type of a\nfailure continuation, <code>&#39;answer failure</code>, is as follows:</p>\n<pre><code>  type &#39;answer failure =\n    unit -&gt; &#39;answer</code></pre>\n\n<p>A <strong>success continuation</strong> takes two arguments. Its first argument is the\nresult <code>x</code> that we wish to produce now. Its second argument is a failure\ncontinuation that the outside world can use if they are not happy with <code>x</code>: by\ninvoking this failure continuation, they give control back to us, which allows\nus to continue and possibly produce another result (by invoking our success\ncontinuation again!) or fail (by invoking our failure continuation). The\nresult type of a success continuation is again <code>&#39;answer</code>. Thus, the type of\na success continuation, <code>(&#39;a, &#39;answer) success</code>, is as follows:</p>\n<pre><code>  type (&#39;a, &#39;answer) success =\n    &#39;a -&gt; &#39;answer failure -&gt; &#39;answer</code></pre>\n\n<p>It is important to meditate on the previous paragraph, which tells us that\nfailure continuations are used in two (dual) ways. We <em>call a failure\ncontinuation</em> that was given to us when we wish to tell the outside world that\nwe cannot produce another result. We <em>build a failure continuation</em> and pass\nit to the outside world when we are about to produce a result and we wish to\ngive the outside world the ability to reject this result.</p>\n<p>A <strong>computation</strong> is a function that receives a success continuation and a\nfailure continuation and invokes one of them, thereby (eventually) returning\nan answer. A computation does not care what the answer type is: thus, it is\npolymorphic in the type variable <code>&#39;answer</code>. This is encoded in OCaml via the\nfollowing (unfortunately somewhat verbose) type definition:</p>\n<pre><code>  type &#39;a m = {\n    compute:\n      &#39;answer .\n        (&#39;a, &#39;answer) success -&gt; &#39;answer failure -&gt; &#39;answer\n  }</code></pre>\n\n<p>This type definition states that a computation is a record type with just one\nfield, named <code>compute</code>, which contains a polymorphic function of one success\ncontinuation and one failure continuation to an answer. (We have to introduce\na record of one field because this is the only way in OCaml of manipulating\nfirst-class polymorphic functions.)</p>\n<p>It is worth noting that, because a <code>compute</code> function is polymorphic in\n<code>&#39;answer</code>, it cannot return without invoking either its success continuation\nor failure continuation <em>at least once</em>.</p>\n<p>Furthermore, although this is not expressed in its type, a <code>compute</code> function\nmay invoke its failure continuation <em>at most once</em>. Indeed, one can think of\ninvoking a failure continuation as returning <code>Nil</code>, and in a sequence of\nresults, there is at most one <code>Nil</code> constructor. (There is none in an infinite\nsequence.) This analogy also explains why a failure continuation takes no\nargument: this is because <code>Nil</code> carries no argument.</p>\n<p>A <code>compute</code> function may invoke its success continuation <em>zero, one or more\ntimes</em>. Indeed, one can think of invoking a success continuation as returning\n<code>Cons</code>, and in a sequence of results, there can be any number of <code>Cons</code>\nconstructors. This analogy also explains why a success continuation takes two\narguments, namely a result and a (failure) continuation: this is because\n<code>Cons</code> carries two arguments, namely a result and a sequence of remaining\nresults.</p>\n<p>The analogy between failure and success continuations, on the one hand,\nand the data constructors <code>Nil</code> and <code>Cons</code>, on the other hand,\nis no accident. The type <code>&#39;a m</code> above is in fact the\n<a href='https://en.wikipedia.org/wiki/Church_encoding'>Church encoding</a>\nof the type <code>&#39;a Seq.t</code> of sequences.</p>\n<p><strong>Question 1.</strong> Implement the four constructor functions\n<code>return</code>, <code>(&gt;&gt;=)</code>, <code>fail</code>, and <code>choose</code>. Implement the\nobservation function <code>sols</code>.</p>\n<p><em>Hint.</em> Although this question requires a lot of care,\nthe solution is simple: each of these functions can be\nimplemented in one line.</p>\n<p><em>Note.</em> The automated grading system first tests whether your code\nis functionally correct. To do so, it builds a computation using the\nfour constructor functions, converts it to a sequence via <code>sols</code>,\nand tests whether this produces the expected sequence of results.\nThen, it tests whether your code is lazy, that is, whether each\nresult is computed as late as possible. To do so, it uses a\nconstructor function <code>tick: &#39;a m -&gt; &#39;a m</code> whose effect is as\nfollows: the computation <code>tick m</code> produces the same sequence of\nresults as the computation <code>m</code>, and, when executed, increments a\nglobal counter named <code>work</code>. Thus, by executing computations that\ncontain <code>tick</code>s, the automated grading system can tell when\ncomputations are executed. For instance, demanding just the first\nresult of the computation\n<code>choose (tick (return 0)) (tick (return 1))</code> should cause <code>work</code> to\nbe incremented just once, not twice.</p>\n<p>Before attacking Questions 2-4, we must introduce a couple of auxiliary\nfunctions: <code>reflect</code> and <code>msplit</code>.</p>\n<p>The need for <code>msplit</code> arises from the following remark. When executed, a\ncomputation of type <code>&#39;a m</code> produces a sequence of results. Such a sequence\nmust be either empty or nonempty, and in the latter case, it must have a first\nelement and a remainder. If a computation <em>was</em> just a sequence (that is, if\nthe type <code>&#39;a m</code> was a synonym for <code>&#39;a Seq.t</code>), then we could distinguish these\ntwo situations just by performing a case analysis.</p>\n<p>Because we have defined the type <code>&#39;a m</code> in a different way, a direct case\nanalysis is impossible. Instead, the idea is to define a function <code>msplit</code>\nthat <em>converts</em> from the type <code>&#39;a m</code> to the type <code>unit -&gt; (&#39;a * &#39;a m) option</code>.\nThis opens the door to a case analysis. In short, <code>msplit</code> allows us to\nperform case analysis on a computation <em>as if</em> it was a sequence, even though\nits internal representation is different.</p>\n<p>The function <code>reflect</code> performs this conversion in the reverse direction:\nit converts a function of type <code>unit -&gt; (&#39;a * &#39;a m) option</code>\nto a computation of type <code>&#39;a m</code>. Somewhat surprisingly, the\nneed for <code>reflect</code> arises in the implementation of <code>msplit</code> itself,\nso we implement <code>reflect</code> first, followed with <code>msplit</code>.</p>\n<p><strong>Question X.</strong> (Not graded.)\nComplete the implementation of the auxiliary functions <code>reflect</code> and <code>msplit.</code></p>\n<p><em>Note.</em> The function <code>msplit</code> and <code>sols</code> are closely related. Indeed, they\nboth allow performing case analysis on a computation and distinguishing\nwhether it fails or produces at least one result. <code>msplit</code> and <code>sols</code> differ\nin their return types: <code>msplit</code> produces an option, whereas <code>sols</code> produces a\nsequence. It is in fact possible to use <code>msplit</code> in the definition of <code>sols</code>;\nwe have preferred to ask for a direct definition of <code>sols</code> above.</p>\n<p><strong>Question 2.</strong> Implement the constructor function <code>at_most_once</code>.</p>\n<p><em>Hint.</em> Use <code>msplit</code> to determine if the computation at hand fails or produces\nat least one result. In the first case, recall that <code>at_most_once fail</code> is\nsupposed to behave like <code>fail</code>. In the second case, recall that\n<code>at_most_once (choose (return x) m)</code> is supposed to behave like\n<code>return x</code>.</p>\n<p><em>Hint.</em> Use <code>delay</code> to ensure that the case analysis is performed when\nthe computation <code>at_most_once m</code> is <em>executed</em>, not when it is <em>built</em>.</p>\n<p><strong>Question 3.</strong> Implement the constructor function <code>interleave</code>.</p>\n<p><em>Hint.</em> Again, use <code>delay</code> and <code>msplit</code> in an appropriate manner.\nThen, ask yourself how <code>interleave fail m2</code> is supposed to behave,\nand how <code>interleave (choose (return x1) m1) m2</code> is supposed\nto behave.</p>\n<p><strong>Question 4.</strong> Implement the constructor function <code>(&gt;&gt;-)</code>.</p>\n<p><em>Hint.</em> Again, use <code>delay</code> and <code>msplit</code> in an appropriate manner.\nThen, ask yourself how <code>fail &gt;&gt;- m2</code> is supposed to behave,\nand how <code>(choose (return x1) m1) &gt;&gt;- m2</code> is supposed\nto behave.</p>\n<h2 id=\"Notes\">Notes</h2>\n\n<p>This exercise is based on the paper\n<strong>&quot;Backtracking, Interleaving, and Terminating Monad Transformers&quot;</strong>\n<a href='http://okmij.org/ftp/papers/LogicT.pdf'>(Kiselyov, Shan, Friedman, and Sabry, 2005)</a>.\nOne of their key ideas is to propose the operation <code>msplit</code>,\nwhich offers a <em>view</em> of a computation as a sequence.\nBased on this operation, many operations, including <code>at_most_once</code>,\n<code>interleave</code> and <code>(&gt;&gt;-)</code> above, and more,\ncan be defined <em>outside</em> the abstraction barrier of the type <code>&#39;a m</code>.</p>\n<p>It is important to note that this paper uses Haskell, a lazy programming\nlanguage, where computations are suspended by default. Thus, where it uses\nlists, we cannot use OCaml lists; we must instead use OCaml sequences.\nFurthermore, we must sometimes be careful to explicitly delay computations:\nour <code>delay</code> constructor serves this purpose.</p>\n<p>The paper goes beyond us by implementing nondeterminism not just as a monad,\nbut as a <strong>monad transformer</strong>. Monad transformers can be composed. For\ninstance, by composing the nondeterminism monad transformer and the state\nmonad transformer, one can describe computations that involve both\nnondeterminism and mutable state.</p>\n<p>In this exercise, a nondeterministic computation is represented as a <code>compute</code>\nfunction, which expects a success continuation and a failure continuation as\narguments. We have noted above that these continuations are analogous to the\ndata constructors <code>Seq.Nil</code> and <code>Seq.Cons</code>. This is no accident: the type <code>&#39;a\nm</code> above is in fact the\n<a href='https://en.wikipedia.org/wiki/Church_encoding'>Church encoding</a>\nof the type <code>&#39;a Seq.t</code> of sequences.</p>\n<p>The continuation-based representation is more efficient than the\nsequence-based representation investigated in\n<a onclick=\"top.location='/exercises/nondet_monad_seq/';\" href=''>another exercise</a>.\nThis is evident in the implementation of <code>choose</code>,\nwhere there is no per-element cost.\nIn particular, the left-leaning computation\n<code>choose (choose (choose (... (choose 0 1) ...) (n-2)) (n-1)) n</code>\nis executed in time O(n).</p>\n<p>The continuation-based implementation could be criticized on the basis that it\nis rather mysterious. The three main components (failure\ncontinuations; success continuations; computations) are represented as\nfirst-class functions. The OCaml compiler represents these functions in the\nheap as closures. Collectively, these closures form a data structure, whose\nshape is unfortunately not evident. In a\n<a onclick=\"top.location='/exercises/nondet_monad_defun/';\" href=''>companion exercise</a>,\nwe investigate a <em>defunctionalized</em> version of this code,\nwhere failure continuations, success continuations, and computations\nare explicitly represented as data structures,\ndescribed by generalized algebraic data types.</p>\n"
      ]
    ],
    "prepare": "1L4jZ/SjSHmOQJM/LZsA",
    "test": "",
    "solution": "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",
    "max-score": 8,
    "depend": null,
    "dependencies": []
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Alpha-Beta Search",
    "stars": 3
  },
  {
    "id": "alpha_beta",
    "prelude": "(* The type of on-demand sequences. (As of OCaml 4.07, this type exists\n   in the standard library.) *)\n\nmodule Seq = struct\n\n  type 'a t = unit -> 'a node\n\n  and +'a node =\n  | Nil\n  | Cons of 'a * 'a t\n\n  let rec map (f : 'a -> 'b) (xs : 'a t) : 'b t =\n    fun () ->\n      match xs() with\n      | Nil ->\n          Nil\n      | Cons (x, xs) ->\n          Cons (f x, map f xs)\n\n  let rec filter (p : 'a -> bool) (xs : 'a t) : 'a t =\n    fun () ->\n      match xs() with\n      | Nil ->\n          Nil\n      | Cons (x, xs) ->\n          if p x then\n            Cons (x, filter p xs)\n          else\n            filter p xs ()\n\n  let rec of_list (xs : 'a list) : 'a t =\n    fun () ->\n      match xs with\n      | [] ->\n          Nil\n      | x :: xs ->\n          Cons (x, of_list xs)\n\n  let rec to_list (xs : 'a t) : 'a list =\n    match xs() with\n    | Nil ->\n        []\n    | Cons (x, xs) ->\n        x :: to_list xs\n\nend\n\n(* -------------------------------------------------------------------------- *)\n\n(* A value is an integer value that reflects the current player view (or\n   evaluation) of the current game configuration. In a zero-sum game, the\n   opponent's view is the opposite of the current player's view, and the\n   value 0 means that both players are even; in particular, in a situation\n   where no more moves can be played, the value 0 represents a draw. *)\n\ntype value =\n  int\n\n(* All of the values that we consider lie in the range [bottom] to [top],\n   inclusive. Note that [bottom] is the opposite of [top]. *)\n\nlet bottom, top =\n  -max_int, max_int\n\n(* We assume that, in every game configuration, a finite number of moves\n   are permitted, and that each of these moves can be identified with an\n   integer code. (A more realistic implementation would be parametric in\n   the type [move].) *)\n\ntype move =\n  int\n\n(* A game tree is either a leaf or not a leaf. A leaf [TLeaf v] means that the\n   game is over and that its value (in the eyes of the current player) is [v].\n   A nonleaf [TNonLeaf mts] means that the game is not over. In that case, at\n   least one move is permitted. The sequence [mts] is then a nonempty sequence\n   of pairs of a permitted move [m] and the subtree that corresponds to this\n   move. This sequence covers all of the permitted moves. *)\n\ntype tree =\n  | TLeaf of value\n  | TNonLeaf of offspring\n\nand offspring =\n  (move * tree) Seq.t\n\n(* -------------------------------------------------------------------------- *)\n\n(* [index] turns a list of things into a list of numbered things. *)\n\nlet rec index i (xs : 'a list) : (int * 'a) list =\n  match xs with\n  | [] ->\n      []\n  | x :: xs ->\n      (i, x) :: index (i+1) xs\n\nlet index xs =\n  index 0 xs\n\n(* The following functions offer facilities for building gamae trees. They may\n   appear in the messages produced by the automated grading system. *)\n\nlet leaf v =\n  TLeaf v\n\nlet nonleaf (ts : tree list) : tree =\n  TNonLeaf (Seq.of_list (index ts))\n    (* [index] is used to generate arbitrary distinct move numbers *)\n\n(* -------------------------------------------------------------------------- *)\n\n(* A notion of sense is used in the reference evaluator, that is, the first\n   function that we write in order to compute the value of a game tree. *)\n\ntype sense =\n  | Even\n  | Odd\n\nlet opposite sense : sense =\n  match sense with Even -> Odd | Odd -> Even\n\nlet interpret sense (v : value) : value =\n  match sense with Even -> v | Odd -> -v\n\nlet join sense : value -> value -> value =\n  match sense with Even -> max | Odd -> min\n\nlet unit sense : value =\n  interpret sense bottom\n\n(* -------------------------------------------------------------------------- *)\n\n(* The following notion of equivalence up to an [alpha, beta] window can be\n   used to specify the expected behavior of the Alpha-Beta algorithm. *)\n\nlet equivalent alpha beta v1 v2 =\n  v1 <= alpha && v2 <= alpha ||\n  v1 = v2 ||\n  beta <= v1 && beta <= v2\n",
    "template": "open Seq\n\n(* -------------------------------------------------------------------------- *)\n\n(* The size of a tree. *)\n\nlet rec size (t : tree) : int =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nand size_offspring (offspring : offspring) : int =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* -------------------------------------------------------------------------- *)\n\n(* The height of a tree. *)\n\nlet rec height (t : tree) : int =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nand height_offspring (offspring : offspring) : int =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* -------------------------------------------------------------------------- *)\n\n(* Evaluating a tree, with a sense parameter: Minimax. *)\n\nlet rec eval (sense : sense) (t : tree) : value =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nand eval_offspring (sense : sense) (offspring : offspring) : value =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* -------------------------------------------------------------------------- *)\n\n(* Evaluating a tree, without a sense parameter: Negamax. *)\n\nlet rec nval (t : tree) : value =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nand nval_offspring (offspring : offspring) =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* -------------------------------------------------------------------------- *)\n\n(* Evaluating a tree, in Negamax style, and looping over children in\n   a tail-recursive manner. *)\n\nlet rec ntval (t : tree) : value =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nand ntval_offspring (running_max : value) (offspring : offspring) : value =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* -------------------------------------------------------------------------- *)\n\n(* Evaluating a tree, using the Alpha-Beta algorithm. *)\n\nlet rec bval (alpha : value) (beta : value) (t : tree) : value =\n  assert (alpha < beta);\n  (* TO DO: Define this function. *)\n  raise TODO\n\nand bval_offspring (alpha : value) (beta : value) (offspring : offspring) : value =\n  assert (alpha < beta);\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* -------------------------------------------------------------------------- *)\n\n(* In a game tree where every leaf carries the value -1 (loss), 0 (draw),\n   or +1 (win), determining whether the first player is assured to win. *)\n\nlet assured_win (t : tree) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* -------------------------------------------------------------------------- *)\n\n(* Evaluating a tree using Alpha-Beta and returning the best move. *)\n\nlet rec bmove_offspring alpha beta (candidate : move option) offspring : move option =\n  assert (alpha < beta);\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet bmove alpha beta t : move option =\n  assert (alpha < beta);\n  (* TO DO: Define this function. *)\n  raise TODO\n",
    "descr": [
      [
        "",
        "<h1 id=\"Evaluating-a-Game-Tree-Minimax-Negamax-and-Alpha-Beta\">Evaluating a Game Tree: Minimax, Negamax, and Alpha-Beta</h1>\n\n<p>Consider a game of <a href='https://en.wikipedia.org/wiki/Tic-tac-toe'>Tic-Tac-Toe</a>,\nwhere the first player is named X and his opponent is named O.\nHere are a few questions that one might ask about this game,\nand their answers:</p>\n<p>Is X assured to win?</p>\n<ul><li><em>No.</em>\n If both players play perfectly, the game must end in a draw.</li></ul>\n\n<p>Can X make a mistake on his first move?</p>\n<ul><li><em>No.</em>\n If X plays perfectly,\n no opening move by X can lead to a victory for O.</li></ul>\n\n<p>Assuming X plays his first move in a corner,\ncan O make a mistake on his first move?</p>\n<ul><li><em>Yes.</em>\n O must play his first move in the center,\n otherwise, assuming X plays perfectly,\n O will lose.</li></ul>\n\n<p>These questions, as well as many similar questions about Tic-Tac-Toe (and\nabout other two-player games where both players have full information about\nthe current state of the game) can be answered by an algorithm that\n<strong>evaluates</strong> the <strong>game tree</strong>.</p>\n<h2 id=\"Game-Trees\">Game Trees</h2>\n\n<p>A <strong>game tree</strong> is a tree where every node represents a state of the game and\nevery edge represents a move.</p>\n<p>We assume that the game states (and therefore the tree nodes) can be separated\nin two disjoint groups:</p>\n<ul><li><p>The <strong>terminal states</strong> are those where the game is over.\n In a terminal state, no move is permitted.</p>\n</li><li><p>The <strong>nonterminal states</strong> are those where the game is not over.\n In a nonterminal state, at least one move is permitted.</p>\n</li></ul>\n\n<p>The root of the tree represents the initial state of the game. Out of a node\nthat represents a game state <em>s</em>, for every move <em>m</em> that is permitted in state\n<em>s</em>, there is an edge labeled <em>m</em> to a tree node that represents the game\nstate <em>s&#39;</em> obtained by playing move <em>m</em> in state <em>s</em>.</p>\n<p>We assume that <em>the two players take turns</em> in a strictly alternating manner,\nthat is, each player plays one move in turn. Thus, it is always clear which\nplayer is up; this information does not need to be explicitly represented in\nthe tree.</p>\n<p>In this exercise, we adopt an explicit representation of game trees as an\nOCaml algebraic data type. This allows us to split the problem of evaluating a\ngame state as follows:</p>\n<ul><li><p>The person who is responsible for <strong>building a game tree</strong>\n exploits purely game-specific knowledge,\n such as the encoding of game states in memory,\n the rules of the game, and so on.\n No knowledge of the (possibly complex) algorithms\n that are used to evaluate a tree is required.</p>\n</li><li><p>The person who is responsible for <strong>evaluating a game tree</strong>\n does so purely by exploring and reasoning about the tree.\n No knowledge of the underlying game is required.</p>\n</li></ul>\n\n<p>The definition of game trees in OCaml is as follows:</p>\n<pre><code>type tree =\n  | TLeaf of value\n  | TNonLeaf of offspring\n\nand offspring =\n  (move * tree) Seq.t</code></pre>\n\n<p>A tree node is either a <strong>leaf</strong> node, which represents a terminal state,\nor a <strong>nonleaf</strong> node, which represents a nonterminal state.</p>\n<p>A leaf node carries an integer <strong>value</strong>,\nwhich by convention represents the value of this game state\n<em>in the eyes of the player who is currently up</em>.\nThus, for instance, the value +1 might represent a victory\nfor the current player, while the value 0 might represent a draw,\nand the value -1 might represent a defeat for the current player.</p>\n<p>Instead of just -1, 0, and +1, it is permitted to use arbitrary\ninteger values comprised between <code>bottom</code> and <code>top</code> (inclusive).\nThe choice of what value to use at a leaf node is up to whomever\nbuilds a game tree.</p>\n<p>The type <code>value</code> is defined as a synonym for <code>int</code>.\nThe values <code>bottom</code> and <code>top</code> are defined so that\n<code>-bottom</code> is <code>top</code> and <code>-top</code> is <code>bottom</code>:</p>\n<pre><code>type value =\n  int\n\nlet bottom, top =\n  -max_int, max_int</code></pre>\n\n<p>A nonleaf node carries its <strong>offspring</strong>, that is, a nonempty sequence of\npairs of a permitted move and a subtree. This sequence enumerates all of\nthe permitted moves. Each move <em>m</em> in this sequence is accompanied with a\nsubtree whose root node represents the game state that this move leads to.</p>\n<p>We assume that each move is somehow encoded as an integer. The details of\nthis encoding are up to whomever builds a game tree. (The permitted moves\nneed <em>not</em> be encoded as consecutive integers.)</p>\n<pre><code>type move =\n  int</code></pre>\n\n<p>Because an offspring is represented as an OCaml <em>sequence</em>, as opposed to an\nOCaml <em>list</em>, a game tree does not have to reside entirely in memory at once.\n(The definition of OCaml sequences is recalled below.)\nThe parts of the tree that an evaluation algorithm needs to examine are built\non demand, and can be reclaimed by the garbage collector when they are no\nlonger needed. Thus, at a given moment, only one branch, namely the branch\nthat leads from the root of the tree down to the tree node under examination,\nactually needs to reside in memory.</p>\n<p>In this relatively simple-minded approach, there is <em>no sharing</em> of subtrees.\nIf two moves lead to the same game state, then the game tree contains two\nidentical subtrees. In a purely functional setting, there is, unfortunately, no way of recognizing that these\nsubtrees are identical and (thereby) to avoid duplicated work. It is possible\nto do so, using a hash table whose keys are game states, but this is not done\nin this exercise.</p>\n<h2 id=\"On-Demand-Sequences\">On-Demand Sequences</h2>\n\n<p>The type of <strong>on-demand sequences</strong> is defined in a module named <code>Seq</code>.\nBeginning with version 4.07,\nthis module is part of OCaml&#39;s standard library.</p>\n<pre><code>module Seq : sig\n\n  type &#39;a t = unit -&gt; &#39;a node\n\n  and +&#39;a node =\n  | Nil\n  | Cons of &#39;a * &#39;a t\n\nend</code></pre>\n\n<p>This data type is closely related to the algebraic data type of lists.\nIndeed, if instead of <code>unit -&gt; &#39;a node</code> one had written just <code>&#39;a node</code>,\nthen this data type would have been isomorphic to the type of lists.</p>\n<p>The presence of <code>unit -&gt; ...</code> indicates that a sequence is in fact a function.\nCalling this function, by applying it to the value <code>()</code>, amounts to requesting\nthe head of the sequence. This head can be either <code>Nil</code>, which means that the\nsequence is empty, or <code>Cons (x, xs)</code>, which means that the first element of\nthe sequence is <code>x</code> and the remaining elements form another sequence <code>xs</code>. It\nis worth noting that <code>xs</code> is itself a function, so the elements of the\nsequence <code>xs</code> need not be explicitly computed until <code>xs</code> is applied.</p>\n<h2 id=\"Warmup-Size-and-Height\">Warmup: Size and Height</h2>\n\n<p>As a warmup, let us implement two functions that compute the size and the\nheight of a game tree.</p>\n<p>The <strong>size</strong> of a game tree is the number of its nodes (including both leaf\nand nonleaf nodes).</p>\n<p>The <strong>height</strong> of a game tree is the maximum length of a branch. In other\nwords, it is the maximum number of moves that can be played consecutively,\nbeginning in the initial game state.</p>\n<p><strong>Question 1.</strong> Define the function <code>size</code>,\nwhose type is <code>tree -&gt; int</code>.</p>\n<p><strong>Question 2.</strong> Define the function <code>height</code>,\nwhose type is <code>tree -&gt; int</code>.</p>\n<h2 id=\"Evaluating-a-Game-Tree-the-Minimax-Algorithm\">Evaluating a Game Tree: the Minimax Algorithm</h2>\n\n<p>Suppose that we are given a game tree. We wish to <strong>evaluate</strong> it, that is, to\ncompute the best possible outcome of the game for the player who is initially\nup (the one who plays the first move), under the assumption that his opponent\nplays perfectly. We refer to this player as <code>Even</code>, and refer to his opponent\nas <code>Odd</code>. This is reflected in the following type definition:</p>\n<pre><code>type sense =\n  | Even\n  | Odd</code></pre>\n\n<p>The following auxiliary functions will be useful below. In particular,\n<code>interpret sense</code> transforms a value that is relative to the player <code>sense</code>\nto a value that is relative to the player <code>Even</code>. The value <code>unit sense</code> is\nthe neutral element of the binary operation <code>join sense</code>.</p>\n<pre><code>let opposite sense : sense =\n  match sense with Even -&gt; Odd | Odd -&gt; Even\n\nlet interpret sense (v : value) : value =\n  match sense with Even -&gt; v | Odd -&gt; -v\n\nlet join sense : value -&gt; value -&gt; value =\n  match sense with Even -&gt; max | Odd -&gt; min\n\nlet unit sense : value =\n  interpret sense bottom</code></pre>\n\n<p>What is the value in the eyes of the player <code>Even</code> of a game tree <code>t</code>,\nunder the assumption that, at the root of the tree, the player <code>Even</code> is up?</p>\n<ul><li><p>If <code>t</code> is a leaf <code>TLeaf v</code>,\n then the player <code>Even</code> has no choice (the game is over),\n and the value of the tree is just <code>v</code>.</p>\n</li><li><p>If <code>t</code> is an internal node <code>TNonLeaf offspring</code>,\n where <code>offspring</code> is a sequence of pairs of a move and a subtree,\n then the player <code>Even</code> has a choice between these moves\n and can pick an optimal one,\n so the value is the maximum of the values in the eyes of the player <code>Even</code>\n of these subtrees <em>where the player</em> <code>Odd</code> <em>is now up</em>.</p>\n</li></ul>\n\n<p>This leads us to ask a dual question.\nWhat is the value in the eyes of the player <code>Even</code> of a game tree <code>t</code>,\nunder the assumption that, at the root of the tree, the player <code>Odd</code> is up?</p>\n<ul><li>We let you answer this question by yourself!</li></ul>\n\n<p><strong>Question 3.</strong> Define a function <code>eval</code> of type <code>sense -&gt; tree -&gt; value</code>\nsuch that <code>eval sense t</code> computes the value in the eyes of the player <code>Even</code>\nof the game tree <code>t</code>, under the assumption that, at the root of the tree, the\nplayer <code>sense</code> is up.</p>\n<p><em>Hint.</em> In order to avoid code duplication between the case where <code>sense</code> is\n <code>Even</code> and the case where <code>sense</code> is <code>Odd</code>, make use of the auxiliary\n functions <code>opposite</code>, <code>interpret</code>, <code>join</code>, and <code>unit</code>.</p>\n<p><em>Note.</em> Because this code alternates between computing a maximum (at even\nlevels in the tree) and a minimum (at odd levels in the tree), it is known as\nthe <a href='https://en.wikipedia.org/wiki/Minimax'>Minimax</a> algorithm. The parameter\n<code>sense</code> is so named because this is a typical name for a parameter that\nalternates between two values.</p>\n<p><em>Note.</em> If the value of a game tree <code>t</code> in the eyes of one player is <code>v</code>, then\nits value in the eyes of the other player is <code>-v</code>. Thus, the function <code>eval</code>\nmust satisfy the following law: <code>eval (opposite sense) t = -(eval sense t)</code>.</p>\n<h2 id=\"Evaluating-a-Game-Tree-the-Minimax-Algorithm-in-Negamax-Style\">Evaluating a Game Tree: the Minimax Algorithm in Negamax Style</h2>\n\n<p>Although it seems reasonable to parameterize the Minimax algorithm with a\n<code>sense</code> parameter, as done above, there is a different formulation of the\nalgorithm, known as <a href='https://en.wikipedia.org/wiki/Negamax'>Negamax</a>, where\nthis parameter is unnecessary.</p>\n<p>This formulation relies on the remark that was made above:\n<code>eval (opposite sense) t</code> is equal to <code>-(eval sense t)</code>. Thus, the function\n<code>eval sense</code> can be formulated in such a way that every recursive call is of\nthe form <code>eval sense</code>, and no recursive call is of the form\n<code>eval (opposite sense)</code>.\nTherefore, the <code>sense</code> parameter is actually unnecessary! We can write a new\nevaluation function, <code>nval</code>, which does not take such a parameter.</p>\n<p><strong>Question 4.</strong> Define a function <code>nval</code> of type <code>tree -&gt; value</code> such that\n<code>nval t</code> computes the value of the game tree <code>t</code> in the eyes of the player who\nis up at the root of the tree.</p>\n<p><em>Note.</em> The connection between <code>nval</code> and <code>eval</code> is described by the following\nlaw: <code>interpret sense (nval t) = eval sense t</code>. By replacing <code>sense</code> with\n<code>Even</code> in this law, we find, in particular, <code>nval t = eval Even t</code>.</p>\n<h2 id=\"Evaluating-a-Game-Tree-the-Minimax-Algorithm-in-Negamax-Tail-Recursive-Style\">Evaluating a Game Tree: the Minimax Algorithm in Negamax Tail-Recursive Style</h2>\n\n<p>In your answer to the previous question, you have likely defined the function\n<code>nval_offspring</code> in a recursive manner, using an expression of the form <code>max\n(...) (nval_offspring ...))</code>. Such an expression is certainly easy to read.\nHowever, this style exhibits a few weaknesses:</p>\n<ul><li><p>The maximum of the two values is computed <em>after</em> the recursive call.\n In other words, this is not a tail call.</p>\n</li><li><p>The OCaml programming language does not specify in what order the actual\n arguments are evaluated in a function call. Thus, it is not clear which of\n the two arguments of <code>max</code> is evaluated first. As a result, it is not clear\n in what order the subtrees are evaluated: in the order in which they appear\n in the sequence, or in the reverse order?</p>\n</li></ul>\n\n<p>To address these shortcomings, it is preferable to organize the code in a\nslightly different manner, where it is clear that the subtrees are evaluated\nin the order in which they appear in the sequence, and where the recursive\ncall is a\n<a href='https://www.cs.cornell.edu/courses/cs3110/2019sp/textbook/data/tail_recursion.html'>tail call</a>.\nThis allows the OCaml compiler to produce code for a loop that iterates over\nthe sequence of subtrees.</p>\n<p><strong>Question 5.</strong> Define a function <code>ntval</code> of type <code>tree -&gt; value</code> such that\n<code>ntval t</code> computes the value of the game tree <code>t</code> in the eyes of the player\nwho is up at the root of the tree.</p>\n<p><em>Hint.</em> The auxiliary function <code>ntval_offspring</code> should now take two\nparameters, namely <code>running_max</code>, the maximum value of the subtrees that have\nalready been examined, and <code>offspring</code>, the sequence of the subtrees that\nremain to be examined.</p>\n<p><em>Hint.</em> The recursive call of <code>ntval_offspring</code> to itself should be a tail\ncall.</p>\n<p><em>Note.</em> The connection between <code>ntval</code> and <code>nval</code> is simple: <code>ntval t</code> must be\nequal to <code>nval t</code>.</p>\n<h2 id=\"Evaluating-a-Game-Tree-the-Alpha-Beta-Algorithm-in-Negamax-Style\">Evaluating a Game Tree: the Alpha-Beta Algorithm in Negamax Style</h2>\n\n<p>Imagine that you are playing a game of chess. You suddenly discover that, if\nyour tower leaves the first row, then your opponent can move his own tower\ninto this row and checkmate. Do you ask yourself <em>what other moves</em> your\nopponent might play instead? No: the fact that your opponent has a winning\nmove is sufficient grounds to stop examining this situation and recognize that\nmoving your tower away is a bad move.</p>\n<p>This suggests that the value of a game tree can in some cases be determined\nwithout examining the entire tree. Some subtrees can be <em>pruned</em>, that is,\nnever examined.</p>\n<p>The\n<a href='https://en.wikipedia.org/wiki/Negamax#Negamax_with_alpha_beta_pruning'>Alpha-Beta</a>\nalgorithm improves on the Minimax algorithm by abandoning a sequence of\nsubtrees as soon as it is clear that their values are irrelevant. This yields\na dramatic performance improvement: it is an essential optimization.</p>\n<p>As its name suggests, the Alpha-Beta algorithm is parameterized by two values,\n<code>alpha</code> and <code>beta</code>, which must satisfy the strict inequality <code>alpha &lt; beta</code>.\nThe algorithm is expected to evaluate a game tree <code>t</code> and is allowed to return\nan <em>approximation</em> of the exact value <code>v</code> of <code>t</code>, as follows:</p>\n<ul><li><p>If the value <code>v</code> lies strictly within the open interval <code>(alpha, beta)</code>,\n then the algorithm must return exactly <code>v</code>.</p>\n</li><li><p>If <code>v</code> lies within the closed interval <code>[bottom, alpha]</code>,\n then the algorithm may return any value in this interval.\n The idea is, if the value of the tree <code>t</code> is <code>alpha</code> or below <code>alpha</code>,\n then it is a <em>bad</em> tree in the eyes of the current player,\n and there is no need to find out exactly how bad it is:\n we will not play it.</p>\n</li><li><p>If <code>v</code> lies within the closed interval <code>[beta, top]</code>,\n then the algorithm may return any value in this interval.\n The idea is, if the value of the tree <code>t</code> is <code>beta</code> or above <code>beta</code>,\n then it is a <em>good</em> tree in the eyes of the current player,\n and there is no need to find out exactly how good it is:\n our opponent will not give us the opportunity of playing it.</p>\n</li></ul>\n\n<p>In other words, the exact value of a game tree and the approximate value\ncomputed by the Alpha-Beta algorithm must be <code>(alpha, beta)</code><em>-equivalent</em> in the\nfollowing sense:</p>\n<pre><code>let equivalent alpha beta v1 v2 =\n  v1 &lt;= alpha &amp;&amp; v2 &lt;= alpha ||\n  v1 = v2 ||\n  beta &lt;= v1 &amp;&amp; beta &lt;= v2</code></pre>\n\n<p><strong>Question 6.</strong> Define a function <code>bval</code> of type <code>value -&gt; value -&gt; tree -&gt;\nvalue</code> such that <code>bval t</code> computes the value of the game tree <code>t</code> in the eyes\nof the player who is up at the root of the tree, up to <code>(alpha,\nbeta)</code>-equivalence.</p>\n<p><em>Note.</em> The connection between <code>ntval</code> and <code>bval</code> is described by the\nfollowing law: <code>equivalent alpha beta (bval alpha beta t) (ntval t)</code>.\nIn particular, by instantiating <code>alpha</code> with <code>bottom</code> and <code>beta</code> with\n<code>top</code>, we find the following law as a special case:\n<code>bval bottom top t = ntval t</code>.\nIn other words, the Alpha-Beta algorithm computes the same result\nas the Minimax algorithm\nwhen the <code>(alpha, beta)</code> window covers the entire range of values.</p>\n<p><em>Hint.</em> The functions <code>bval</code> and <code>bval_offspring</code> are very similar to the\nfunctions <code>ntval</code> and <code>ntval_offspring</code> defined earlier.</p>\n<p><em>Hint.</em> The parameter <code>alpha</code> in <code>bval_offspring</code> plays essentially the same\nrole as the parameter <code>running_max</code> in <code>ntval_offspring</code>, and is updated in\nexactly the same way. Indeed, once we have found a subtree whose value is <code>v</code>,\nwe can view every value below <code>v</code> as <em>bad</em>. Because we are not interested in\ndistinguishing between bad values, we can update <code>alpha</code> to be at least <code>v</code>.</p>\n<p><em>Hint.</em> The parameter <code>beta</code> in <code>bval_offspring</code> allows pruning. If we find a\nsubtree whose value is <code>beta</code> or above <code>beta</code>, then this is <em>good</em>, and there\nis no need to examine the rest of the sequence of subtrees. This is known as\na <em>cut</em>.</p>\n<p><em>Hint.</em> We keep working in Negamax style. So, when we make a recursive call to\n<em><code>bval</code>, we must provide values of <code>alpha</code> of <code>beta</code> that make sense *in the\neyes of the opponent.</em></p>\n<h2 id=\"Application-Finding-and-Playing-a-Winning-Strategy\">Application: Finding and Playing a Winning Strategy</h2>\n\n<p>Recall the question that we asked at the very beginning: in a game of\nTic-Tac-Toe, is the first player assured to win? Suppose we are interested in\njust a binary answer, that is, &quot;yes&quot; or &quot;no&quot;. (If the answer is &quot;no&quot;, we are\nnot interested in determining whether the second player is assured to win or\nthe game must end in a draw.) How can this question be efficiently answered\nusing the Alpha-Beta algorithm?</p>\n<p><strong>Question 7.</strong> Define a function <code>assured_win</code> of type <code>tree -&gt; bool</code> such\nthat <code>assured_win t</code> is <code>true</code> if and only if the player who is up at the root\nof the game tree <code>t</code> is assured to win, under the assumption that every leaf\nin the tree <code>t</code> carries the value -1 (loss), 0 (draw), or +1 (win).</p>\n<p>Being able to evaluate a game tree, and being able to tell that we assured to\nwin, is a good thing, but does not directly tell us <em>how</em> to win. Fortunately,\nit is easy to define a variant of <code>bval</code> that returns not only the value of\nthe game tree, but also an optimal move.</p>\n<p>A move is <em>optimal</em> if it achieves an optimal result in the eyes of the player\nwho is up. In other words, it is optimal if it leads to a subtree whose value\n(in the eyes of the current player) is the same as the value of the entire\ntree.</p>\n<p><strong>Question 8.</strong> Define a function <code>bmove</code> of type\n<code>value -&gt; value -&gt; tree -&gt; move option</code>\nsuch that <code>bmove alpha beta t</code>\nreturns <code>None</code> if the game tree <code>t</code> is a leaf\nand\nreturns <code>Some move</code> if the game tree <code>t</code> is of the form <code>TNonLeaf offspring</code>\nand <code>move</code> is the first move in the sequence <code>offspring</code> that achieves the\noptimal value <code>bval alpha beta t</code>.</p>\n<h2 id=\"Comments\">Comments</h2>\n\n<p>We have implemented algorithms that evaluate a game tree by exploring it\nentirely, all the way down to its leaves (except of course where pruning is\npossible). If one wishes to evaluate a game tree only <strong>down to a limited\ndepth</strong> <code>d</code>, this can be done, without modifying the evaluation algorithms\ndeveloped above, by pruning the tree at this depth, that is, by constructing a\nshallower game tree where every node at depth <code>d</code> in the original tree is\nreplaced with a leaf. The value of this leaf is usually determined by a\nheuristic <em>evaluation function</em> which, given a game state, attempts to guess\nthe value of this game state.</p>\n<p>We have defined an explicit algebraic data type of game trees because this\nallows us to abstract the game state away from the evaluation algorithm and to\ntest the evaluation algorithm with artificial game trees, independently of any\nactual game. However, this simple and elegant approach has a cost. First,\nallocating the game tree in memory imposes a penalty in terms of performance.\nSecond, and more seriously, hiding the game state from the evaluation\nalgorithm prevents us from making several crucial improvements to the\nAlpha-Beta algorithm. For this reason, in a real-world implementation, the\nevaluation algorithm would have direct access to game states, and no tree\nwould be explicitly built. The main improvements that could then be made are\nas follows:</p>\n<ul><li><p><strong>Exploiting sharing.</strong> It is common for a game state to be reachable via\n different paths. Therefore, the state space of the game forms a <em>directed\n graph</em>. Representing this graph as a tree is correct, but is extremely\n inefficient, as this tree is typically exponentially larger than the\n underlying graph. In other words, when the state space of the game is\n represented as a tree, a single game state can appear in many places in the\n tree, and therefore can be evaluated many times. This leads to repeated\n work. In order to avoid this phenomenon, one must attempt to recognize that\n a game state has been reached and evaluated already. This is typically done\n by using a hash table, which in this case is usually known as a\n <em>transposition table</em>. Extending the Minimax algorithm with a transposition\n table is easy. Extending Alpha-Beta with a transposition table is slightly\n more difficult, as the values of <code>alpha</code> and <code>beta</code> are not necessarily the\n same when a game state is first visited and when it is visited again, but,\n with some care, this can be done. This yields an important gain in time, at\n a large cost in space.</p>\n</li><li><p><strong>Exploiting symmetries.</strong> Some games exhibit symmetries. For instance, in\n Connect 4, taking the mirror image of the board (with respect to a vertical\n axis that goes through the center of the board) changes a game state to\n another game state whose value is the same. This remark allows dividing by 2\n the number of game states that must be evaluated. Similarly, in Tic-Tac-Toe,\n rotating the board by 90 degrees changes a game state to an equivalent game\n state. This remark allows dividing by 4 the number of game states that must\n be evaluated.</p>\n</li><li><p><strong>Exploiting move ordering.</strong> In a given game state, several moves are\n usually permitted. In what order should these moves be explored? For the\n Minimax algorithm, this makes no difference. For the Alpha-Beta algorithm,\n however, it is desirable to explore better moves first, because this leads\n to more pruning, therefore better performance. Naturally, it is not known a\n priori which moves are best. One approach is to use a heuristic function,\n based on game-specific knowledge, to determine which moves seem most\n promising. Another approach is to exploit <strong>iterative deepening</strong>, that is,\n to run the Alpha-Beta algorithm successively down to some depth <code>d</code>, then\n down to depth <code>d+1</code>, then down to depth <code>d+2</code>, and so on. The approximate\n values obtained during one run are used during the next run to determine\n which moves look most promising. Because the cost of the last run alone\n usually dwarfs the combined cost of all previous runs, the cost of iterative\n deepening is not a problem; this technique is usually beneficial.</p>\n</li></ul>"
      ]
    ],
    "prepare": "FUrKIQ+x+rz+bXYvYihA",
    "test": "",
    "solution": "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",
    "max-score": 14,
    "depend": null,
    "dependencies": []
  },
  null
]
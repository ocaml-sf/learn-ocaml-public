[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Generic Sorting",
    "stars": 3
  },
  {
    "id": "generic_sorting",
    "prelude": "(* An OCaml encoding of the anonymous sum type ['a + 'b]. *)\n\n(* The type [('a, 'b) either] is the sum of the types ['a] and ['b].\n   A value of type [('a, 'b) either] is either [Inl v], where [v]\n   has type ['a], or [Inr v], where [v] has type ['b]. The data\n   constructors [Inl] and [Inr] are so named because they are the\n   left injection and right injection into the sum type. *)\n\ntype ('a, 'b) either =\n| Inl of 'a\n| Inr of 'b\n\n(* A value of type ['k order] is a description of a total preorder\n   on values of type ['k]. *)\n\ntype _ order =\n| OTrue:                                         'k order\n| ONat:                                  int -> int order\n| OSum : 'k1 order * 'k2 order -> ('k1, 'k2) either order\n| OProd:       'k1 order * 'k2 order -> ('k1 * 'k2) order\n| OMap :            ('k1 -> 'k2) * 'k2 order -> 'k1 order\n\n(* A value of type [result] describes the result of a comparison. *)\n\ntype result = Lt | Eq | Gt\n",
    "template": "let pigeonhole_sort (bound : int) (kvs : (int * 'v) list) : 'v list =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet rec cmp : type a . a order -> a -> a -> result =\n  fun o x y ->\n    (* TO DO: Define this function. *)\n    raise TODO\n\nlet rec sort : type k v . k order -> (k * v) list -> v list =\n  fun o kvs ->\n    (* TO DO: Define this function. *)\n    raise TODO\n\nlet simple_sort (o : 'v order) (vs : 'v list) : 'v list =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* TO DO: Define [bool]. *)\n\n(* TO DO: Define [list]. *)\n\n(* TO DO: Define [string]. *)\n\n(* TO DO: Define [int32]. *)\n\n(* A discriminator returns a list of nonempty lists of values,\n   where the inner lists group values whose keys are equivalent. *)\n\n(* This is top-down discrimination (Henglein, 2012). *)\n\nlet rec discr : type k v . k order -> (k * v) list -> v list list =\n  fun o kvs ->\n    (* TO DO: Define this function. *)\n    raise TODO\n",
    "descr": [
      [
        "",
        "<h1 id=\"Generic-Sorting\">Generic Sorting</h1>\n\n<p><strong>Sorting</strong> is the problem of rearranging an input sequence according to a\ngiven total preorder.</p>\n<p>It is well-known that, in order to sort a sequence of <code>n</code> elements, a\n<strong>comparison-based</strong> sorting algorithm needs <code>Omega(n log n)</code> comparisons,\nthat is, at least <code>k * n * log n</code> comparisons, for a certain constant factor\n<code>k</code>.</p>\n<p>Comparison-based sorting algorithms are popular because they are\n<strong>polymorphic</strong> in the type of elements. That is, <strong>they do not and cannot\ninspect</strong> the structure of elements; they have access only to a user-supplied\ncomparison function.</p>\n<p>That said, not every sorting algorithm is comparison-based. For certain types\nof elements and for certain preorders, other techniques may be available.\n<strong><a href=\"https://en.wikipedia.org/wiki/Pigeonhole_sort\" target=\"_blank\" rel=\"noopener noreferrer\">Pigeonhole sort</a></strong>,\nfor instance, sorts a sequence of (bounded) integers in time\n<code>O(n)</code>. Furthermore, there are constructions by which <strong>linear-time\nsorting algorithms can be composed</strong>: for instance, if there is a linear-time\nalgorithm that sorts values of type <code>&#39;k1</code> according to a preorder <code>o1</code>, and if\nthere is a linear-time algorithm that sorts values of type <code>&#39;k2</code> according to\na preorder <code>o2</code>, then it is not very difficult to construct a linear-time\nalgorithm that sorts <strong>pairs</strong> of type <code>&#39;k1 * &#39;k2</code> according to the\nlexicographic ordering <code>o1 * o2</code>.</p>\n<p>These remarks suggest that there is <strong>a family of preorders</strong> for which\none can construct a linear-time sorting algorithm.</p>\n<p>In this exercise, we exhibit such a family of preorders. It takes the form of\nan algebraic data type <code>&#39;k order</code>. A value <code>o</code> of type <code>&#39;k order</code> is a\n<strong>description</strong> of a total preorder on values of type <code>&#39;k</code>.\nFor every such value <code>o</code>, we are able to give a linear-time sorting algorithm.\nThis claim is substantiated by defining a function <code>sort</code> whose type is as follows:</p>\n<pre><code>  val sort: &#39;k order -&gt; (&#39;k * &#39;v) list -&gt; &#39;v list</code></pre>\n\n<p>The function <code>sort o</code> accepts a list of key-value pairs,\nsorts it according to the preorder <code>o</code>,\nwhich is a preorder on keys,\nand returns just a list of values.\nThe keys are dropped.\n(This somewhat unusual presentation, where keys and values are distinguished,\nhelps define <code>sort</code> recursively. A more standard presentation, where keys and\nvalues are identified, can easily be obtained as a special case; see Question 4.)</p>\n<p>The time complexity of <code>sort o kvs</code> is <code>O(m * n)</code>,\nwhere <code>m</code> is the size of the syntactic representation of the preorder <code>o</code>,\nand where <code>n</code> is the length of the input list <code>kvs</code>.</p>\n<p>Throughout this exercise, we restrict our attention to <strong>stable</strong> sorting\nalgorithms. That is, if two values are associated with equivalent keys\naccording to the preorder <code>o</code>, then they must appear in the output list in the\nsame order as in the input list.</p>\n<p>This exercise is inspired by the paper\n<a href=\"https://www.cs.ox.ac.uk/projects/utgp/school/henglein2012c.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Generic top-down discrimination for sorting and partitioning in linear\ntime</a>\n(Henglein, 2012).\nA related paper is\n<a href=\"http://www.cs.ox.ac.uk/ralf.hinze/WG2.8/31/slides/aplas2013.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Sorting and searching by distribution: from generic discrimination to\ngeneric tries</a>\n(Henglein and Hinze, 2013).</p>\n<p>The algorithms considered here and in these papers are <em>generic</em>. Here, this\nword means that these algorithms are polymorphic and directed by an explicit\ndescription of the data at hand. Indeed, they can be applied to an arbitrary\ntype <code>&#39;k</code> of keys, provided a description <code>o</code> of a preorder on keys, of type\n<code>&#39;k order</code>, is provided.</p>\n<h2 id=\"Warmup-Pigeonhole-Sort\">Warmup: Pigeonhole Sort</h2>\n\n<p><strong>Question 1.</strong> Define a function <code>pigeonhole_sort</code>\nof type <code>int -&gt; (int * &#39;v) list -&gt; &#39;v list</code>\nsuch that <code>pigeonhole_sort bound kvs</code>\nsorts the list of key-value pairs <code>kvs</code>\nand returns just a list of values.\nThe keys are integers\nand must be comprised between <code>0</code> (included) and <code>bound</code> (excluded).\nThe time complexity of the algorithm must be <code>O(bound + n)</code>,\nwhere <code>n</code> is the length of the list <code>kvs</code>.\nThis must be a stable sort.</p>\n<p><em>Hint.</em> Build an array, indexed by keys,\nwhere each array cell holds a list of values.\nConvert this array back to a sorted list.</p>\n<p><em>Note.</em> The automatic grading code verifies whether the output list is\ncorrect, but does not verify the time complexity of your algorithm. It\nis up to you to convince yourself that the complexity bound is met.</p>\n<p><em>Note.</em> In a real-world implementation,\none might wish to ensure\nthat two successive calls to <code>pigeonhole_sort bound</code>\nuse the same internal array,\ninstead of allocating a new array every time.</p>\n<h2 id=\"A-family-of-preorders\">A family of preorders</h2>\n\n<p>As announced earlier, in this exercise, we exhibit a family of preorders\nfor which one can construct a linear-time sorting algorithm.</p>\n<p>This family takes the form of an algebraic data type <code>&#39;k order</code>. A value <code>o</code>\nof type <code>&#39;k order</code> is a <strong>description</strong> of a total preorder on values of type\n<code>&#39;k</code>. We use the letter <code>&#39;k</code> because we typically refer to these values as\n<strong>keys</strong>.</p>\n<p>The type <code>&#39;k order</code> is defined as follows.\n(This is in fact a <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/extn.html\" target=\"_blank\" rel=\"noopener noreferrer\">generalized algebraic data type</a>.)</p>\n<pre><code>  type _ order =\n  | OTrue:                                         &#39;k order\n  | ONat:                                  int -&gt; int order\n  | OSum : &#39;k1 order * &#39;k2 order -&gt; (&#39;k1, &#39;k2) either order\n  | OProd:       &#39;k1 order * &#39;k2 order -&gt; (&#39;k1 * &#39;k2) order\n  | OMap :            (&#39;k1 -&gt; &#39;k2) * &#39;k2 order -&gt; &#39;k1 order</code></pre>\n\n<p>Let us review the meaning of each of these data constructors.\nThis explanation may seem a bit lengthy,\nbut such is the cost of precision!</p>\n<ul><li><p><code>OTrue</code> represents the <strong>everywhere-true</strong> preorder.\n According to this preorder, all keys are equivalent.\n By itself, this preorder is not very useful.\n It typically serves as a basic component in the construction\n of more complex composite preorders (see Questions 5 to 8).</p>\n</li><li><p><code>ONat bound</code> represents the <strong>standard total order on the integers</strong>\n comprised between <code>0</code> (included) and <code>bound</code> (excluded).</p>\n</li><li><p><code>OSum (o1, o2)</code> represents the <strong>disjoint union</strong> of the preorders <code>o1</code> and <code>o2</code>.</p>\n</li></ul>\n\n<p> More precisely,\n if <code>o1</code> represents a total preorder on values of type <code>&#39;k1</code>\n and if <code>o2</code> represents a total preorder on values of type <code>&#39;k2</code>,\n then <code>OSum (o1, o2)</code> represents a total preorder on values of type\n <code>(&#39;k1, &#39;k2) either</code>,\n defined as follows:</p>\n<ul><li><p><code>Inl v1</code> is less than <code>Inr v2</code>;</p>\n</li><li><p><code>Inl v1</code> is less than <code>Inl w1</code> if and only if\n <code>v1</code> is less than <code>w1</code> according to <code>o1</code>;</p>\n</li><li><p><code>Inr v2</code> is less than <code>Inr w2</code> if and only if\n <code>v2</code> is less than <code>w2</code> according to <code>o2</code>.</p>\n</li></ul><ul><li><code>OProd (o1, o2)</code> represents the\n <strong><a href=\"https://en.wikipedia.org/wiki/Lexicographic_product_of_graphs\" target=\"_blank\" rel=\"noopener noreferrer\">lexicographic product</a></strong>\n of the preorders <code>o1</code> and <code>o2</code>.</li></ul>\n\n<p> More precisely,\n if <code>o1</code> represents a total preorder on values of type <code>&#39;k1</code>\n and if <code>o2</code> represents a total preorder on values of type <code>&#39;k2</code>,\n then <code>OProd (o1, o2)</code> represents a total preorder on values of type\n <code>&#39;k1 * &#39;k2</code>,\n defined as follows:</p>\n<ul><li><p>If <code>v1</code> is strictly less than <code>w1</code> according to <code>o1</code>,\n then <code>(v1, v2)</code> is less than <code>(w1, w2)</code>;</p>\n</li><li><p>If <code>v1</code> is equivalent to <code>w1</code> according to <code>o1</code>,\n and if <code>v2</code> is less than <code>w2</code> according to <code>o2</code>,\n then <code>(v1, v2)</code> is less than <code>(w1, w2)</code>.</p>\n</li></ul><ul><li><code>OMap (f, o2)</code> is the <strong>inverse image</strong> of the preorder <code>o2</code>\n through the function <code>f</code>.</li></ul>\n\n<p> More precisely,\n if <code>f</code> has type <code>&#39;k1 -&gt; &#39;k2</code>\n and if <code>o2</code> represents a total preorder on values of type <code>&#39;k2</code>,\n then <code>OMap (f, o2)</code> represents a total preorder on values of type <code>&#39;k1</code>,\n defined as follows:</p>\n<ul><li><code>v1</code> is less than <code>w1</code>\n if and only if <code>f(v1)</code> is less than <code>f(w1)</code> according to <code>o2</code>.</li></ul>\n\n<p>The above explanation can be translated into executable code:</p>\n<p><strong>Question 2.</strong>\nDefine a function <code>cmp</code> of type\n<code>&#39;k order -&gt; &#39;k -&gt; &#39;k -&gt; result</code>,\nwhere the type <code>result</code>, which describes the outcome of a comparison,\nis defined by <code>type result = Lt | Eq | Gt</code>.\nThe function <code>cmp</code> should be an interpreter:\nthat is, if <code>o</code> is a description of a certain preorder,\nthen <code>cmp o</code> must be a decision function for this preorder.</p>\n<h2 id=\"Sorting\">Sorting</h2>\n\n<p>It is now time to prove that\nfor every preorder <code>o</code>,\nthere is a linear-time sorting algorithm.</p>\n<p><strong>Question 3.</strong>\nDefine a function <code>sort</code>\nof type <code>&#39;k order -&gt; (&#39;k * &#39;v) list -&gt; &#39;v list</code>\nsuch that <code>sort o</code> accepts a list of key-value pairs,\nsorts it according to the preorder <code>o</code>,\nand returns just a list of values,\ndropping the keys.\nThis must be a stable sort.\nThe time complexity of <code>sort o kvs</code> must be <code>O(m * n)</code>,\nwhere <code>m</code> is the size of the syntactic representation of the preorder <code>o</code>,\nand where <code>n</code> is the length of the input list <code>kvs</code>.</p>\n<p><em>Note.</em> The automatic grading code verifies whether the output list is\ncorrect, but does not verify the time complexity of your algorithm. It\nis up to you to convince yourself that the complexity bound is met.</p>\n<p><em>Note.</em> When proving that this complexity bound holds, it is permitted\nto assume that, every time the data constructor <code>OMap</code> is applied to a\nfunction <code>f</code>, this function has constant time complexity.</p>\n<p>Sometimes the key-value distinction is not useful:\none simply wishes to sort a list of values.\nThis is easily done:</p>\n<p><strong>Question 4.</strong>\nIn one line,\ndefine a function <code>simple_sort</code>\nof type <code>&#39;v order -&gt; &#39;v list -&gt; &#39;v list</code>\nsuch that <code>sort o</code> accepts a list of values\nand sorts it according to the preorder <code>o</code>.</p>\n<h2 id=\"User-defined-preorders\">User-defined preorders</h2>\n\n<p>The five primitive preorder constructors,\n<code>OTrue</code>, <code>ONat</code>, <code>OSum</code>, <code>OProd</code>, and <code>OMap</code>,\nare sufficiently expressive\nfor many preorders of practical interest\nto be definable.</p>\n<p><strong>Question 5.</strong> Define a value <code>bool</code>\nof type <code>bool order</code>\nwhich represents the standard total order on the Booleans.</p>\n<p><strong>Question 6.</strong> Define a value <code>list</code>\nof type <code>&#39;a order -&gt; &#39;a list order</code>,\nsuch that\nif <code>o</code> is a total preorder on letters of type <code>&#39;a</code>\nthen\n<code>list o</code> is the corresponding\n<a href=\"https://en.wikipedia.org/wiki/Lexicographical_order\" target=\"_blank\" rel=\"noopener noreferrer\">lexicographic preorder</a>\non sequences of letters.</p>\n<p><em>Hint.</em> A list is either empty or a pair of an element and a list. In other\nwords, the type <code>&#39;a list</code> is isomorphic to the type <code>(unit, &#39;a * &#39;a list)\neither</code>. As a first step, define a function <code>unfold</code> of type\n<code>&#39;a list -&gt; (unit, &#39;a * &#39;a list) either</code> that witnesses one\ndirection of this isomorphism. Then, use <code>unfold</code> in the definition\nof the lexicographic preorder <code>list</code>.</p>\n<p><em>Hint.</em> OCaml allows recursive definitions of <em>values</em>. For instance, the\ndefinition <code>let rec ones = 1 :: ones</code> gives rise to an infinite list,\nrepresented in memory as a cyclic data structure. This feature can be\nexploited in the definition of the lexicographic preorder <code>list o</code>.</p>\n<p><strong>Question 7.</strong> Define a value <code>string</code>\nof type <code>string order</code>\nwhich represents the standard lexicographic order\non strings.</p>\n<p><em>Hint.</em> An OCaml string is isomorphic to a sequence of characters,\nand an OCaml character is isomorphic to an 8-bit integer.</p>\n<p>The function <code>sort</code>, when applied to the preorder <code>ONat bound</code>,\nuses <code>pigeonhole_sort</code>,\nwhich allocates and initializes an array of size <code>bound</code>.\nWhen <code>bound</code> is small (say, 256), this is acceptable;\nwhen <code>bound</code> is large, this becomes untenable.</p>\n<p>Fortunately, a large integer can be cut down into a tuple of smaller integers!\nThis is the idea behind <strong><a href=\"https://en.wikipedia.org/wiki/Radix_sort\" target=\"_blank\" rel=\"noopener noreferrer\">radix sort</a></strong>.</p>\n<p><strong>Question 8.</strong> Define a value <code>int32</code>\nof type <code>int order</code>\nwhich represents the standard order on integers\ncomprised between <code>0</code> (included) and <code>2^32</code> (excluded).\nThis definition must be such that <code>sort int32</code>\ninternally allocates arrays of size <code>256</code>, no more.</p>\n<h2 id=\"Discrimination\">Discrimination</h2>\n\n<p>For every preorder <code>o</code>,\none can define not just a linear-time sorting algorithm,\nbut also a linear-time <strong>discrimination</strong> algorithm.</p>\n<p>Discrimination goes a little bit beyond sorting:\nin addition to sorting a list of key-value pairs,\na discrimination algorithm also groups together\nthose values that are associated with equivalent keys.</p>\n<p>Thus, instead of producing just a list of values,\nit produces a list of groups,\nwhere each group is a <em>nonempty</em> list of values.</p>\n<p><strong>Question 9.</strong>\nDefine a function <code>discr</code>\nof type <code>&#39;k order -&gt; (&#39;k * &#39;v) list -&gt; &#39;v list list</code>\nsuch that <code>discr o</code> accepts a list of key-value pairs\nand returns a list of groups,\nwhere each group is a nonempty list of values that are associated with equivalent keys,\nand the groups are sorted by key according to the preorder <code>o</code>.</p>\n"
      ]
    ],
    "prepare": "ohe0QVIw/QVhQUukzoUc",
    "test": "",
    "solution": "",
    "max-score": 9
  },
  null
]
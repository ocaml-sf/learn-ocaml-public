[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Tree Iterators",
    "stars": 3,
    "backward_exercises": [
      "fpottier/tictactoe"
    ]
  },
  {
    "id": "tree_iterators",
    "prelude": "(* A type of binary trees. *)\n\ntype 'a tree =\n  | Leaf\n  | Node of 'a tree * 'a * 'a tree\n\n(* The module [Seq] is standard as of OCaml 4.07. *)\n\nmodule Seq = struct\n\n  type 'a t = unit -> 'a node\n\n  and +'a node =\n  | Nil\n  | Cons of 'a * 'a t\n\n  let nil () = Nil\n\n  let cons x xs () = Cons (x, xs)\n\n  (* The sequence [trap] always raises the exception [Trap] when\n     it is queried. It is used by the automatic grader and can\n     appear in some messages produced by the grader. *)\n\n  exception Trap\n\n  let trap () = raise Trap\n\nend\n",
    "template": "(* Producing lists. *)\n\nlet rec slow_elements (t : 'a tree) : 'a list =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet rec elements_with (t : 'a tree) (ys : 'a list) : 'a list =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet elements (t : 'a tree) : 'a list =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* Producing on-demand sequences. *)\n\nlet rec fringe_seq_with (t : 'a tree) (ys : 'a Seq.t) : 'a Seq.t =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nand fringe_node_with (t : 'a tree) (ys : 'a Seq.t) : 'a Seq.node =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet fringe (t : 'a tree) : 'a Seq.t =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* Comparing sequences. *)\n\nlet rec equal (xs : 'a Seq.t) (ys : 'a Seq.t) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* Comparing trees. *)\n\nlet same_fringe (t1 : 'a tree) (t2 : 'a tree) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n",
    "descr": [
      [
        "",
        "<h1 id=\"Tree-Iterators\">Tree Iterators</h1>\n\n<p>In this exercise, we study how to <strong>produce (on demand) a sequence of the\nelements of a data structure</strong>. We use a simple binary-tree data structure as\na representative example, but our technique is applicable to any data\nstructure.</p>\n<p>We use the type <code>&#39;a Seq.t</code> of <strong>on-demand sequences</strong> to represent a producer\nof a sequence of elements. The main point that we wish to make is that <strong>this\ntype is very similar to the type of lists</strong>, <code>&#39;a list</code>, so implementing a\nproducer of a sequence of elements requires essentially the same programming\nskill as building a list of elements.</p>\n<h2 id=\"Binary-trees\">Binary trees</h2>\n\n<p>A type <code>&#39;a tree</code> of binary trees is given, where every binary node is\ndecorated with an <em>element</em>, that is, a piece of data of type <code>&#39;a</code>.\nThis type is defined as follows:</p>\n<pre><code>type &#39;a tree =\n  | Leaf\n  | Node of &#39;a tree * &#39;a * &#39;a tree</code></pre>\n\n<p>One could impose invariants on this data structure, including an ordering\ninvariant and a balancing invariant, to obtain <em>balanced binary search trees</em>,\na simple, widely-known implementation of dictionaries. In this exercise,\nhowever, these invariants play no role.</p>\n<p>The <strong>fringe</strong> of a tree is the list of its elements, in the order in which\nthey appear when the tree is written down as an OCaml expression. (This is\nsometimes known as an infix enumeration.) For instance, the fringe of the tree\n<code>Node (Node (Leaf, 0, Leaf), 1, Node (Leaf, 2, Leaf))</code> is the list\n<code>[0; 1; 2]</code>.</p>\n<h2 id=\"Building-the-fringe-of-a-tree-eagerly\">Building the fringe of a tree (eagerly)</h2>\n\n<p><strong>Question 1.</strong>\nDefine a function <code>slow_elements</code>\nof type <code>&#39;a tree -&gt; &#39;a list</code>\nsuch that <code>slow_elements t</code> is the fringe of the tree <code>t</code>.\nGive a direct recursive definition of this function,\naiming for simplicity, not for efficiency.</p>\n<p>When Question 1 above is answered in the most straightforward way,\nthe solution involves the list concatenation function <code>(@)</code>, whose\ntime complexity is linear in the length of its first argument.\nAs a result, the complexity of the function <code>slow_elements</code> is bad:\nit is <code>O(n^2)</code> on arbitrary trees,\nand <code>O(n log n)</code> on weight-balanced trees.\nYet, ideally, traversing a tree should take only linear time.</p>\n<p>A classic solution to this problem is to\nwrite a function <code>elements_with</code>\nthat takes a <strong>continuation list</strong> <code>ys</code> as\na second argument. Each tree element is\nconsed (that is, prepended) to <code>ys</code>,\nthereby eliminating the need for list concatenation.</p>\n<p><strong>Question 2.</strong>\nDefine a function <code>elements_with</code>\nof type <code>&#39;a tree -&gt; &#39;a list -&gt; &#39;a list</code>\nsuch that the list <code>elements_with t ys</code> is\nequal to the list <code>slow_elements t @ ys</code>.</p>\n<p><strong>Question 3.</strong>\nIn one line,\ndefine a function <code>elements</code>\nof type <code>&#39;a tree -&gt; &#39;a list</code>\nsuch that <code>elements t</code> is the fringe of the tree <code>t</code>.\n(Thus, the lists <code>elements t</code> and <code>slow_elements t</code> are equal.)</p>\n<p>The function <code>elements</code> obtained in Question 3 builds the fringe of a tree in\nlinear time, which is good. A problem remains, however: suppose that someone\nneeds access to just the first <code>k</code> elements of the fringe, but the value of\n<code>k</code> is not known ahead of time. In such a scenario, building the entire fringe\nin memory is wasteful. We would like to be able to produce elements <strong>on\ndemand</strong>, with <code>O(1)</code> work per element, so that the first <code>k</code> elements are\nproduced in time <code>O(k)</code>.</p>\n<p>Fortunately, there is a very simple way of doing so. The trick is to use a\nslightly more elaborate, yet closely related data structure: we replace\n<em>lists</em> with <em>on-demand sequences</em>.</p>\n<h2 id=\"On-demand-sequences\">On-demand sequences</h2>\n\n<p>The type of <strong>on-demand sequences</strong> is defined in a module named <code>Seq</code>.\nBeginning with version 4.07,\nthis module is part of OCaml&#39;s standard library.</p>\n<pre><code>module Seq : sig\n\n  type &#39;a t = unit -&gt; &#39;a node\n\n  and +&#39;a node =\n  | Nil\n  | Cons of &#39;a * &#39;a t\n\n  val nil : &#39;a t\n  val cons: &#39;a -&gt; &#39;a t -&gt; &#39;a t\n\n  exception Trap\n  val trap: &#39;a t\n\nend</code></pre>\n\n<p>This data type is closely related to the algebraic data type of lists.\nIndeed, if instead of <code>unit -&gt; &#39;a node</code> one had written just <code>&#39;a node</code>,\nthen this data type would have been isomorphic to the type of lists.</p>\n<p>The presence of <code>unit -&gt; ...</code> indicates that a sequence is in fact a function.\nCalling this function, by applying it to the value <code>()</code>, amounts to requesting\nthe head of the sequence. This head can be either <code>Nil</code>, which means that the\nsequence is empty, or <code>Cons (x, xs)</code>, which means that the first element of\nthe sequence is <code>x</code> and the remaining elements form another sequence <code>xs</code>. It\nis worth noting that <code>xs</code> is itself a function, so the elements of the\nsequence <code>xs</code> need not be explicitly computed until <code>xs</code> is applied.</p>\n<p>Sequences are closely related to <em>iterators</em> in object-oriented languages,\nsuch as C++ and Java. Yet, sequences are much simpler than iterators, for\ntwo reasons:</p>\n<ul><li>they involve no mutable state;</li><li>they are just as easy to construct and to use as ordinary lists.</li></ul>\n\n<p>The functions <code>nil</code> and <code>cons</code> are constructor functions. They are provided\nfor convenience, but could just as well be defined outside of the module\n<code>Seq</code>. Their definitions (not shown) are one line long.</p>\n<p>The sequence <code>trap</code> behaves in a special way: when it is applied to <code>()</code>,\nwhich means that its head is requested, it raises the exception <code>Trap</code>.\nYou will not need to use <code>trap</code>.\nThe automatic grading code for Question 5 uses it internally.</p>\n<h2 id=\"Building-the-fringe-of-a-tree-on-demand\">Building the fringe of a tree (on demand)</h2>\n\n<p>We now wish to adapt the code written in Questions 2 and 3\nso as to produce a sequence instead of a list.</p>\n<p><strong>Question 4.</strong>\nDefine two mutually recursive functions\n<code>fringe_seq_with</code> and\n<code>fringe_node_with</code>,\nwhose types are as follows:</p>\n<pre><code>  val fringe_seq_with:  &#39;a tree -&gt; &#39;a Seq.t -&gt; &#39;a Seq.t\n  val fringe_node_with: &#39;a tree -&gt; &#39;a Seq.t -&gt; &#39;a Seq.node</code></pre><p>such that the sequence <code>fringe_seq_with t ys</code>\nbegins with the fringe of the tree <code>t</code>\nand continues with the sequence <code>ys</code>.\nThen, in one line,\ndefine a function <code>fringe</code>\nof type <code>&#39;a tree -&gt; &#39;a Seq.t</code>\nsuch that <code>fringe t</code> is the fringe of the tree <code>t</code>.</p>\n<h2 id=\"Testing-the-equality-of-two-sequences\">Testing the equality of two sequences</h2>\n\n<p><strong>Question 5.</strong>\nDefine a function <code>equal</code>\nof type <code>&#39;a Seq.t -&gt; &#39;a Seq.t -&gt; bool</code>\nsuch that <code>equal xs ys</code> is <code>true</code>\nif and only if\nthe sequences <code>xs</code> and <code>ys</code> are equal.\nThe sequences <code>xs</code> and <code>ys</code> are assumed to be finite.\nFurthermore, we assume that it is permitted to use\nthe generic equality function <code>(=)</code> to\ncompare two elements of type <code>&#39;a</code>.</p>\n<p><em>Note.</em> If the sequences <code>xs</code> and <code>ys</code> differ at some point, say at their\n<code>i</code>-th elements, then they must not be evaluated further than that; that is,\nthe <code>i+1</code>-th element of either sequence must never be requested.</p>\n<h2 id=\"Testing-whether-two-trees-have-the-same-fringe\">Testing whether two trees have the same fringe</h2>\n\n<p><strong>Question 6.</strong>\nDefine a function <code>same_fringe</code>\nof type <code>&#39;a tree -&gt; &#39;a tree -&gt; bool</code>\nsuch that <code>same_fringe t1 t2</code> is <code>true</code>\nif and only if the trees <code>t1</code> and <code>t2</code>\nhave the same fringe.</p>\n<p>Of course, if the trees <code>t1</code> and <code>t2</code> have distinct fringes,\nthen the comparison should stop and return <code>false</code> as early\nas possible.</p>\n<p>This exercise has real-world applications. For instance, the function\n<code>same_fringe</code> can be used to test whether two sets, represented as binary\nsearch trees, have the same elements.</p>\n<p>This is sometimes known in the literature as the <em>same-fringe problem</em>.\nIt can be a difficult problem if attacked naively.\nThanks to the tools developed in this exercise,\nit is quite straightforward.</p>\n"
      ]
    ],
    "prepare": "Tn0Iz+ZSkrDGD2t4t8qp",
    "test": "",
    "solution": "G0GUn4f5saYkKqVq8SuFUD1SQlp0EDMmJVVFFULdvd6xc5gvK7WXG8hcha8rbbsloCfU3CJnqqD9GsARrCrQalJfSpIjEJt674QnuNBDLPI/TtIG/4seqDpJFuQHlGSETYXpa2BPFumQTl0gTmEUbweHpAOBAlGgvElU61q+gTQRsxvTuOamxiZ8fGTCM4NGLpQACVcNS69cABFkEOHxl7GfEyE+NfQ+Pmi5f4OqtCCQJ0gVLm3bxqM+z6HyZcLmBi6WA6kHmkaBcH3g6Bw9cTBOpRjEc/7dNAoFjF7RJ1VAkgOr6EYWwsAm3sMD3BrrdJWrRxFGVPiyBUm2nczc+VzR/LypegazNnWeJZNM8AN8QUkMSExmGW/MEXs4a+iIMbgRMVUhkkdy++SttOXJIMQl/Hc8Nf0yeBvXR4FUpP1W45IF16COUhyrZ3iBTCGaNADBHLe9GO6lVULJQt6o8Wvo/u7ETkPp/X/byRs7SPK97JgG69xVa4YICYDL/PQfULqYdPbedeg1YesspSPBR7lVH8NGUEkR+UQR0zjTptAor8FqG7SOHDxjfvmns3g95XyVMS2nr34pCwo4hWeEtEIdCisIXMN47+YfuxRGNutaC2Ap9qYApjt1QwBCzX+EWwq2qNA0RPzVPTq0FzJIhPCPoU0nT9SydERM9drJsTk7atWibOar7XZ8tnKNC1wFJ6MEA/YZS99tUk6UXLzdzyeeFXAQLxc4Jm3sbPWbhjOFZcFaNDvqdOR4x9X4KcesQ9krFCNWbpqAwib8nkROdyFO/UbTc5Dw2Q2TyEfRYc2AmgKhlA6TdwVz3wcP15zwsY8TC2RHU+ymA6eCndS609Wek3vtrL0qOzjeQ2/zoVB8BQICVDMZGW9QEVkVffiI44UTPRAzyRYpM387avL81xFkomAsI4G7cR3QQvJrmbxQ2pIFJlPSCdCy4fPLVGS9NBmMThLdAr6pDDmYQwE76AHVyqjRAkum6j1e66poHLXpn2IJnEdVfKQOAM+YjfZhE4uYc3Ottq1aLPUz8WnFKWNBAAkFW/EZPRBGXETopt5eg9FRECG2Xigz6fncbbM5oGiHVWNnsvLPEJkUx/SXtkp1A/F7EIYLmfEoeYpJZPcqZJVPp0NRqDoVUIxLijXBPcWVrZUpQ4WE4DrHTj50lNuJn5KBTU45f5xJcxXBtH6reNisgOaeciZgrnaMZs6RJ5RETB/AS6/mEBZUEMvszTXrSDkPYNp31pqxa0OkuGSBNI/VYiKyhaU19RHjKdDiFyhxUWJM6z4MsTys7RgOdyFO/UaBf5KlNXdWjBfRTMtEisuk6Fd+qI5hOh23OE8ievKERxELF+y7HpXH8MrL1keal10ewv4u283uKIUVnVJsA5ICQ6/BGWFWQko3avji+PdQQ5Iw8o2mLLntgK8vK3h3jDxi1vmpfBG3VKI8pegYN5UQY9TUTtmc4a3EBnXnA5qEQZWmTJYdVVCKCcc/pTaIyfnqGFaxzDRqlmolG4Sbp16tvpM4v11CA2zKiLkmVuqHaPjfsrlkJr5z8WnFKU9NCB5RSko++VVAQFHkfMB8fUEyVW3+XpAcaKLwdrMxyW3UZWNkvfLSGx54c7KXwEJlTRhrEJt674QnuNBDLPIwHZkGm0MIemR1FxdLoWvrQJrGa0hGWuDQWyK4TmoWlPCI6E+BClHedQ6z71qScFg3c13gwL4axnhpt7SNB1NNMEFFFRlZQEw5EBpLOuyxnDrfQWVV42tG1ifuuP7vszGINMptYnrg7KF46RHMYsrnQ/VNHmEQbSGJcCPsgldvxXEozUbqb6jdMUtdjEKRIxRAiZro5pxd/s5bOeAA4B7extHKAYF4Rbm6H9KJpY43FkibpLyauuezCSXwY1M6nQNuFVoMCo93WG/EQkBVtO8A0f6BJkVyz/dyKr8wsPqgIIZejmN80dC7xRvIRONy/eYEZEt4JVWGXg8c4bXCU7jdN5rVGcOf3p==",
    "max-score": 6
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Huffman Compression",
    "stars": 3
  },
  {
    "id": "huffman",
    "prelude": "(* We refer to the input data (which we wish to compress) as \"text\". *)\n\ntype text =\n  string\n\n(* A Huffman tree is a binary tree whose leaves carry a character. *)\n\ntype tree =\n| Leaf of char\n| Node of tree * tree\n\n(* As a simple-minded representation of binary data, we use strings\n   made up exclusively of the characters '0' and '1'. *)\n\ntype data =\n  string\n\n(* An alphabet maps characters to integer frequencies. *)\n\ntype alphabet =\n  (char, int) Hashtbl.t\n\n(* An encoding dictionary maps input characters to binary strings. *)\n\ntype encoding_dictionary =\n  (char, data) Hashtbl.t\n\n(* A decoding dictionary is a Huffman tree. *)\n\ntype decoding_dictionary =\n  tree\n\n(* Sorting. *)\n\nlet sort : char list -> char list =\n  List.sort compare\n\n(* The leaves of a tree. *)\n\nlet leaves tree =\n  let rec leaves tree accu =\n    match tree with\n    | Leaf c ->\n        c :: accu\n    | Node (tree0, tree1) ->\n        leaves tree0 (leaves tree1 accu)\n  in\n  leaves tree []\n\n(* [entries table] produces a list of the key-value pairs found in the hash\n   table [table]. The list is sorted by key using OCaml's generic comparison\n   function [compare]. *)\n\nlet entries table =\n  Hashtbl.fold (fun key value entries ->\n    (key, value) :: entries\n  ) table []\n  |> List.sort (fun (key1, _) (key2, _) -> compare key1 key2)\n\n(* [write_char b c] converts the character [c] to a sequence of 8 binary\n   characters (each of which is '0' or '1'). This sequence is written to\n   the buffer [b]. *)\n\nlet write_char (b : Buffer.t) (c : char) =\n  let c = ref (Char.code c) in\n  for i = 0 to 7 do\n    Buffer.add_char b (if !c land 0x80 = 0 then '0' else '1');\n    c := !c lsl 1\n  done\n\n(* Assuming that the function [next] is a source of characters (i.e., every\n   time it is called, it produces the next character, read from some source)\n   [read_char next] reads 8 binary characters (each of which is '0' or '1')\n   and combines them to produce a single character. It is the inverse of\n   [write_char] above. *)\n\nlet read_char (next : unit -> char) : char =\n  let c = ref 0 in\n  let mask = ref 0x80 in\n  for i = 0 to 7 do\n    if next() = '1' then c := !c lor !mask;\n    mask := !mask lsr 1\n  done;\n  Char.chr !c\n",
    "template": "(* -------------------------------------------------------------------------- *)\n\n(* Building an alphabet out of a piece of text. *)\n\nlet build_alphabet (text : text) : alphabet =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* -------------------------------------------------------------------------- *)\n\n(* Building encoding and decoding dictionaries out of an alphabet. *)\n\n(* TO DO: Define a module [Q] that provides priority queues whose\n   elements are pairs of a tree and an integer frequency. Drawing\n   an element of the queue must yield an element whose frequency\n   is minimum. *)\n\nlet build_tree (alphabet : alphabet) : tree =\n  (* Assumption: the alphabet has at least two symbols. *)\n  assert (Hashtbl.length alphabet >= 2);\n  (* TO DO: Define this function. Use the module [Q] above. *)\n  raise TODO\n\nlet build_encoding_dictionary (tree : tree) : encoding_dictionary =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet build_dictionaries alphabet : encoding_dictionary * decoding_dictionary =\n  let tree = build_tree alphabet in\n  let encoding_dictionary = build_encoding_dictionary tree in\n  let decoding_dictionary = tree in\n  encoding_dictionary, decoding_dictionary\n\n(* -------------------------------------------------------------------------- *)\n\n(* Encoding input data. *)\n\nlet encode_char (dictionary : encoding_dictionary) (c : char) : data =\n  try\n    Hashtbl.find dictionary c\n  with Not_found ->\n    assert false (* unknown character *)\n\nlet encode (dictionary : encoding_dictionary) (text : text) : data =\n  let buffer = Buffer.create 1024 in\n  String.iter (fun c ->\n    Buffer.add_string buffer (encode_char dictionary c)\n  ) text;\n  Buffer.contents buffer\n\n(* -------------------------------------------------------------------------- *)\n\n(* Decoding compressed data. *)\n\nlet rec find (data : data) (i : int) (t : tree) : char * int =\n  assert (0 <= i && i <= String.length data);\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet decode (tree : tree) (data : data) (i : int) : text =\n  let buffer = Buffer.create 1024 in\n  let rec loop i =\n    if i = String.length data then\n      (* We have reached the end of the data. We are done. *)\n      Buffer.contents buffer\n    else begin\n      (* Decode one more character, and continue. *)\n      let c, i = find data i tree in\n      Buffer.add_char buffer c;\n      loop i\n    end\n  in\n  loop i\n\n(* -------------------------------------------------------------------------- *)\n\n(* Serializing a tree means encoding it as binary data.\n   Here, this means encoding it as a string of '0' and '1' characters. *)\n\nlet write (tree : tree) : data =\n  let b = Buffer.create 1024 in\n  let rec write (tree : tree) : unit =\n    (* TO DO: Define this auxiliary function. Hint: use [write_char]. *)\n    raise TODO\n  in\n  write tree;\n  Buffer.contents b\n\n(* Deserializing a tree means reading its representation as binary data\n   and transforming it back into a tree. *)\n\nlet read (s : data) : tree * int =\n  let i = ref 0 in\n  let next () : char =\n    assert (!i < String.length s);\n    let c = s.[!i] in\n    incr i;\n    c\n  in\n  let rec read () : tree =\n    (* TO DO: Define this auxiliary function. Hint: use [read_char]. *)\n    raise TODO\n  in\n  let tree = read() in\n  tree, !i\n\n(* -------------------------------------------------------------------------- *)\n\n(* Compressing and decompressing an input text. *)\n\nlet compress (text : text) : data =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet decompress (data : data) : text =\n  (* TO DO: Define this function. *)\n  raise TODO\n",
    "descr": [
      [
        "",
        "<h1 id=\"Huffman-Coding\">Huffman Coding</h1>\n\n<p><a href='https://en.wikipedia.org/wiki/Huffman_encoding'>Huffman coding</a>\nis a technique for encoding a sequence of characters (the\n<em>input data</em>) as a sequence of bits (the <em>encoded data</em>).</p>\n<p>We refer to the characters that appear in the input data as <em>input\ncharacters</em>. The set of all input characters is the <em>input alphabet</em>.</p>\n<p>Huffman coding is based on a <strong>fixed dictionary</strong>: that is, each character in\nthe input sequence is encoded as a fixed sequence of bits. This dictionary is\nconstructed in such a way as to minimize the length of the encoded data, in\nthe hope of achieving some compression.</p>\n<p>In order to permit unambiguous decoding, two distinct input characters must be\nencoded as two <strong>unrelated</strong> sequences of bits, where two sequences are\nunrelated if neither is a prefix of the other. Indeed, imagine what would\nhappen if, for instance, the character <code>&#39;a&#39;</code> was encoded as <code>&quot;0&quot;</code> and the\ncharacter <code>&#39;b&#39;</code> was encoded as <code>&quot;00&quot;</code>. Then, the encoded data <code>&quot;00&quot;</code> would be\nambiguous: it would represent both the character sequence <code>&quot;aa&quot;</code> and the\ncharacter sequence <code>&quot;b&quot;</code>. This problem arises because the bit sequences <code>&quot;0&quot;</code>\nand <code>&quot;00&quot;</code> are related: the former is a prefix of the latter.</p>\n<p>How can one guarantee, by construction, that the encodings of any two distinct\ninput characters are unrelated? The best answer to this question is to\nrepresent a dictionary as a <strong>tree</strong> where every leaf carries an input\ncharacter and every internal node carries two subtrees:</p>\n<pre><code>  type tree =\n  | Leaf of char\n  | Node of tree * tree</code></pre>\n\n<p>A path from the root to a leaf can be encoded as a bit string, where the bit\n<code>0</code> means &quot;go down towards the left child&quot; and the bit <code>1</code> means &quot;go down\ntowards the right child&quot;. Thus, for instance, in the tree <code>Node (Leaf &#39;a&#39;,\nNode (Leaf &#39;b&#39;, Leaf &#39;c&#39;))</code>, the leaf labeled <code>&#39;a&#39;</code> appears at the end of the\npath <code>&quot;0&quot;</code>, the leaf labeled <code>&#39;b&#39;</code> appears at the end of the path <code>&quot;10&quot;</code>, and\nthe leaf labeled <code>&#39;c&#39;</code> appears at the end of the path <code>&quot;11&quot;</code>. This represents\na dictionary where <code>&#39;a&#39;</code> is encoded as <code>&quot;0&quot;</code>, <code>&#39;b&#39;</code> is encoded as <code>&quot;10&quot;</code>, and\n<code>&#39;c&#39;</code> is encoded as <code>&quot;11&quot;</code>.</p>\n<p>The problematic dictionary where the character <code>&#39;a&#39;</code> is encoded as <code>&quot;0&quot;</code> and\nthe character <code>&#39;b&#39;</code> iss encoded as <code>&quot;00&quot;</code> cannot be represented by such a\ntree. (Think about it. The left child of the root node would have to be both a\nleaf and an internal node.)</p>\n<p>A valid tree is expected to satisfy the following properties:</p>\n<ul><li><p>Every character that appears at a leaf is indeed an input character.</p>\n</li><li><p>Every input character appears at some leaf.</p>\n</li><li><p>No two leaves carry the same character.</p>\n</li><li><p>This tree is optimal in the following sense:</p>\n</li></ul>\n\n<ul><li>Using this tree, the input data is encoded as\n a sequence of bits of length <code>k</code>;</li></ul>\n\n<ul><li>No other tree allows the input data to be encoded as\n a sequence of bits of length less than <code>k</code>.</li></ul>\n\n<p>Please pause for a moment and make sure that you understand why each of the\nfour above properties is desirable.</p>\n<p>In this exercise, we wish to perform the following tasks:</p>\n<ul><li><p>Out of a piece of input data,\n build a dictionary,\n that is,\n an optimal Huffman tree.</p>\n</li><li><p>Out of a dictionary\n and a piece of encoded data,\n recover\n the original input data.</p>\n</li><li><p>Find a way of encoding a dictionary itself\n as a sequence of bits,\n and a way of reading it back.</p>\n</li><li><p>Combine these pieces to define stand-alone\n compression and decompression\n functions.</p>\n</li></ul>\n\n<h2 id=\"Some-Definitions\">Some Definitions</h2>\n\n<p>We refer to the input data, which we wish to encode, as <em>text</em>.\nIt is a sequence of characters. We represent it in OCaml as a\nvalue of type <code>string</code>.</p>\n<pre><code>  type text =\n    string</code></pre>\n\n<p>We represent encoded data, or <em>data</em> for short, as a string where every\ncharacter is either the character <code>&#39;0&#39;</code> or the character <code>&#39;1&#39;</code>. (We choose\nthis representation for the sake of simplicity. Because each character in an\nOCaml string occupies 8 bits, this is a naïve representation, which occupies 8\ntimes more space than really necessary. In a real-world implementation, one\nwould arrange for binary data to be represented as a sequence of bits.)</p>\n<pre><code>  type data =\n    string</code></pre>\n\n<p>In order to build a Huffman tree that is optimal for a certain input text, one\nneeds to know how many times each input character occurs in the input text. In\nother words, we need a map of every input character to a (non-zero) integer\nfrequency. We refer to such a map as an <em>alphabet</em>.</p>\n<pre><code>  type alphabet =\n    (char, int) Hashtbl.t</code></pre>\n\n<p>Because the tree representation of the dictionary is perfectly suited while\ndecoding, we define a <em>decoding dictionary</em> to be a tree. While encoding, on\nthe other hand, it is more convenient to convert the dictionary to a more\nconvenient representation, namely a map of every input character to its\nencoding. We refer to such a map as an <em>encoding dictionary</em>.</p>\n<pre><code>  type decoding_dictionary =\n    tree\n\n  type encoding_dictionary =\n    (char, data) Hashtbl.t</code></pre>\n\n<p>The following functions can be useful to you while testing your code, and are\nalso used by the automated grading system, so their names can appear in some\nof the messages produced by the grading system. <code>sort</code> sorts a list of\ncharacters. <code>leaves</code> returns a list of all leaves of a tree, read from left to\nright. <code>entries</code> returns a view of a hash table as a list of key-value pairs.</p>\n<pre><code>  val sort : char list -&gt; char list\n  val leaves : tree -&gt; char list\n  val entries : (&#39;a, &#39;b) Hashtbl.t -&gt; (&#39;a * &#39;b) list</code></pre>\n\n<h2 id=\"Analyzing-the-Input-Alphabet\">Analyzing the Input Alphabet</h2>\n\n<p>Our first task, given an input text, is to compute its alphabet.</p>\n<p><strong>Question 1.</strong>\nWrite a function <code>build_alphabet</code>\nof type <code>text -&gt; alphabet</code>\nsuch that\n<code>build_alphabet text</code>\nreturns the alphabet of the input text <code>text</code>,\nthat is,\na map of every character that appears in <code>text</code> to\nthe number of times this character appears in <code>text</code>.</p>\n<p><em>Hint.</em> Use the standard library function <code>String.iter</code> to iterate over all\ncharacters in the input text. Use the functions provided by the standard\nlibrary module <code>Hashtbl</code> to create, read, and update a hash table.</p>\n<h2 id=\"Building-an-Optimal-Tree-Huffman-39-s-Algorithm\">Building an Optimal Tree: Huffman&#39;s Algorithm</h2>\n\n<p>Once we have an alphabet, a map of characters to frequencies,\nwe wish to compute a tree that is optimal with respect to this\nalphabet.</p>\n<p>Huffman&#39;s algorithm performs this task. This algorithm maintains\na set of pairs of a tree and an integer frequency.\nIt proceeds as follows:</p>\n<ul><li><p>For each character <code>&#39;c&#39;</code> with frequency <code>freq</code> in the alphabet,\n create a one-leaf tree <code>Leaf c</code> and pair it with the frequency <code>freq</code>.</p>\n</li><li><p>As long as possible,\n pick two pairs <code>(tree0, freq0)</code> and <code>(tree1, freq1)</code>\n of minimal frequencies <code>freq0</code> and <code>freq1</code> out of the set.\n Build the composite tree <code>Node (tree0, tree1)</code> out of them,\n and insert it back into the set with frequency <code>freq0 + freq1</code>.</p>\n</li></ul>\n\n<p>The algorithm stops where the set contains only a single pair <code>(tree, freq)</code>.\nThe tree <code>tree</code> is the desired tree. One can prove that it is optimal with\nrespect to the input alphabet.</p>\n<p>In order to implement this algorithm in an efficient manner,\na priority queue is required. The OCaml standard library does\nnot provide one, but we do. Its signature is as follows:</p>\n<pre><code>  module BinomialQueue (X : sig\n    type t\n    val compare: t -&gt; t -&gt; int\n  end) : sig\n    type element = X.t\n    type t\n    val empty: t\n    val is_empty: t -&gt; bool\n    val insert: element -&gt; t -&gt; t\n    val extract: t -&gt; element * t\n  end</code></pre>\n\n<p>The functor <code>BinomialQueue</code> expects to be applied to a module that defines a\ntype <code>t</code> of elements, equipped with a total order. The function call <code>compare\nx y</code> must return a negative result if <code>x</code> is less than <code>y</code>, zero if <code>x</code> and\n<code>y</code> are equal, and a positive result if <code>x</code> is greater than <code>y</code>.</p>\n<p>The functor <code>BinomialQueue</code> produces a module that defines a type <code>t</code> of\n(immutable) priority queues. Four operations are provided. <code>empty</code> is the\nempty queue. <code>is_empty</code> tests whether a queue is empty. <code>insert x q</code> is the\nqueue that contains the element <code>x</code> in the addition to the elements of the\nqueue <code>q</code>. <code>extract</code> must be applied to a nonempty queue <code>q</code>. It returns a\npair <code>(x, q&#39;)</code> where <code>x</code> is a <em>minimal</em> element of <code>q</code> (with respect to the\nuser-specified total order on elements) and <code>q&#39;</code> is the queue <code>q</code> deprived of\n<code>x</code>.</p>\n<p><strong>Question 2.</strong>\nDefine a module <code>Q</code> that provides priority queues whose\nelements are pairs of a tree and an integer frequency. Drawing\nan element of the queue must yield an element whose frequency\nis minimal.\nThen,\ndefine the function <code>build_tree</code>,\nwhose type is <code>alphabet -&gt; tree</code>,\nwhich implements Huffman&#39;s algorithm,\nas described above.</p>\n<h2 id=\"Building-an-Encoding-Dictionary\">Building an Encoding Dictionary</h2>\n\n<p>As explained at the beginning of this exercise,\na tree defines a correspondence between input characters\nand sequences of bits:\nindeed,\na path from the root to a leaf corresponds to a bit string, where the bit\n<code>0</code> means &quot;go down towards the left child&quot; and the bit <code>1</code> means &quot;go down\ntowards the right child&quot;.</p>\n<p>In order to encode data in an efficient manner,\nwe need a fast way of mapping each input character\nto its encoding, a bit string.\nIn other words, we need an encoding dictionary:\na map of every input character to its encoding.</p>\n<p>Such a map can be built in one traversal of the tree.</p>\n<p><strong>Question 3.</strong>\nDefine the function <code>build_encoding_dictionary</code>,\nwhose type is <code>tree -&gt; encoding_dictionary</code>.</p>\n<h2 id=\"Decoding-Data\">Decoding Data</h2>\n\n<p>In order to interpret a sequence of bits as a character,\nit suffices to view this sequence as a description of a\npath in the tree. By descending along this path, one reaches\na leaf, which carries a character.</p>\n<p><strong>Question 4.</strong> Write a function <code>find</code> of type\n<code>data -&gt; int -&gt; tree -&gt; char * int</code>\nsuch that <code>find data i t</code>\ndescends in the tree <code>t</code> along the path\nthat is encoded at index <code>i</code> in the binary data <code>data</code>,\nuntil a leaf is reached,\nand returns the character <code>c</code> carried by that leaf\nas well as an updated index into the binary data <code>data</code>. The index corresponds to the bit in <code>data</code> that follows the encoding of <code>c</code>.</p>\n<h2 id=\"Encoding-and-Decoding-the-Decoding-Dictionary-Itself\">Encoding and Decoding the Decoding Dictionary Itself</h2>\n\n<p>Naturally, encoded data can be successfully decoded only\nif the decoding dictionary is available. Thus, when one\nwishes to store encoded data on disk or to transmit onto\nthe network, one must store or transmit not only the\nencoded data, but also the decoding dictionary.</p>\n<p>Because the decoding dictionary is a tree, it must first\nbe <strong>serialized</strong>, that is, transformed into binary data.</p>\n<p>At the other end, whoever wishes to decode the data must\nfirst <strong>deserialize</strong> the decoding dictionary, that is,\nread its binary representation and convert it back to a\ntree.</p>\n<p><strong>Question 5.</strong>\nComplete the definitions of the functions <code>write</code>,\nwhose type is <code>tree -&gt; data</code>,\nand <code>read</code>,\nwhose type is <code>data -&gt; tree * int</code>.</p>\n<h2 id=\"Putting-Everything-Together\">Putting Everything Together</h2>\n\n<p>It is now time to put everything together\nand define easy-to-use encoding and decoding\nfunctions.</p>\n<p><strong>Question 6.</strong>\nDefine the functions <code>compress</code>,\nwhose type is <code>text -&gt; data</code>,\nand <code>decompress</code>,\nwhose type is <code>data -&gt; text</code>.\nThey should be inverses of one another: that is,\n<code>decompress (compress text)</code> should be <code>text</code>.\nCompression should produce binary data: that is,\nthe string <code>compress text</code> should contain no characters\nother than <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code>.\nFurthermore,\nfor sufficiently long and redundant input texts,\ncompression should save some space, that is,\nthe length of the string <code>compress text</code>\nshould be less than 8 times the length of <code>text</code>.</p>\n<p><em>Hint.</em> The data <code>compress text</code> must contain both the serialized decoding\ndictionary and the encoded data.</p>\n<p><em>Note.</em> The factor of 8 in the length is due to the fact that each OCaml\ncharacter in the input text takes up 8 bits, whereas each <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>\ncharacter in the encoded text represents one bit.</p>\n"
      ]
    ],
    "prepare": "",
    "test": "",
    "solution": "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",
    "max-score": 6,
    "depend": null,
    "dependencies": []
  },
  null
]
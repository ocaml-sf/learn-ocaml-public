[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Building a Game Tree",
    "stars": 3
  },
  {
    "id": "tictactoe",
    "prelude": "(* The type of on-demand sequences. (As of OCaml 4.07, this type exists\n   in the standard library.) *)\n\nmodule Seq = struct\n\n  type 'a t = unit -> 'a node\n\n  and +'a node =\n  | Nil\n  | Cons of 'a * 'a t\n\n  let nil () =\n    Nil\n\n  (* A word of warning: [length] does not terminate if it is applied\n     to an infinite sequence. *)\n\n  let rec length accu (xs : 'a t) : int =\n    match xs() with\n    | Nil ->\n        accu\n    | Cons (_, xs) ->\n        length (accu + 1) xs\n\n  let length xs =\n    length 0 xs\n\n  let rec map (f : 'a -> 'b) (xs : 'a t) : 'b t =\n    fun () ->\n      match xs() with\n      | Nil ->\n          Nil\n      | Cons (x, xs) ->\n          Cons (f x, map f xs)\n\n  let rec filter (p : 'a -> bool) (xs : 'a t) : 'a t =\n    fun () ->\n      match xs() with\n      | Nil ->\n          Nil\n      | Cons (x, xs) ->\n          if p x then\n            Cons (x, filter p xs)\n          else\n            filter p xs ()\n\n  let rec assoc (a : 'a) (abs : ('a * 'b) t) : 'b =\n    match abs() with\n    | Nil ->\n        raise Not_found\n    | Cons ((a', b), abs) ->\n        if a = a' then\n          b\n        else\n          assoc a abs\n\n  let rec of_list (xs : 'a list) : 'a t =\n    fun () ->\n      match xs with\n      | [] ->\n          Nil\n      | x :: xs ->\n          Cons (x, of_list xs)\n\n  let rec to_list (xs : 'a t) : 'a list =\n    match xs() with\n    | Nil ->\n        []\n    | Cons (x, xs) ->\n        x :: to_list xs\n\n  let rec interval i j : int t =\n    if i < j then\n      fun () ->\n        Cons (i, interval (i+1) j)\n    else\n      nil\n\nend\n\n(* -------------------------------------------------------------------------- *)\n\n(* A value is an integer value that reflects the current player view (or\n   evaluation) of the current game configuration. In a zero-sum game, the\n   opponent's view is the opposite of the current player's view, and the\n   value 0 means that both players are even; in particular, in a situation\n   where no more moves can be played, the value 0 represents a draw. *)\n\ntype value =\n  int\n\n(* All of the values that we consider lie in the range [bottom] to [top],\n   inclusive. Note that [bottom] is the opposite of [top]. *)\n\nlet bottom, top =\n  -max_int, max_int\n\n(* We assume that, in every game configuration, a finite number of moves\n   are permitted, and that each of these moves can be identified with an\n   integer code. (A more realistic implementation would be parametric in\n   the type [move].) *)\n\ntype move =\n  int\n\n(* A game tree is either a leaf or not a leaf. A leaf [TLeaf v] means that the\n   game is over and that its value (in the eyes of the current player) is [v].\n   A nonleaf [TNonLeaf mts] means that the game is not over. In that case, at\n   least one move is permitted. The sequence [mts] is then a nonempty sequence\n   of pairs of a permitted move [m] and the subtree that corresponds to this\n   move. This sequence covers all of the permitted moves. *)\n\ntype tree =\n  | TLeaf of value\n  | TNonLeaf of offspring\n\nand offspring =\n  (move * tree) Seq.t\n\n(* [descendant path tree] extracts the subtree found at path [path] in the\n   tree [tree]. A path is a list of moves. The exception [Not_found] is raised\n   if this path does not exist in this tree. *)\n\nlet rec descendant (path : move list) (tree : tree) : tree =\n  match path, tree with\n  | [], _ ->\n      (* The path is empty. *)\n      tree\n  | _ :: _, TLeaf _ ->\n      (* This path does not exist. *)\n      raise Not_found\n  | move :: path, TNonLeaf offspring ->\n      descendant path (Seq.assoc move offspring)\n\n(* -------------------------------------------------------------------------- *)\n\n(* A bitmap is an OCaml machine word (in other words, an OCaml integer) whose\n   bits represent an array of 63 Boolean values. (An OCaml machine word is 63\n   bits wide.) *)\n\ntype bitmap =\n  int\n\n(* An offset is the number of a bit within a machine word. By convention, the\n   least significant bit is numbered 0, while the most significant bit is\n   numbered 62. *)\n\ntype offset =\n  int\n\n(* A direction is a function of [w] and [h] to an offset. *)\n\ntype direction =\n  int -> int -> offset\n\n(* -------------------------------------------------------------------------- *)\n\n(* In a [(w, h, k)] board game, the parameters [w] and [h] are the width and\n   height of the board, while the parameter [k] is the number of consecutive\n   aligned marks that a player must achieve in order to win. In the standard\n   game of Tic-Tac-Toe, all three parameters are equal to 3. *)\n\n(* The parameters [w], [h], [k] remain of course fixed throughout an entire\n   game. We nevertheless record them as part of the game state because this\n   is convenient. *)\n\n(* The bitmap [player_bitmap] stores the marks of the player who is currently\n   up, while the bitmap [opponent_bitmap] stores the marks of his opponent. *)\n\n(* The integer field [past_moves] is the number of moves that have been played\n   already. This field is redundant, as its value can be recovered by counting\n   how many bits are set in the bitmaps [player_bitmap] and [opponent_bitmap].\n   We nevertheless include this field because it is convenient. *)\n\ntype state = {\n  w: int; h: int; k: int;\n  player_bitmap: bitmap;\n  opponent_bitmap: bitmap;\n  past_moves: int;\n}\n",
    "template": "(* -------------------------------------------------------------------------- *)\n\n(* Accessing and updating a bitmap, one bit at a time. *)\n\nlet encode w h i j : offset =\n  assert (0 <= i && i <= w);\n  assert (0 <= j && j <= h);\n  (h + 1) * i + j\n\nlet decode w h (o : offset) : int * int =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet mask w h i j : bitmap =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet read w h (bitmap : bitmap) i j : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet update w h (bitmap : bitmap) i j : bitmap =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* -------------------------------------------------------------------------- *)\n\n(* Finding out whether a bitmap contains an alignment of [k] marks. *)\n\nlet north w h : offset =\n  1\n\nlet east w h : offset =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet northeast w h : offset =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet southeast w h : offset =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet rec alignments w h k direction bitmap : bitmap =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nlet has_alignment w h k bitmap : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* -------------------------------------------------------------------------- *)\n\n(* Working with the game states of Tic-Tac-Toe. *)\n\n(* The initial game state. *)\n\nlet initial w h k : state =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* [square_is_available state (i, j)] indicates whether the square at (i, j)\n   is part of the board (that is, not part of the extra row and column that\n   we have added) and is empty, that is, marked by neither player. *)\n\nlet square_is_available state (i, j) : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* Assuming that the square at (i, j) is available, [play state i j] is\n   the new game state after the current player plays in this square. *)\n\nlet play state i j : state =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* [no_square_is_available state] returns [true] if no square is\n   available (which implies that no move can be played). *)\n\nlet no_square_is_available state : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* [opponent_has_won state] returns [true] if the opponent (that is,\n   the player who is currently *not* up) has an alignment. *)\n\nlet opponent_has_won state : bool =\n  (* TO DO: Define this function. *)\n  raise TODO\n\n(* [tree state] returns the game tree whose root corresponds to the game\n   state [state]. *)\n\n(* Assuming that at least one move is permitted in the game state [state],\n   [offspring state] returns the sequence of permitted moves and subtrees in\n   this state. Each element of the sequence must be a pair [(move, subtree)]\n   of a permitted move and a subtree. The integer value [move] must be exactly\n   [encode w h i j], where [i] and [j] indicate which square is being played.\n   The subtree [subtree] must be the game tree that arises out of the game\n   state obtained by playing this move. *)\n\nlet rec tree (state : state) : tree =\n  (* TO DO: Define this function. *)\n  raise TODO\n\nand offspring (state : state) : offspring =\n  (* TO DO: Define this function. *)\n  raise TODO\n",
    "descr": [
      [
        "",
        "<h1 id=\"Building-a-Game-Tree\">Building a Game Tree</h1>\n\n<p>In this exercise, we build a <strong>game tree</strong> for the game of\n<a href=\"https://en.wikipedia.org/wiki/Tic-tac-toe\" target=\"_blank\" rel=\"noopener noreferrer\">Tic-Tac-Toe</a>.\nThis allows us to use the Alpha-Beta algorithm (developed in a\n<a onclick=\"top.location='/exercises/alpha_beta/';\" href=''>companion\nexercise</a>) to evaluate this tree and construct an optimal playing\nstrategy.</p>\n<p>In the original game of Tic-Tac-Toe, the players use a board of width 3 and\nheight 3, and the first player who aligns 3 marks (horizontally, vertically,\nor diagonally) wins. We generalize the game as follows: the game is played on\na board of width <code>w</code> and height <code>h</code>, and a winning <strong>alignment</strong> is a series\nof <code>k</code> consecutive marks on a row, a column, or a diagonal.</p>\n<p>In the first part of this exercise, we momentarily set aside the game of\nTic-Tac-Toe and concentrate on representing a game board as a bitmap. In the\nsecond part of this exercise, we come back to Tic-Tac-Toe, choose a\nrepresentation of the game state, and build a game tree.</p>\n<h2 id=\"Representing-a-Game-Board-as-a-Bitmap\">Representing a Game Board as a Bitmap</h2>\n\n<p>We are interested in representing in memory a game board whose width is <code>w</code>\nand whose height is <code>h</code>. We suppose, for now, that there is only one kind of\nmark, so that each square on the board is either empty or marked. A board is\nthen a two-dimensional Boolean matrix whose dimensions are <code>w</code> and <code>h</code>.</p>\n<p>One could represent such a matrix in memory as an array of Booleans whose size\nis <code>w * h</code>. However, that would be quite costly.\nBecause every OCaml value occupies one word of memory,\nan array of <code>w * h</code> Boolean values occupies\n<code>w * h</code> words of memory.\nOn a modern machine, one word is 64 bits.\nThus, this representation is 64 times less compact than it could be!\nThis entails a waste of space\nand (therefore) a waste of time.</p>\n<p>For these reasons, we prefer to pack this matrix into a single <strong>integer</strong>\nvalue, so that each entry in the matrix is represented by <strong>one bit</strong>. We\nrefer to this representation as a <strong>bitmap</strong>, and define the type <code>bitmap</code>\nas a synonym for <code>int</code>. Quite obviously, this\nrepresentation is much more compact than an OCaml array of Booleans.\nFurthermore, it opens the door to the use of <strong>bit-level parallelism</strong>, that\nis, the use of machine instructions that operate on all bits at once. This is\nuseful in the implementation of certain operations, such as the detection of\nan alignment.</p>\n<p>In order to facilitate the detection of an alignment, it is\nconvenient to leave an empty row on top of the matrix and an empty column on\nits right-hand side. Therefore, a matrix whose dimensions are <code>w + 1</code> and <code>h +\n1</code> is required.</p>\n<p>As long as the product <code>(w + 1) * (h + 1)</code> is strictly less than the word size\n(that is, 64), such a matrix can be represented as a bitmap within a single\nOCaml integer value.</p>\n<p>By convention, the bits in an OCaml integer value are numbered from <code>0</code>\n(included) to <code>63</code> (excluded). The least significant bit is numbered 0.</p>\n<p>We adopt the convention that the board square whose coordinates are <code>i</code> and\n<code>j</code> is encoded by the bit whose number is <code>(h + 1) * i + j</code>. Here, <code>i</code> is a\ncolumn index, and ranges from <code>0</code> (included) to <code>w</code> (included), while <code>j</code> is a\nrow index and ranges from <code>0</code> (included) to <code>h</code> (included).</p>\n<p>The function <code>encode</code>, which we have defined for you, converts a pair of\nindices <code>i</code> and <code>j</code> to an <strong>offset</strong>, that is, a bit number. The expression\n<code>encode w h i j</code> is synonymous with <code>(h + 1) * i + j</code>. The type <code>offset</code> is\na synonym for <code>int</code>.</p>\n<p>According to this convention, a 3x3 board occupies 16 bits,\nand is represented as follows:</p>\n<pre><code>   .  .  . .\n   2  6 10 .\n   1  5  9 .\n   0  4  8 .</code></pre>\n\n<p>This drawing means that the bits 0, 1, 2 encode the leftmost column;\nthe bits 4, 5, 6 encode the central column; and\nthe bits 8, 9, 10 encode the rightmost column.\nBy convention, the bits 3, 7, 11, 12, 13, 14, 15\nencode the extra empty row and column mentioned above;\ntheir value is always zero.</p>\n<p>Thus, a 3x3 board where every square is marked is represented by the bitmap\n<code>0000011101110111</code>, that is, the integer value <code>0b0000011101110111</code>, which in\ndecimal notation is written <code>1911</code>. A 3x3 board where only the leftmost column\nis marked is represented by the bitmap <code>0000000000000111</code>, that is, by the\ninteger 7. A board where only the bottom row is marked is represented by the\nbitmap <code>0000000100010001</code>, that is, by the integer 273. An empty board is\nrepresented by the bitmap <code>0000000000000000</code>, that is, by the integer 0.</p>\n<p>For convenience, we provide a function <code>bitmap</code> of type <code>int -&gt; int -&gt; string\n-&gt; bitmap</code> such that <code>bitmap w h</code> converts a string representation of a bitmap\nto an actual bitmap. The string must contain <code>(w + 1) * (h + 1)</code> characters,\neach of which must be <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>. (Additional whitespace characters can be\npresent, and are ignored. The character <code>&#39;.&#39;</code> is interpreted as <code>&#39;0&#39;</code>.) Thus,\na 3x3 board where every square is marked can be obtained as follows:</p>\n<pre><code>  bitmap 3 3 &quot;\n    ....\n    111.\n    111.\n    111.\n  &quot;</code></pre>\n\n<p>You can use the Toplevel pane to check that this expression produces the value\n<code>1911</code>, as expected. You do <em>not</em> need to use the function <code>bitmap</code> in your\ncode. The function <code>bitmap</code> can appear in the messages produced by the\nautomatic grading system for this exercise.</p>\n<p>In the text so far, we have distinguished between a board (an abstract object\nthat we have in mind) and a bitmap (a representation of this object in\nmemory), and we have repeatedly written that a bitmap <em>represents</em> a board. In\nthe following, however, maintaining this careful distinction would lead us to\nwrite rather convoluted sentences, so we abandon this distinction and use the\nwords &quot;bitmap&quot; and &quot;board&quot; interchangeably.</p>\n<p><strong>Question 1.</strong> Define a function <code>decode</code> of type <code>int -&gt; int -&gt; offset -&gt;\nint * int</code> such that <code>decode w h</code> is the inverse of <code>encode w h</code>, that is,\n<code>decode w h</code> maps an offset back to a pair of a column index <code>i</code> and a row\nindex <code>j</code>.</p>\n<p><strong>Question 2.</strong> Define a function <code>mask</code> of type <code>int -&gt; int -&gt; int -&gt; int -&gt;\n  bitmap</code> such that, in the board <code>mask w h i j</code>, the square at <code>(i, j)</code> is\n marked, and every other square is unmarked.</p>\n<p><em>Hint.</em> For instance, in the board <code>mask 3 3 1 1</code>, only the square at (1, 1)\nmust be marked. According to the above drawing, the square at (1, 1) is\nrepresented by the bit number 5, so <code>mask 3 3 1 1</code> should yield the integer\nvalue <code>0b0000000000100000</code>, or in other words, the integer value 32.</p>\n<p><em>Hint.</em> Use <code>encode</code> and the\n<em><a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift\" target=\"_blank\" rel=\"noopener noreferrer\">logical shift left</a></em> operator <code>lsl</code>.</p>\n<p><strong>Question 3.</strong> Define a function <code>read</code> of type <code>int -&gt; int -&gt; bitmap -&gt; int\n-&gt; int -&gt; bool</code> such that <code>read w h bitmap i j</code> is <code>true</code> and if only if the\nsquare at <code>(i, j)</code> is marked in the board <code>bitmap</code>.</p>\n<p><em>Hint.</em> Use <code>mask</code> and the\n<em><a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#AND\" target=\"_blank\" rel=\"noopener noreferrer\">logical and</a></em> operator <code>land</code>.</p>\n<p><strong>Question 4.</strong> Define a function <code>update</code> of type <code>int -&gt; int -&gt; bitmap -&gt;\nint -&gt; int -&gt; bitmap</code> such that the board <code>update w h bitmap i j</code> is marked\nat <code>(i, j)</code> and is identical to the board <code>bitmap</code> elsewhere.</p>\n<p><em>Hint.</em> Use <code>mask</code> and the\n<em><a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#OR\" target=\"_blank\" rel=\"noopener noreferrer\">logical or</a></em> operator <code>lor</code>.</p>\n<p>Recall that a <code>k</code>-<strong>alignment</strong> is a series of <code>k</code> consecutive marks along a\nrow, a column, or a diagonal.</p>\n<p>There exist four kinds of alignments. In other words, there are four\n<strong>directions</strong> along which an alignment can exist: <em>north</em>, <em>east</em>,\n<em>northeast</em>, and <em>southeast</em>. (We make an arbitrary choice between\n<em>north</em> and <em>south</em>, as there is no need to consider both; similarly\nfor the other directions.)</p>\n<p>Each direction can be represented by a positive <em>offset</em>. Indeed, recall how a\n3x3 board is represented:</p>\n<pre><code>   .  .  . .\n   2  6 10 .\n   1  5  9 .\n   0  4  8 .</code></pre>\n\n<p>Adding 1 to a bit number corresponds to taking one step towards the north.\nThus, the direction <em>north</em> is represented by the offset 1. For this reason,\nwe define the auxiliary function <code>north</code> by <code>north w h = 1</code>.</p>\n<p><strong>Question 5.</strong> Define the auxiliary functions <code>east</code>, <code>northeast</code>, and\n<code>southeast</code> in a similar manner.</p>\n<p>We wish to be able to efficiently detect the existence of an alignment\nanywhere on the board. Fortunately, bit-level parallelism is our friend: the\nbitwise operations (<code>lsr</code>, <code>lsl</code>, <code>land</code>, <code>lor</code>, <code>=</code>, etc.) operate on all\nbits at once, and are extremely cheap. It turns out that, with a small number\nof such operations, one can detect the presence of an alignment anywhere on\nthe board.</p>\n<p>The idea is as follows:</p>\n<ul><li><p>The board, which we know, is the set of all squares\n such that there is a mark on this square.</p>\n</li><li><p>In <em>one</em> well-chosen bitwise operation, one can compute the set\n of all squares\n such that there is a mark to the north of this square.</p>\n</li><li><p>In <em>one more</em> well-chosen bitwise operation, one can combine the\n above two bitmaps and compute the set of all squares\n such that there is a mark on this square\n and a mark to the north of this square.\n In other words, this is the set of all squares such that there is a\n northern 2-alignment that begins at this square.</p>\n</li><li><p>In just <em>two more</em> bitwise operations,\n one can compute the set of all northern 4-alignments.</p>\n</li><li><p>This process can be generalized to any\n value of <code>k</code> and to any of the four directions.</p>\n</li></ul>\n\n<p>We define the type <code>direction</code> as a synonym for <code>int -&gt; int -&gt; offset</code>,\nso the functions <code>north</code>, <code>east</code>, <code>northeast</code> and <code>southeast</code> have type\n<code>direction</code>.</p>\n<p><strong>Question 6.</strong> Define a function <code>alignments</code> of type\n<code>int -&gt; int -&gt; int -&gt; direction -&gt; bitmap -&gt; bitmap</code>\nsuch that <code>alignments w h k direction bitmap</code>\nis the set of all squares such that there is a <code>k</code>-alignment\nalong <code>direction</code> that begins on this square.</p>\n<p><em>Hint.</em> Give a recursive definition of <code>alignments</code>. The base case can be 0\nor 1. The recursive structure can be chosen so that the runtime complexity of\n<code>alignments</code> is O(<em>log</em> k).</p>\n<p><strong>Question 7.</strong> Define a function <code>has_alignment</code> of type\n<code>int -&gt; int -&gt; int -&gt; bitmap -&gt; bool</code>\nsuch that <code>has_alignment w h k bitmap</code> is <code>true</code> if and only if\nthere exists a <code>k</code>-alignment, along any of the four directions,\nanywhere on the board.</p>\n<h2 id=\"Representing-the-Game-State-of-Tic-Tac-Toe\">Representing the Game State of Tic-Tac-Toe</h2>\n\n<p>In a <a href=\"https://en.wikipedia.org/wiki/M,n,k-game\" target=\"_blank\" rel=\"noopener noreferrer\">(w, h, k)-game</a>, the\nparameters <code>w</code> and <code>h</code> are the width and height of the board, while the\nparameter <code>k</code> is the size of an alignment that a player must achieve in order\nto win. The parameters <code>w</code>, <code>h</code>, <code>k</code> remain fixed throughout an entire game.\nIn the game of Tic-Tac-Toe, they are equal to 3.</p>\n<p>We represent a game state in OCaml as a record with the following fields:</p>\n<pre><code>  type state = {\n    w: int; h: int; k: int;\n    player_bitmap: bitmap;\n    opponent_bitmap: bitmap;\n    past_moves: int;\n  }</code></pre>\n\n<p>The current state of the board is represented by <em>two bitmaps</em>. The bitmap\n<code>player_bitmap</code> stores the marks of the player who is currently up, while the\nbitmap <code>opponent_bitmap</code> stores the marks of his opponent.</p>\n<p>The integer field <code>past_moves</code> stores the number of moves that have been\nplayed. This field is redundant, as its value can be recovered by counting how\nmany bits are set in the bitmaps <code>player_bitmap</code> and <code>opponent_bitmap</code>.\nNevertheless, it is convenient to have this field: this removes the need for\nan efficient implementation of the &quot;bit count&quot; operation.</p>\n<p>It is now up to you to write a number of simple auxiliary functions that\noperate on game states, namely <code>initial</code>, <code>square_is_available</code>, <code>play</code>,\n<code>no_square_is_available</code>, and <code>opponent_has_won</code>. (No automatic grading\nis performed at this stage.) Then, you can move on to the final question:</p>\n<p><strong>Question 8.</strong> Define a function <code>tree</code> of type <code>state -&gt; tree</code>\nsuch that <code>tree state</code> is the game tree associated with\nthe game state <code>state</code>.</p>\n<p><em>Note.</em> The definition of a game tree is explained in the\n<a onclick=\"top.location='/exercises/alpha_beta/';\" href=''>companion\nexercise</a>\non the Alpha-Beta algorithm.</p>\n<p><em>Hint.</em> In a game tree, the value of a leaf is always relative to the player\nwho is currently up. This value should be +1 if this player has won, 0 if the\ngame is a draw, and -1 if this player has lost.</p>\n<p><em>Hint.</em> In Tic-Tac-Toe, as in many common games, there cannot be a leaf whose\nvalue is +1. That would mean that our opponent has just played, yet we have\nwon. This is impossible: no move can cause a player to lose immediately.</p>\n<p><em>Hint.</em> The functions <code>Seq.interval</code>, <code>Seq.filter</code>, and <code>Seq.map</code> can be\n helpful in the construction of a sequence of permitted moves.</p>\n<h2 id=\"To-Go-Further\">To Go Further</h2>\n\n<p>If you have completed both this exercise and its <a onclick=\"top.location='/exercises/alpha_beta/';\" href=''>companion exercise</a> on the\nAlpha-Beta algorithm,\nthen we recommend combining them to solve Tic-Tac-Toe.\nYou can verify that, if both players play perfectly,\nthen the game must end in a draw.\nAlthough the game tree for Tic-Tac-Toe has size 549946,\nthe Alpha-Beta algorithm evaluates it in a fraction of a second.\n(The algorithm builds and explores only part of the tree.)</p>\n<p>To explore larger values of <code>w</code>, <code>h</code>, and <code>k</code>, such as (4, 4, 4),\nit is necessary to improve the Alpha-Beta algorithm; in particular,\na <a href=\"https://en.wikipedia.org/wiki/Transposition_table\" target=\"_blank\" rel=\"noopener noreferrer\">transposition table</a> is required.</p>\n"
      ]
    ],
    "prepare": "SfSgxl5O2ImvLu04eGmhgGsLTT6ZXB/4J/o2W94pwxdebQggEGCSDHMthvmxvKZ9oGD04n1iuOqqGs/FfzfXbB2hQQUuXd5LduYjr1/BNIccTtIH7PAZ/8oVFwER9WmLFJrPuwULFqfJNGb0C8EJufTHnQ4VQ/+whodNmYe1bDkMv+ezWosmpbVb9qXJU2KHLUEZBFQZVFpfQkBSV3uCnDrfEWd+JIh1N8nserTesj7BNNUvNmjyhaUWz6H/320fBjQOUSN3p5qKsTHso9V9wnILlUbDf/Hx2BAW7o0EZtEOmcTcj9Yd/s5bOep+Yl7bs1eNCM64XO0vTQX+ndCe+Qfcv3Z2HHrKgj3HaspD9gk8CB/MU/ZMVSlQUkA1r+v20exI0/Uny6h5NbPsae3fCtQl/CpvPeurgFHZYqJrlqwC19lUMRDIRNilL+8FTC7u1QPUGgXjAeolEES2TJEx8Wvo/eKUG/uglFZn6pJpGPus7N1SlkgWaYgyTIyD6PRJRuyfukYO3IT64JGpolXSsSxdTURYVkwVPFRUURzgqI1epQsAVW73BmAlbO8hqbxroDf2VU/nfre9Cc/Dgj7XfoIjSkExEJt674Rae1kGZLsoUwUFp31ZbXJaFs6C9SKECZqAgcA+RumY4TqYTnBBbuv76E+BCkD/cp6z71rOcDkk52DMGFxkn+R+7qWIUJODJ9kNDkgMVll5X/YVVP+a68WfSmRaSss4PmiguPzlsGeE4ZQkYjaAxvF4jXiu3MOpEHNUUWwFk5qAcDX9u7w9dy/E/SnAhQXg0ooX/9LB1MtEmwzwlABQqIR82NMD3Brrxh+ETI56Pfz9AQy2ndjk0kvgv+cZFEKTczGGg1sXlwYpQRQ4EVdZBEMQERUQk+G00eQH1699wAlfPbXhq4O/2YxlmHd7M+yixVLHOfIu/egCNzhYMUSIT1+hOgLWSSOfJUf2CZTcU3UdFFW0FgEqzzv0jqiQTo+dlHIe7lcxSODv7MUFp/hav+RNTIyL6aR9X4newVtPFdO9LtKg7FrBm65dZjYRGRET+XN3Wl0drwoncAYcFGCICnEohbrcufp56TTYN8AzgKKuVqMex7q0boYjUQUpW16McvAp9t6JNfZoRtZPjeMCfGh1WJcL9T7EAcO0ucADXbbENC0gTmFIbumNlE0PCp7wko93pIXJbyFLtujnUFwrpbk5fLCIAcKCJ6VNH/R+GV5dSBF1EKTx5XjfCDkIYJV4JmDxhujAy7CB3M1fYnH9j357jQrhKc0uG8YKGG9B8pqAr/Xs6AB9tnQW/VauzVGdNFdWuAuUIt1PkI7gzQFXfJVyOgxBMQyfq1yQFM6TG+ylHpy+8tC53Eudtf5YDyWGwGGQcMkRlw9uBBdJOo9ZGW9QRVkVhO7J+4cB0Q1w/QtjPKGtcPWzLt5lpDAm1u8sc/b4WPBhpeJCY9xULBDVTtveM+zEU7r/4WSVTdGmU4knER+LDZFsn9f0lPTfZR+dyHFqlpobBf7lp1xHkUgGv4NNBIyWwPQcDqngwlxO3JDs0hmPjFG278YCGUpZXVZOJoABFR8ohc9ntlEkADD0TiNpbv3tdrx5mHLBMWMhfrr6Ut1RvzK0q55aCisIEIYD5aQEvMwDKeYlMg/PrqhQei1xGs5goHLAA1b45NoPVbaQ4XXTGi9NbvPHnBPVQ/uyv9kG5OG9cDkCr+ezXRRb8OBupr3IScKHYpsNV6FWXkdfVUUVDZPxnDrfAGhGJY9L1iCcuKHzhjyEMwJaKyLjqfEIlAvIKg3bQy2RA72Cl5rBgHaozQArdy2I/QXBulnd2FpNd9KRIxRIlcujlFh4qNxl1sNEMQLQjx7ECtR4F3T/H53JyIfdPU4dtOYCWybKdGODhI53bMg8QUk2EVVKVW9YVFsTcvnNObkB2VUwjoVfUx3tq03z2MR6oDt7Jvb7c/bRE+wwirxP2kJR3BDEQsjgPujNACinOlfPThPfB4FcBR0F+JE76EDZ9fz2D9+dyHswll2dC+ze7NNGnQs1v3gEZvPL8qpiDwvmv9p40huv+1LaiV4SzStIGQ/CSV6+LBBSXVHuvYsqaoNrWjDRV//Su+moqu158W4uMSpz/4XwFxkUdXqWaQ1jHkE9R16Ii0lpxfhAZPJoEwVIp0ReqDoVFxRC//eKReH+a2BPSumXSGyUZTFIbqDU6EHcXoKwvVNz71rOcDlOaPv5WRZr6xhrpuCIXcKoYloTZ6EZGR/wEBEVROrc8RGQQTk2+st9MTHgh4nuy7CH3cxwJ7Cbd+E3jULj32epBTZWHzJR69yAxDKtkAg96TROopvAckHx2BAWzpuQ1MUDmgbq5lc4dsB51gZ/MU8fdI8LFMVORfypBQyQndbz3AftvKNLHiOXhWuCgM1D6gksQS5NU/EZW7FRQkRTe+j+OaMSPVJpiFddKvjuuPmsIKV5/CtuNbuohBK1OfIu/egCY9t1JonGXMmlL+8FRGSzOQrVAh85B0oHF/zXENVun5HPyffsQo0uzHkhzlcgC+ypiMpD5V6UgOFNAMnFn+BkAqnevFopP1O9LtLmoljG8nxPH9oBWFBLO6AZXBngxtEkr8ZhVTWLGmItfKmwtfY56yiAM7I7frPnXhgUxzmYtEIdCisIEIZHmKBaudkUK0M6TtJP70NZemoPFxtWpjqKBgL+gcANXb722WqTU6sIbqCInAPVCkrwrUkEitrFcCpHaPDzEBIcnKQaneDBT48OYlFNAFRNGVx6UUNGEKTxzjaxCHMSHhdQDDT9abyetCCYKwQTK7GbuO1W/UXy3Z4iEU/MH8ZqlUPAxDvbkEEysiEHjjXBtkGd2RMWsAqC2xxMiwSf6A1Wag6k+YBPLV0fqx8QDtRFPfz9TUnJnd3f+lbptfJyGjbEwCnAb2oO9gg6Wz2MER9ZVSoEEVZ4cuvM1qQA+RAmjlJmObL8eebv0xV5lSo8J3uvxR+XOfIu/ehDZVEUMESGAbWcLLzKTCGdN6u2ThLdHrghHF7ZFsRo6Fj0/PTLZR+dlDRXz6o/RunaoMAgmUgTa0ZNRMb3pPRaRf7iwl6+4tOtZdfpp5uSpikuTUpRGR9ZJFFFV/7gvd6tdoVk4jD0XiNhu4CcaPMye8SU4jNnfqf6WN1Wx7+Jq5BaV6p8QKpL74RaeYR1ZPV5SZVCieMEeH5UQwkCo7LMQNzTvZlORunZNHHgTmFIbqCIjE0bCoWwvVNMpIXYsXFHrIWyS6lcp3Zy/qiJUcD9YlFNTB5ZCR9vWFBHQezu6iTxBXQ0IYd+IFKHf4OanQvI11BaITrbebAPjQnIKg41CjJPEDI3oEL2rTfcu5==",
    "test": "",
    "solution": "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",
    "max-score": 10
  },
  null
]
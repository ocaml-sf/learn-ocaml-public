[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "The dragon's greatness",
    "stars": 3,
    "identifier": "3.21",
    "authors": [
      [
        "Dário Santos",
        "dariovfsantos@gmail.com"
      ],
      [
        "Simão Sousa",
        "desousa@di.ubi.pt"
      ]
    ],
    "focus": [
      "Array manipulation",
      "list manipulation"
    ],
    "backward_exercises": [
      "hferee/10_assoc"
    ]
  },
  {
    "id": "3-dragon-greatness",
    "prelude": "",
    "template": "let dragon_size n = failwith \"Unanswered\"\nlet dragon n = failwith \"Unanswered\"\nlet dragon_bit n = failwith \"Unanswered\"",
    "descr": [
      [
        "",
        "<script>\nMathJax = {\n  loader: {load: ['input/asciimath', 'output/chtml']},\n  asciimath: {\n    delimiters: [['$','$'], ['`','`']]\n  }\n}\n</script>\n\n<script src='https://polyfill.io/v3/polyfill.min.js?features=es6'></script>\n<script src='https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js' async='' id='MathJax-script' type='text/javascript'></script>\n\n<h1 id=\"Introduction\">Introduction</h1>\n\n<p>Imagine the following situation.</p>\n<p>There is a paper ribbon that you will want to fold in half n times.</p>\n<p>The initial configuration is (unfolded paper, profile view):</p>\n<p><img src='https://i.imgur.com/FrKFeHH.png' alt='' /></p>\n<p>If you fold it once and unfold it and let the angle make 90º, you get the following figure in profile:</p>\n<p><img src='https://i.imgur.com/FdNQ01N.png' alt='' /></p>\n<p>If you fold it twice and unfold it and let the angles obtained make 90º, you get the following figure in profile:</p>\n<p><img src='https://i.imgur.com/SKXenGJ.png' alt='' /></p>\n<p>If you fold it three times and unfold it and let the angles obtained make 90º, you get the following figure in profile:</p>\n<p><img src='https://i.imgur.com/ekQh8LV.png' alt='' /></p>\n<p>Very quickly, the paper folding exercise becomes tedious but visually curious (taken from (Wikipedia)):</p>\n<p><img src='https://i.imgur.com/4RtPGWP.gif' alt='' /></p>\n<p>The fractal obtained is called <em>dragon curve</em>.</p>\n<p>The following image (also taken from Wikipedia) shows how to get a configuration from the previous one.</p>\n<p><img src='https://i.imgur.com/EY1Z8LP.png' alt='' /></p>\n<p>Let&#39;s encode these pictures with binary words. The principle is: &quot;an angle to the left is 1&quot; and &quot;an angle to the right is 0&quot;. Thus:</p>\n<ul><li>The tape with <em>zero</em> folds is represented by the empty word, $\\epsilon$;</li><li>The tape with <em>one</em> fold in the middle is encoded by the word $0$;</li><li>The tape with <em>two</em> folds in the middle is encoded by the word $001$;</li><li>The tape with <em>three</em> folds in the middle is encoded by the word $0010011$.</li></ul>\n\n<h1 id=\"Objectives\">Objectives</h1>\n\n<p>In this exercise, we are interested in answering two questions: what is the word obtained after n folds? what is the $m$-th letter of the word? To answer this, let&#39;s program.</p>\n<ol><li><p>Define a function <code>dragon_size: int -&gt; bool list</code> which returns the size of the word after $n$ (given in parameter, a positive integer, possibly null) folds in the middle. For example, <code>dragon_size 4 = 15</code>. In case of an invalid argument, the exception <code>Invalid_argument &quot;dragon_size&quot;</code> is thrown.</p>\n</li><li><p>Define a function <code>dragon: int -&gt; bool list</code> which returns the list of booleans that form the dragon curve word for n (in parameter) folds. For example, <code>dragon 3 = [false; false; true; false; false; true; true]</code>. In case of an invalid argument, the exception <code>Invalid_argument &quot;dragon&quot;</code> is thrown.</p>\n</li><li><p>Define a function <code>dragon_bit : int -&gt; bool</code> which for a nonzero positive integer $n$ (in parameter) returns the $n$-th bit of the dragon sequence. For example, <code>dragon_bit 11 = true</code>. In case of an invalid argument, the exception <code>Invalid_argument &quot;dragon_bit&quot;</code> is thrown.</p>\n</li></ol>"
      ]
    ],
    "prepare": "",
    "test": "DYk9uOo0n9Oi3J8ExfrfG7YPTTgUSVZLPTxeWVXsfJobfRVCRBbMF71plqanseZl8Xq+4igYfvLnGxkrdyyYbRBmUQJ7ErFZnLAjxdMAI+xlHNYG9qZRuTgOPN6Chz4HFNKVtawPFumQPDrxTlUNxvSI67PZT94veRhJ72vUcDcZiUKsvGvPEv2V/1vrmhxZK6tIT6F9FTNwEBEVELzd8W8rPytALw5LO848lfnExz3F42xtNpjge3lK8V8sZZ4FRjJ0SjJZnFbJbWHsmUhp8iFMlRjAcBenQpZ4553TCIRAzcuclEdWhxNk2xMD2Bu5bMeRCIEDHKzwUlme7tCp15aT+KnhLglAdp4Z84SRaGB8QUkMER9ZGT2XVFtKvPaIQLwMLEg5nlRm++iRq4LJCx6opHdiNeyji9jzRrsaidER3UhEN/yJRYywV3jEUnGzD6eHAI06FOcqVRSaENBzmQe1ju7IC9TazW2blklmUcDp7P1Dp/c1grwyTIyL8qpcO2kVweRe8oKGXgH4xt7zDjNTVlpTA6/fJ/RUFRLcrx/dcQdaVRiX2XNhu+ncbe2//jDuOTYdv40xEJ2rtkTWbQNaTAIj0cVEo+EuwMsOZI/lGtoVp4x4fDoYCN5AiziIQN3TuxQnFufUZyvUAHcKlPCI6E+BCoWwb6hNoJqCtWcYkW3ix7bHG3MKnxjTpLtOLAoDBVcNGQsdEBpVB0DCnDrfQTkVYNtBNDi8svmthkqEOYV9YjLoxuBEjQOnKbvbSopxHS2E6/aMwnrS/idmrnUGf6nOapTx2RwYjFbeIxQTixfC5BkZbhJo+IBPMnbxt1mNCMYLUPH6HpaAzMqlL9DGCbLtXMwTslf0pdrBcUw8SUliEWk1QTlQEiBIaLvL1r9EPUZfjkkx3Me8b0e8IxBzkT5tPJX5fAq0E2dyq0gCN5JRY9TDWNjLO08KQmCeP5DvXuenFqkkGlWMP1JsnBXP9eK3Tjjg6Gl6lpZaHPuc/xQEm9RZkKRPCNrKn0smPZcxsrhF8oD8BcSNhYGuGSIMHQBUSpMRLlV4FR7pfMU/r8NdGnSUEyloha7cfrMsoCG2VWNnfvK6Xc9RaGmSdF5zA7w7HZ1Q73R9eZU0ZONyVZV2p1gRsRZaWwlW9SvNQI0pa2A1Ub7qZyfAGyl1bwDx6A4SXjufgQMFiZLosiUHyzu7ujDLVZoG6cyL54UvAlELGVdZERBwHQdaELzTnGaaEz9v1+QIO7m/lbfluiWQ42to3HKbgaILw5P24NevC9/RH7gFl9LGrzTslEUiw5g2f67IgoyD0ow+8R0Y01wAgqA=",
    "solution": "ERmRysuxzk4Tib2goF6WXHJuTUpRVVoN+VRDVF4jwu2xdoshVSe0Q//hu+ncbfwzoHvUYXgnbvLkFgo4x7OGq5g/T/EtGYYG73VVeYQAZPIlAtYKp3EQcWdQFsAuiiTFDNK35wE2U3z21XWHTmMMvLHPnp8bWFmmhUcFxbGOcDlRHNG3jr70VcP4giyEWFZ11UFHRTtZGR9/VUUVU3zh8XXbQXFEYJ2N1jWHuLiehnCI11BaMT3wxrAK5RH8+NSbXmZEBCoTl9LGr/Xs6AB9dyFOnUbfm/jdRn5WkVnRTtlTmcSq/R9WaZNiE2NPMU8fdI8YRqwjG+ytTV+TnculMA1W9L8NwMZLzxvm31NURkV8STYoHR/NEEMQERUQr38IZexJPUcfjpsa3OGttOX8YZFt/H1u1qChxRf+UvtuybwON9gYSBCGChylNvOrAGTn1UeUGwzmKtEdXVuJTwFr/9zodPiQTkug6DRw/5poDK7omdtIa9wAd+QDTNiL9chcGR0Re2m7m9j+8LRg9o2QFCYPTR5eGR9Z+RBUWUPdpt5er9EcVWCXG72hb3LhuOMcoHXELnYduvLkXfJXhj4EbmdjSocIEIYL74Rae16FMPI/Tx6Pu4xCfDITWZQGezeBBtaSrhUBFqjT2mrWTmoWbq8GnoKBT6nmq5pPntKO8lAZQsG9jheOAgvQvXzCUkY2JAhDMkBMQR/6X6pEG0y57WqvBHMRYIdRN7bsbLTRnSDENN5fNiKrdOAY//b7Nw4hFi6BBSs4nCGJcHas6Fo9hyFD7lbfmyrdPFUWjBfR0IQXlgbmlAEWxsA9OcgRMQnxt1aLCPgKQPG9Almn81bh0/oubbjVwMhDowDW3YdJBAh7CBhJERFpVmcRXVoUovz+4OdM3BtljkliKrmuduX6K3h3/Hc83rC7l6CVRPZ7jPBC1ElDY5OGAYD34bjETCGz1QiZAJLjAr6DBVzPUJFl6FjojqiQTo0p/WAe6UdtSKmp6YRX5UJ05fRNTIyLpuFwGUDRdJXnm9aVpv/okB2IDmFBXEURUF1m+RARFRDkuZpeeEE5VT00Empvu+Tubfcm/8SG2zMewI76Xc9Rxz4Sf9J5A9o7RxZHovZag2IAKKE8TxFGp4x4/8oVFs6CiW4QQMi+hNAZFqC4Z8q0GTEEv+KIyEbBQ/rDwEkM71qCtW9ZQNHp/4LOTcXCvXHUFl5PMUF1W65ZUF2DEBEVELzbnDCfUB2aYNs4PmiguPzwxz3L3rtcK70vqfEZ8Fa64ceoDBpCUWIQ6/3JrybfmEUvd8cO7laRtkn7F/UWjEKRIxQMixec69dLqJNh2IAKY6nFxM4TVIFFF3DvZlnJnhelPR/fzLeBvxBXlwC6P2BWQoMsQRsFERFXFH5ZOoUQr38IZexbPV6bjplnM4ewq4OK0wJkjDYyD+qpg5vUVOoa/epGZEMWLVegS1C543SrCziYWl+4TfDcHr6lEETYEsgokpyZ/u8QHFyp6WBnyAEoQqP+5IgG9At4xIhBC2iLnvZdX/z49t0s/E++iv/9vB1EFSVBAlpNGQ9ZPV6UWoDuvYFxalEkPCfNH8dof2Pdv+Rk7XH+KjNpuqD5GJZ4iX83gA1lCkEyXNVO74ore16TKPIaRgVCp+Je/8R4FtwCznrrDNfOaYIKV0nC1X+1GXQiseyMpAuECkzwrW2M7YLIcFFQRYX8j3GARMeYvTWCC5RNYoUFCVdZYzRDEBFQXOvsh8rfQTlZJYc4P8HwfPGbhmiEWNltNinzgbdY8Vz7Zg3oQ7QCGCpf65rJcDOxlAAjsmJOjQCOhkHc4oYW9UKMItIVkZzwzQBY/sAlOcNPMRTf7aWESgdL33DiGUL08s8l4FwVbbjVwMhDztnwMYINH/piQUBSOo9ZGW9QERUQr37B40xIPU65/6YiPOHwq+buZYxljDAtIru8h6mZG3tuyLgTPpIFY/XKWMmlMfLLUGTfOUfPV1HnEqdkVRfRQwx7/Uz08s4QTo+dzXxRlldoSL+aocRGbyYVr+QBZvOHnfAcWE+BvNq5m9bL9OVu55xrXGMNCB5RSko++Vo3W9CgvYshr5ltVSmJXjgSu+ncbfg69H414jtbbff6EdtYxym3f5x1A/F7ENxLdx/me4ccZPcqTq9G9r24ey9DFw9Bl57EQJq+x2Al+eDQ4DqJVTE1bqjW6AuOREWwuAVM9cGOsXg+HcGWfKS+KZvQvXy3Flo13VsNGBlZVR/9D6FZXa+hnDPnQS2PYJx1MHGsbLjinSDE42wVYiKze3hPjWu4KcrqQyxQ3l61pkbJsTrwblY/q7IL/QPBu/Hc0AVT/5+R0xQezgndyBoTqKl32gY0MQzbsP4QFNROF3W9UEmIzcfo1klWy3irwJwRmcWwBK5cSB9iQQEFQ9kzW7ZASGwZcfnNYexNPRpryoxuBbawbqrv0xBomAAzPKf7qHXZE3grpehQ1lFRL/aJWhzkPKfESWTq1Q8AAYLyGPNn4o0YQwFb6DqzjqDOTiuk5jAk5QwySLrmnfgG5QtVc+QFTJPR8vAcFA8eeZW9m5O+9K9poB2NXHk1TQV4XVoBF/JUU6Caet6nr/l5VSzVGmY5lrymqbNl8HH+4ndcw4K6VgERrDGXapFkCkFvWYYA73Vje2AvZPJoTwVPp0MUdGdQFwQNiyKEA27Za25GFu4QJTLTGosIbuyGu9+BRkuzcElicMr3cHEmPJjxp+SKU2qXg83CWQRBSUFNBV1ZVo/kEAEVRPGs68qxAHQGJ2sXG80ee4GnwkbFZsMvL839cvF2yUP80N8pQDdxUWJVn/8McD+u6Eg9eiF3/RrJc6bdRn5djELU0s1Ft2uclEc+bYQl+ZYMMQnxt1aLCPgKQPG9AlmI7MilIDMWl3jVwMgKiJDy3ZdXFVpiCQ5CEV6+W9MQERUQr37N2b9EFkV5jkcm3Kjtd0fiIIVikjk80bupgBKWRb2Ujq1G19hUY/HFSIzcM13EAGTn1UfVThijB0oxFFqYXgFOmRPPkLGVAVHxzDRf9Ap8SLObxxRG5QtVv+RNAMn48v2xWjz2wM0pipOH9OUplUNeHnpRFDNYVkk1MRBQV/OufN5et9/wFCi0UHNvwKnpbaIwoHi+VWNnfvK6Xc9RezeDq6F8QChrW2V4zaR7e16JNfYOD2x4zMpYdy5QTs5DlzGWQJOOqJkPG0mCPTq0GiAFbqjI/UbBQ/rDwEkM71rOcDkVUhXskO3NEJvN5izCFpR1YlFNTBFYSU9tX/UVGP7t8ETrEj5QYNM3In8xhqyefjGA1OtgI8fggfE3z/KuKdTuAE/OGDFE/pKAcCnhoydxrnI+6jXBtkGdPFUWjAq4CIRAzcuclEdWbIJk4JpBT5zqvI7MCIEGF07sTQiK7Ji3PR9Wl+T08thDzwDsKdNQSoI1AB5UEV1ZYz/WUF/DaO7kEZBJNkVmjkVfUrHwf4ry1xVmjmE1MKPjxRHZCfJwjPEON6ceY6DPTYzf4aGZAHTnJQ0QA1H6EPVqEB0QKccloQmSyxKRHVHwyXFk6ldmDK7omdtIa9/1a+ZEZxyLne6rXDmReZW9590O9OVgyo2AD7IGA5IRVo/QJmxRFRCgwIkqr69cSGCiF7AtxbLwtbNtoDm+4jgnbfr6Fw1ex7rXq6x=",
    "max-score": 46
  },
  null
]
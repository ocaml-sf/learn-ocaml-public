[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Future",
    "stars": 1,
    "identifier": "1.4",
    "authors": [
      [
        "Rui Barata",
        "rui.barata@ubi.pt"
      ],
      [
        "Dário Santos",
        "dariovfsantos@gmail.com"
      ],
      [
        "Simão Sousa",
        "desousa@di.ubi.pt"
      ],
      [
        "Leonardo Santos",
        "leomendesantos@gmail.com"
      ]
    ],
    "focus": [
      "Errors",
      "Fonctions recursives",
      "Types"
    ],
    "backward_exercises": [
      "smelodesousa/F1/1-mistery"
    ]
  },
  {
    "id": "1-future",
    "prelude": "",
    "template": "type p1 = To_Answer_Replace_with_your_solution\n\nlet p2 = failwith \"Replace with your solution\"\n\nlet p3 = failwith \"Replace with your solution\"",
    "descr": [
      [
        "",
        "<script>\nMathJax = {\n  loader: {load: ['input/asciimath', 'output/chtml']},\n  asciimath: {\n    delimiters: [['$','$'], ['`','`']]\n  }\n}\n</script>\n\n<script src='https://polyfill.io/v3/polyfill.min.js?features=es6'></script>\n<script src='https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js' async='' id='MathJax-script' type='text/javascript'></script>\n\n<p>Consider the following function <code>future</code>:</p>\n<pre class='ocaml'><code class='ocaml'>let rec future d r =\n    if d = 0 then r \n    else \n      let a = (d lsr 1) in  \n      let b = (string_of_int (d land 1)) in\n        future  a  (b ^ r) </code></pre>\n\n<ol><li><p>Specify the type of the function <code>future</code>.</p>\n</li><li><p>What value is returned when we run <code>future 13 &quot;&quot;</code>?</p>\n</li><li><p>Assuming that, in the initial call, the <code>d</code> parameter is a natural integer and <code>r</code> is the empty string <code>&quot;&quot;</code>, this function calculates:</p>\n<p>A) The function creates a palindrome from the parameter <code>d</code> <br />\nB) The function calculates the number of $1$&#39;s present in the binary representation of <code>d</code> <br />\nC) The function generates the binary representation of <code>d</code> <br />\nD) The function generates a string of $1$&#39;s and $0$&#39;s such that the number of $1$&#39;s is odd if parameter <code>d</code> is odd, and the number of $1$&#39;s is even if parameter <code>d</code> is even <br /></p>\n</li></ol>\n\n<p><strong>Notes:</strong></p>\n<ul><li>Multiple choice: If you believe that the correct option is <code>A</code> then you should answer as follows: <code>let answer = A</code>.</li><li>Types: Write the type of the function in the definition of its corresponding type. Example: <code>type p1 = float -&gt; int</code>.</li></ul>"
      ]
    ],
    "prepare": "kw9vmMa3gBNnfQoSv+QieTcBLEoNGXtZNRBnFUng8M6yr8RmFCfICDYvfO7csKU5/jDGN7lkpA==",
    "test": "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",
    "solution": "QBROT/Vc9/f7ifvxeJznWzMSGRgYVkhZZAhRR9TuxYZd9GsoEDT0DjFhtKnafqIpkT+bVSdiqvLoTN9Mx95=",
    "max-score": 7
  },
  null
]
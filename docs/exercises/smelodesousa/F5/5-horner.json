[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Operations on single variable Polynomials - Horner's method and derivation",
    "stars": 2,
    "identifier": "5.6",
    "authors": [
      [
        "Gon√ßalo Domingos",
        "goncalogdomingos@gmail.com"
      ]
    ],
    "focus": [
      "List manipulation"
    ],
    "backward_exercises": [
      "smelodesousa/F5/5-half"
    ]
  },
  {
    "id": "5-horner",
    "prelude": "",
    "template": "let answer = Unanswered\nlet horner x p = failwith \"Unanswered\"\nlet derivative p = failwith \"Unanswered\"\nlet rec derivative_tr p acc = failwith \"Unanswered\"",
    "descr": [
      [
        "",
        "<script>\nMathJax = {\n  loader: {load: ['input/asciimath', 'output/chtml']},\n  asciimath: {\n    delimiters: [['$','$'], ['`','`']]\n  }\n}\n</script>\n\n<script src='https://polyfill.io/v3/polyfill.min.js?features=es6'></script>\n<script src='https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js' async='' id='MathJax-script' type='text/javascript'></script>\n\n<h1 id=\"Introduction\">Introduction</h1><p>We can represent a polynomial $P$ of degree $n$ with a list $p$ of real numbers, where its $i$th element represents the coefficient associated with the exponent of degree $i$.</p>\n<p>Thus, the polynomial $3x^4+5x^2+1$, for example, is represented by the list <code>[3;0;5;0;1]</code> (or <code>[1;0;5;0;3]</code>, if we prefer to list the polynomial from the smallest degree to the highest). In this exercise, we will assume that the highest degree is always at the left.</p>\n<h1 id=\"Objectives\">Objectives</h1>\n\n<ol><li><p>Choose the option that best defines the type <code>polynomial</code> as a pair of an integer number that represents the highest degree of the polynomial and a list of real numbers. Using the example from above, its value of type <code>polynomial</code> would be <code>(4, [3.; 0.; 5.; 0.; 1.])</code>. Note that the integer representing the highest degree is a non-negative integer. In other words, the list cannot be empty, otherwise, a polynomial wouldn&#39;t exist.</p>\n<p>A) <code>type polynomial = { degree : int; polynomial : float list }</code> <br />\nB) <code>type polynomial = (int * (float list))</code><br />\nC) <code>type polynomial = ((float list) * int)</code><br />\nD) <code>type polynomial = { polynomial : float list; degree : int }</code><br />\nE) <code>type polynomial = (float * (int list))</code><br />\nF) <code>type polynomial = { polynomial : int list; degree : float }</code><br /><br /></p>\n<p>(Note: If you believe the correct option is <code>A</code>, then you should answer as follows: <code>let answer = A</code>)</p>\n</li><li><p>Implement a function <code>horner : float -&gt; polynomial -&gt; float</code> that, given a real number $x$, determines $P(x)$ by using Horner&#39;s method, i.e.</p>\n<center>\n$P_n(x)=(\\cdots((a_n x + a_{n-1})x + a_{n-2})x + \\cdots + a_1)x + a_0$\n</center>\n\n<p>Thus, <code>horner 3.0 (4,[3.; 0.; 5.; 0.; 1.])</code> returns <code>289.0</code>. In case of an invalid argument, the exception <code>Invalid_argument &quot;horner&quot;</code> may be thrown.</p>\n</li><li><p>Implement a function <code>derivative : polynomial -&gt; polynomial</code> that, given a polynomial $P(x)$ in the form of a list, determines its respective derivative, which is also a polynomial. In case of an invalid argument, the exception <code>Invalid_argument &quot;horner&quot;</code> may be thrown.</p>\n<p>For example, <code>derivative (4,[3.; 0.; 5.; 0.; 1.])</code> returns <code>(3,[12.; 0.; 10.; 0.])</code>.</p>\n</li><li><p>Create a tail recursive version <code>derivative_tr : polynomial -&gt; polynomial -&gt; polynomial</code> of the previous function <code>derivative</code>. Note: the function will be tested in the following manner: <code>derivative_tr p (-1, [])</code>.</p>\n<p>For example, <code>derivative_tr (4,[3.; 0.; 5.; 0.; 1.]) (-1, [])</code> returns <code>(3,[12.; 0.; 10.; 0.])</code>.</p>\n</li></ol>"
      ]
    ],
    "prepare": "jYmSEH7h84MZLEQuoFNhwXgBRQV4TRMRLko3VESgwIFxe95l4lvPB7Mcu3aksKw85TSJ4l/nfqf6Ps/Nx9zXh9JVA5k72IZX7ZFatYRzZKgoOctO8bAGbWhQU5==",
    "test": "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",
    "solution": "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",
    "max-score": 43
  },
  null
]
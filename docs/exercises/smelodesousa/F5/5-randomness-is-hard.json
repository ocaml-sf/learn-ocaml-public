[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Randomness is hard",
    "stars": 2,
    "identifier": "5.10",
    "authors": [
      [
        "DÃ¡rio Santos",
        "dariovfsantos@gmail.com"
      ]
    ],
    "focus": [
      "Array manipulation"
    ],
    "backward_exercises": [
      "smelodesousa/F5/5-lists-sublists-4"
    ]
  },
  {
    "id": "5-randomness-is-hard",
    "prelude": "",
    "template": "let knuth_shuffle v = failwith \"Unanswered\"",
    "descr": [
      [
        "",
        "<script>\nMathJax = {\n  loader: {load: ['input/asciimath', 'output/chtml']},\n  asciimath: {\n    delimiters: [['$','$'], ['`','`']]\n  }\n}\n</script>\n\n<script src='https://polyfill.io/v3/polyfill.min.js?features=es6'></script>\n<script src='https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js' async='' id='MathJax-script' type='text/javascript'></script>\n\n<h1 id=\"Introduction\">Introduction</h1>\n\n<p>Our next problem revolves around the following question:</p>\n<p>Given an array <code>v</code> of size <code>n</code> already initialized, how do we rearrange its elements in a simple way (i.e., not <em>very</em> inefficiently) so that we end up with a shuffled version of the initial array?</p>\n<p>In other words, how do we find a permutation of its elements that seems random?</p>\n<p>The problem raised by this question seems simple, but in reality, it is not. Determining a permutation with good random properties in a simple way is not a straightforward problem to solve.</p>\n<p>In 1938, Ronald Fisher and Frank Yates, in the book <em>Statistical tables for biological, agricultural and medical research</em>, described a method that was later studied and brought to light by Donald Knuth himself...</p>\n<p>This method became known as <em>Knuth shuffle</em> or <em>Fisher-Yates-Knuth shuffle</em>.</p>\n<pre class='ocaml'><code class='ocaml'>(* To shuffle an array v with n elements (indexes 0...n-1), do the following: *)\n  for i = n - 1 downto 1 do\n       let j = random int where 0 &lt;= j &lt;= i\n       swap v[j] and v[i]</code></pre>\n\n<p>The essential property of this method is that every possible permutation has the same probability of being returned by the algorithm, including the original permutation.</p>\n<h1 id=\"Objective\">Objective</h1>\n\n<p>Implement the function <code>knuth_shuffle: &#39;a array -&gt; &#39;a array</code> that incorporates the algorithm presented above. Note that the received argument is the array we want to shuffle. The function <code>Random.int</code> from the OCaml module <code>Random</code> might be handy for this exercise (ref. https://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html).</p>\n<blockquote><p>Random.int : int -&gt; int</p>\n<p>Random.int <code>bound</code> returns a random integer between $0$ (inclusive) \n and <code>bound</code> (exclusive). <code>bound</code> must be greater than $0$ and less than $2^30$.</p>\n</blockquote>\n\n<p>Note that it is <em>not expected</em> that you use functions such as <code>Random.init</code> or <code>Random.self_init</code>.</p>\n"
      ]
    ],
    "prepare": "",
    "test": "lyDifW2wzX6NvxKtLvqYu7YPTTgUSVZLPTxeWVXsfJwfcAVnGBbICmItfKn5beF/58S1DSIduritUZgUc/TEf5N7RkFvGYd6xe5frYRUI+E/M1IG/4treiMZQhpLiznEX0H+aYMKQtOAZySUHXQ0v4CKhoTATkmyhllJlYe1siTOZ0CdTRi1WFnWzvp8meibYlFNRBF7GWltSEUVEtjszjamDiwVJxhRMCm9haPgbCCy3cAfYiC6ePQL9WeoYdLhBHwHUjJs77GJcHas6AApsnI+f5zUaRLx2RwYwkPrYdMBlwSr6DBFdgo60gxA4l7Bc2m2XIFCWaj9DBe07s4lMIM5bb9mHZkgSgSXzE+B/ag8QUkMERsSVmoEWWwDd0jO44YEPic5jkcm3Kjtq+W6ZYJeo8x1IKa9gAj1XbFr80YEYloRHRCLFYzzPvPATnzNI6uUGhSmSfEdJk3WBsgq75438xKDGk4x/TQmj9Y0SPup7IRG5QsLfbELAcrOd+FrjHKxunFI97szk1Pe0PPWtC1OAEJCXEkzO9RQQVWgfZwfcAVnGBbICmItfKWXbbM5oDSU4jMtu34qR15G7CrXq9IjA/F7+hZpk+5CcxReOPJ5Tt9njuMvhDoYAdNC5DKUWgqLedVPStHQSTq+ZRtEqfSI8EbBF8bwwBhJi0T1tWeI0O+yBii1+9vBt0YsmcfvO8hOBFR+U69vXkVQ0a7eyDq+ITlTNZV43iGsx+PezCCQ111uHCW8cr957/er4tPiDX5CLE5=",
    "solution": "7smZ4CUEnpx6jhNbTd51fGMKAo/FUWZKIUVXUkmdfI9ewjtcVQGJDTI6xbXwquFwe8SU4jNfuP4qXgARgnr+xG5jA/F7EIZHmKBawhQ2ZIApANEA8LlYdz6VHwFCz7KVSZrTtawPFumQNDrSQT9BdaCU7U0ABRi8uVZz71rOcDiFmZIf0ibKWG7U7kkP6FzdYpBWZ6EZWDNDGBtV14Wd8WylAG9QYIl+ISq9haPesGzQ4JQbYnCqg4QTzEO7Zc8oE7pxUWIQn9e2cDS8lVQt8SIGpAzHaoSd+/ULd9KRIxRAiZWqlAYWx2AdWxE21BHlqMiKA2VDF4bsTUGJjxfp1wLCnHl/ZhxAKueOVGWEW0o8DQ5YEVMZBG/7UFsUcvXG1qQVPVlwlEgf3OT7/aq8IMQl/HdqNef7hAvBE0dup0BK4psRKkftChyl4bjEADLd3Q31TcjbU3xnXVmRW0t76EC0jqiQGR7lz8lemlIoC+bxxxRG5QtVe3tDCZL68qQcoYmKGCcaxA==",
    "max-score": 20
  },
  null
]
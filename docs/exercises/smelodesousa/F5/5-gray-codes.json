[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Gray codes",
    "stars": 2,
    "identifier": "5.4",
    "authors": [
      [
        "Gon√ßalo Domingos",
        "goncalogdomingos@gmail.com"
      ],
      [
        "Leonardo Santos",
        "leomendesantos@gmail.com"
      ]
    ],
    "focus": [
      "List manipulation",
      "string manipulation"
    ],
    "backward_exercises": [
      "smelodesousa/F5/5-holand"
    ]
  },
  {
    "id": "5-gray-codes",
    "prelude_ml": "",
    "template": "let gray_list n = failwith \"Replace with your solution\"\n\nlet gray_code x = failwith \"Replace with your solution\"\n\nlet gray b = failwith \"Replace with your solution\"\n\nlet de_gray n = failwith \"Replace with your solution\"",
    "descr": [
      [
        "",
        "<script>\nMathJax = {\n  loader: {load: ['input/asciimath', 'output/chtml']},\n  asciimath: {\n    delimiters: [['$','$'], ['`','`']]\n  }\n}\n</script>\n\n<script src='https://polyfill.io/v3/polyfill.min.js?features=es6'></script>\n<script src='https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js' async='' id='MathJax-script' type='text/javascript'></script>\n\n<h1 id=\"Introduction\">Introduction</h1>\n\n<p>Gray codes allow for a good binary codification, in which only one bit changes between two consecutive elements.</p>\n<p>To simplify the problem, let&#39;s only think about integers. In this case, the codification of $0$ is $0$, and $1$ is $1$. The codification of $17$ is $11001$, $18$ is $11011$ and $19$ is $11010$.</p>\n<p>A simple way of generating gray codes from integer values up to length $n$ (for example $19$ has a length of $5$) is the <em>reflex-and-prefix</em> method.</p>\n<p>The definition of the method is as follows:</p>\n<pre class='pseudocode'><code class='pseudocode'>Base     reflex/prefix n.1     reflex/prefix n.2      reflex/prefix n.3       \n0 0      0  *0     0  00       0  *00     0  000      0  *000    0  0000\n1 1      1  *1     1  01       1  *01     1  001      1  *001    1  0001 \n         reflex    prefix      2  *11     2  011      2  *011    2  0011\n         2  *1     2  11       3  *10     3  010      3  *010    3  0010\n         3  *0     3  10       reflex     prefix      4  *110    4  0110\n                               4  *10     4  110      5  *111    5  0111\n                               5  *11     5  111      6  *101    6  0101\n                               6  *01     6  101      7  *100    7  0100\n                               7  *00     7  100      reflex     prefix\n                                                      8  *100    8  1100\n                                                      9  *101    9  1101\n                                                      10 *111    10 1111\n                                                      11 *110    11 1110\n                                                      12 *010    12 1010       \n                                                      13 *011    13 1011\n                                                      14 *001    14 1001 \n                                                      15 *000    15 1000</code></pre>\n\n<h1 id=\"Goals\">Goals</h1>\n\n<ol><li><p>Define the function <code>gray_list int -&gt; string list</code> that given an $n$ value calculates every gray code of length $n$. These codes are returned as a string list. <br />\nIf the argument is invalid, the exception <code>Invalid_argument &quot;gray_list&quot;</code> is thrown. <br />\nFor example <code>gray_list 2 = [&quot;000&quot;;&quot;001&quot;;&quot;011&quot;;&quot;010&quot;;&quot;110&quot;;&quot;111&quot;;&quot;101&quot;;&quot;100&quot;]</code>.</p>\n</li><li><p>Define the function <code>gray_code : int -&gt; string</code> that returns the gray code of a certain $n$ integer parameter as a string.</p>\n</li><li><p>Define the function <code>gray : int -&gt; int</code> that calculates the gray codification of the positive integer passed as a parameter. <br />\nIf the argument is invalid, the exception <code>Invalid_argument &quot;gray&quot;</code> is thrown. <br />\nFor example <code>gray 9 = 13</code> (13 = 1101 in binary).</p>\n</li><li><p>Define the function <code>de_gray : int -&gt; int</code> that does the inverse operation, the decodification. <br />\nIf the argument is invalid, the exception <code>Invalid_argument &quot;de_gray&quot;</code> is thrown. <br />\nFor example, <code>de_gray 13 = de_gray 0b1101 = 9</code> (<code>0b1101</code> is 13 in binary notation).</p>\n</li></ol>\n\n<p><strong>Note</strong>: Feel free to define other functions to solve the problem.</p>\n"
      ]
    ],
    "compiled": {
      "prelude_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAAAoAAAACAAAABgAAAAWgJ1ByZWx1ZGVAhJWmvgAAALoAAAAZAAAAYgAAAE6goCdQcmVsdWRlkDBOnbsAqlp54g2UeJ51iRmhoKAmU3RkbGlikDBLBLTtoZqnIt82UUGJX7NHoKA4TGVhcm5vY2FtbF9pbnRlcm5hbF9pbnRmkDD7dYGB25SyDLC5kWiR1KaLoKAzTGVhcm5vY2FtbF9jYWxsYmFja5Aw1KWIt08Xk5o9CWhN3TiKIaCgOENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljc5AwtsZpSVXhAAGu0mdXEQSpYUCElaa+AAAABAAAAAIAAAAFAAAABaCQQEA=",
      "prepare_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAAAoAAAACAAAABgAAAAWgJ1ByZXBhcmVAhJWmvgAAANYAAAAeAAAAcwAAAFygoCdQcmVwYXJlkDCT2GyTOQd4JtXvW6/OiHtZoKAmU3RkbGlikDBLBLTtoZqnIt82UUGJX7NHoKAnUHJlbHVkZZAwTp27AKpaeeINlHiedYkZoaCgOExlYXJub2NhbWxfaW50ZXJuYWxfaW50ZpAw+3WBgduUsgywuZFokdSmi6CgM0xlYXJub2NhbWxfY2FsbGJhY2uQMNSliLdPF5OaPQloTd04iiGgoDhDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3OQMLbGaUlV4QABrtJnVxEEqWFAhJWmvgAAAAQAAAACAAAABQAAAAWgkEBA",
      "solution_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAA60AAADEAAAC6AAAAs2gKFNvbHV0aW9uoLCgKWdyYXlfbGlzdAEA8tDAwUDAs5CjI2ludEFAkEACBfXhAEAA4cCzkKMkbGlzdEmgwLOQoyZzdHJpbmdPQJBAAgX14QBAAOJAkEACBfXhAEAA40ACBfXhAEAA5ECwwAlHLi9fbGVhcm4tb2NhbWwtYnVpbGQvZXhlcmNpc2VzL3NtZWxvZGVzb3VzYS9GNS81LWdyYXktY29kZXMvc29sdXRpb24ubWxCSEzABAJCSFVAQKEEIEBAoLCgKmRlY190b19iaW4BAPPQwMFAwLOQBB9AkEACBfXhAEAA5cCzkKMkbGlzdEmgwLOQBClAkEACBfXhAEAA5kCQQAIF9eEAQADnQAIF9eEAQADoQLDABBtRAQGmAQGqwAQcUQEBpgEBtEBAoQQ6S0CgsKAtd2l0aF9udGhfY2hhcgEA9NDAwUDAs5CjI2ludEFAkEACBfXhAEAA6cDBQMCzkKMkY2hhckJAkEACBfXhAEAA6sDBQMCzkKMmc3RyaW5nT0CQQAIF9eEAQADrwLOQBAZAkEACBfXhAEAA7EACBfXhAEAA7UACBfXhAEAA7kACBfXhAEAA70CwwARAVwECHgECIsAEQVcBAh4BAi9AQKEEX1BAoLCgJ3JlcGxhY2UBAPXQwMFAwLOQoyNpbnRBQJBAAgX14QBAAPDAs5CjJGNoYXJCQJBAAgX14QBAAPFAAgX14QBAAPJAsMAEV1oBAmwBAnDABFhaAQJsAQJ3QEChBHZVQKCwoCtyZXBsYWNlX29wdAEA9tDAwUDAs5CjJm9wdGlvbkqgwLMEHUCQQAIF9eEAQADzQJBAAgX14QBAAPTAswQbQJBAAgX14QBAAPVAAgX14QBAAPZAsMAEb10BAp0BAqHABHBdAQKdAQKsQEChBI5XQKCwoClncmF5X2NvZGUBAPfQwMFAwLMEbkCQQAIF9eEAQAD3wLOQoyZzdHJpbmdPQJBAAgX14QBAAPhAAgX14QBAAPlAsMAEg2IBAv0BAwHABIRiAQL9AQMKQEChBKJaQKCwoCRncmF5AQD40MDBQMCzkAShQJBAAgX14QBAAPrAs5AEpUCQQAIF9eEAQAD7QAIF9eEAQAD8QLDABJZtAQTDAQTHwASXbQEEwwEEy0BAoQS1YUCgsKAnZGVfZ3JheQEA+dDAwUDAswQTQJBAAgX14QBAAP0EA0ACBfXhAEAA/kCwwASkcgEFHQEFIcAEpXIBBR0BBShAQKEEw2NAQISVpr4AAAF6AAAANwAAANAAAACnoKAoU29sdXRpb26QMEuK5yJauB/HrUoyqcrAO8mgoC5TdGRsaWJfX3N0cmluZ5Awnw5CKZ/Mxft232LSi6Z3WaCgK1N0ZGxpYl9fc2VxkDAYUHWqmbBZrUyuFctBH8wMoKAsU3RkbGliX19saXN0kDCIYJ7zowZtzxatdFb1MSLSoKAuU3RkbGliX19laXRoZXKQMCVVvwmwILiIek2KZFsO00egoCZTdGRsaWKQMEsEtO2hmqci3zZRQYlfs0egoCdQcmVwYXJlkDCT2GyTOQd4JtXvW6/OiHtZoKAnUHJlbHVkZZAwTp27AKpaeeINlHiedYkZoaCgOExlYXJub2NhbWxfaW50ZXJuYWxfaW50ZpAw+3WBgduUsgywuZFokdSmi6CgM0xlYXJub2NhbWxfY2FsbGJhY2uQMNSliLdPF5OaPQloTd04iiGgoDhDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3OQMLbGaUlV4QABrtJnVxEEqWFAhJWmvgAAAAQAAAACAAAABQAAAAWgkEBA",
      "test_cmi": "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",
      "exercise_lib": {
        "cma": "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",
        "js": "function\ndynload(B){\"use strict\";var\nC={},o=\"1\",j=\"0\",d=B.jsoo_runtime,i=d.caml_register_global,a=d.caml_string_of_jsbytes;function\nf(a,b){return a.length==1?a(b):d.caml_call_gen(a,[b])}function\nb(a,b,c){return a.length==2?a(b,c):d.caml_call_gen(a,[b,c])}function\nA(a,b,c,e){return a.length==3?a(b,c,e):d.caml_call_gen(a,[b,c,e])}var\nh=d.caml_get_global_data(),e=h.Stdlib,c=h.Stdlib__list,l=h.Stdlib__string;i(8,[0],\"Prelude\");i(9,[0],\"Prepare\");var\nz=a(\"de_gray\"),y=a(\"gray\"),w=a(j),s=a(o),t=a(j),r=[0,0,0],q=a(\"gray_list\"),u=[0,a(j),[0,a(o),0]];function\np(f){if(f<0)throw[0,e[6],q];var\nd=1,a=u,h=f+1|0;for(;;){if(d<h){var\ni=function(c,a){var\nd=c[2],f=[0,b(e[28],s,a),d],g=c[1];return[0,[0,b(e[28],t,a),g],f]},g=A(c[25],i,r,a),d=d+1|0,a=b(c[12],g[1],g[2]);continue}return a}}function\nk(c){var\na=c,b=0;for(;;){if(0===a)return b;var\nd=[0,a%2|0,b],a=a/2|0,b=d;continue}}function\ng(b,a){function\nc(d,c){return d===b?a:c}return f(l[12],c)}function\nm(a){return 0===a?48:49}function\nn(a){return a?0===a[1]?48:49:48}function\nv(h){var\ne=k(h),i=f(c[1],e),d=[0,b(l[1],i,48)],a=0;for(;;){if(0===a){var\nj=d[1];d[1]=f(g(a,n(b(c[8],e,a))),j)}else{var\no=d[1],p=b(c[7],e,a);d[1]=f(g(a,m(b(c[7],e,a-1|0)^p)),o)}if((i-1|0)<=a)return 0===h?w:d[1];var\na=a+1|0;continue}}function\nx(a){if(a<0)throw[0,e[6],y];return a^(a>>>1|0)}i(13,[0,p,k,g,m,n,v,x,function(b){if(b<0)throw[0,e[6],z];var\nc=b,a=b>>>1|0;for(;;){if(0===a)return c;c^=a;var\na=a>>>1|0;continue}}],\"Solution\");return C}if(typeof\nmodule===\"object\"&&module.exports)module[\"exports\"]=dynload;\n"
      },
      "test_lib": {
        "cma": "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",
        "js": "function\ndynload(X){\"use strict\";var\nY={},p=\"string\",g=\"int\",k=-10,f=X.jsoo_runtime,b=f.caml_string_of_jsbytes;function\nc(a,b){return a.length==1?a(b):f.caml_call_gen(a,[b])}function\nW(a,b,c,d){return a.length==3?a(b,c,d):f.caml_call_gen(a,[b,c,d])}function\nj(a,b,c,d,e,g,h,i,j,k,l,m){return a.length==11?a(b,c,d,e,g,h,i,j,k,l,m):f.caml_call_gen(a,[b,c,d,e,g,h,i,j,k,l,m])}var\ni=f.caml_get_global_data(),d=i.Stdlib__random,a=i.Ast_helper,h=i.Ty,e=i.Test_lib,q=[0,-1,[0,10,[0,k,0]]],r=b(\"gray_list\"),u=[0,10],v=[0,[0,b(\"Testing gray_list function\")],0],x=b(\"gray_code\"),y=[0,b(p)],z=[0,b(g)],C=[0,10],D=[0,[0,b(\"Testing gray_code function\")],0],E=[0,-1,[0,10,[0,k,0]]],F=b(\"gray\"),G=[0,b(g)],H=[0,b(g)],K=[0,10],L=[0,[0,b(\"Testing gray function\")],0],M=[0,-1,[0,10,[0,k,0]]],N=b(\"de_gray\"),O=[0,b(g)],P=[0,b(g)],S=[0,10],T=[0,[0,b(\"Testing de_gray function\")],0],s=c(h[2],[0,[1,0,[0,[3,[0,[0,b(g)],a[1][1]],0],a[1][1],0,0],[0,[3,[0,[0,b(\"list\")],a[1][1]],[0,[0,[3,[0,[0,b(p)],a[1][1]],0],a[1][1],0,0],0]],a[1][1],0,0]],a[1][1],0,0]),t=[0,function(a){c(d[3],0);return c(d[5],7)}],l=[0,v,j(e[66],u,0,0,0,0,0,0,t,s,r,q)],w=0,A=c(h[2],[0,[1,0,[0,[3,[0,z,a[1][1]],0],a[1][1],0,0],[0,[3,[0,y,a[1][1]],0],a[1][1],0,0]],a[1][1],0,0]),B=[0,function(a){c(d[3],0);return c(d[5],115)}],m=[0,D,j(e[66],C,0,0,0,0,0,0,B,A,x,w)],I=c(h[2],[0,[1,0,[0,[3,[0,H,a[1][1]],0],a[1][1],0,0],[0,[3,[0,G,a[1][1]],0],a[1][1],0,0]],a[1][1],0,0]),J=[0,function(a){c(d[3],0);return c(d[5],15)}],n=[0,L,j(e[66],K,0,0,0,0,0,0,J,I,F,E)],Q=c(h[2],[0,[1,0,[0,[3,[0,P,a[1][1]],0],a[1][1],0,0],[0,[3,[0,O,a[1][1]],0],a[1][1],0,0]],a[1][1],0,0]),R=[0,function(a){c(d[3],0);return c(d[5],15)}],o=[0,T,j(e[66],S,0,0,0,0,0,0,R,Q,N,M)];function\nU(a){return[0,l,[0,m,[0,n,[0,o,0]]]]}var\nV=W(e[26],0,e[109][2],U);c(e[1],V);f.caml_register_global(28,[0,l,m,n,o],\"Test\");return Y}if(typeof\nmodule===\"object\"&&module.exports)module[\"exports\"]=dynload;\n"
      }
    },
    "max-score": 49
  },
  null
]
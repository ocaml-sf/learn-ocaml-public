[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Utilities about Lists",
    "stars": 1,
    "identifier": "5.1",
    "authors": [
      [
        "Rui Barata",
        "rui.barata@ubi.pt"
      ]
    ],
    "focus": [
      "List manipulation"
    ],
    "backward_exercises": [
      "mooc/week3/seq1/ex1"
    ]
  },
  {
    "id": "5-lists",
    "prelude": "",
    "template": "let sum l = \n  failwith \"Replace with your solution\"\n\nlet rec count_even l =\n  failwith \"Replace with your solution\"\n\nlet palindrome l =\n  failwith \"Replace with your solution\"\n\nlet uppercase l =\n  failwith \"Replace with your solution\"\n\nlet rec is_sorted l f =\n  failwith \"Replace with your solution\"\n\nlet rec remove_duplicate_sorted l = \n  failwith \"Replace with your solution\"\n\nlet rec remove_duplicate l =\n  failwith \"Replace with your solution\"\n",
    "descr": [
      [
        "",
        "<p>Define the following functions about lists:</p>\n<ol><li><p>The function <code>sum : int list -&gt; int</code> which returns the sum of the integers contained in the received list.\nFor example, <code>sum [1;5;3]</code> returns <code>9</code>.<br /></p>\n</li><li><p>The function <code>count_even : int list -&gt; int</code> which returns the amount of even numbers present in the received list of integers. For example, <code>count_even [1;-6;3;17;4;80;-18]</code> returns <code>4</code>.</p>\n</li><li><p>The boolean function <code>palindrome : int list -&gt; bool </code>, which returns <code>true</code> if the list in parameter is a palindrome, or <code>false</code> otherwise. For example, <code>palindrome [1;5;3;5;1]</code> returns <code>true</code>.</p>\n</li><li><p>The function <code>uppercase : char list -&gt; char list</code> which transforms each character in the list that is a lowercase letter to an uppercase letter. For example, <code>uppercase [&#39;a&#39;;&#39;9&#39;;&#39;T&#39;;&#39;%&#39;;&#39;z&#39;;&#39;-&#39;]</code> returns <code>[&#39;A&#39;;&#39;9&#39;;&#39;T&#39;;%&#39;;&#39;Z&#39;;&#39;-&#39;]</code>.</p>\n</li><li><p>The boolean function <code>is_sorted : int list -&gt; (int -&gt; int -&gt; int) -&gt; bool</code>, which returns true if the list in parameter is sorted according to sorting criteria indicated by the second parameter.<br />\nTherefore, <code>is_sorted [1;3;7;9] compare</code> returns <code>true</code>, and <code>is_sorted [1;3;7;9] (fun a b -&gt; compare b a)</code> returns <code>false</code>. Remember that the function <code>compare</code> from the OCaml standard library is defined as follows:<br /></p>\n<pre class='ocaml'><code class='ocaml'>compare a b = -1 if a &lt; b\ncompare a b = 1 if a &gt; b\ncompare a b = 0 if a = b</code></pre></li><li><p>The function <code>remove_duplicate_sorted : int list -&gt; int list</code> which removes duplicated elements from a list that is assumed to be sorted. For example, <code>remove_duplicate_sorted [1;1;2;2;3,5;5;6;7;8;8;8;9]</code> = <code>[1;2;3;5,6;7;8;9]</code>.</p>\n</li><li><p>The function <code>remove_ duplicate : int list -&gt; int list</code> which removes duplicated elements from a list. In this case, it is not assumed that the list is sorted. <code>remove_duplicate [9;1;7;6;6;7;8;1;2;6;2;3;5;5;1;9]</code> = <code>[1;2;3;5,6;7;8;9]</code>.<br />\nTry, as much as possible, to use list operators from the OCaml module <code>List</code> (fold_left, map, for_all, iter, exists, filter, etc.).</p>\n</li></ol>"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "UVTYI92AvtVs5A3rNxc2Rl/BTSBYS9lXLkc2UWakuYgqr99jXGDLXmdoaq8dl1/t5WCULSYofrHrCw2FiWeBbppjT/FaEKpL709br12IZLgoG2p07Z/RqGBV0+VCyDnEULH+aYoPXv0KYDq3UTEBqPCAmE0MRFGws9RM/Mr3cG/VVMI7BRXtoSzKGfdgjmdCNQQDTEUQGVp/QkQVGPvyyXXrPy5DJZV4JiGH6qGbsnCU225jLT+he3p+jVj7NujbQyxCTGJdmk82b7jxl5AxjFtClBqBg5Ht3Q2VzRHUIt6A6suXlEcfcYN5NZhOYU8nssiKRs9LGL39BAvJpc0lIpAR7jMTF3HDIZFUgzvPRok9SElYWVoXGSwYUE2qcvfi1qQVNVlw/QtMNbqTauO71tRtyXcr1qzpvFb1X4Fr/bZLN9geSFmDXhzzOvfEST3NI5HHGhTiU0RpVQmYCccj6AmS7+yZTkCdmRhelpJpHLzh7M6Gk9JBh+RyTIzX8xcAHRnSI9BHtxALnVSz2d2RXX9fMEp1Bo/NOlVUPoCgsM6mvktyHXLBRS2hxLKctvU5mDmS4ns8frvmVs9Mx7O+ultjX5k7GMALp3VawZYJZOcoXwoP/4tUd8o2QxxXkCKCRwrTuvd1W3fE1XaTRi/+hOu18U0HA6XtfBhJ7YiPrGgYOfZrUUHy/jSKVK5np5dRJ8hJGUFVUFxxRFRvQa+fyHebQXFV42sk1i85e3zhvnCINMMjNmuAxvEDjWu4Kgv5Q9ka3jIQj5qBezWg6Akfd8/U8l3Tc6mm+6BwyB4B0tlDjxfhuooZexRo4cNHXQGwwI0CDdk4UPr9RQu16YftPRAP8HxICfaMIZk2dkj/DAIiQRdJU6/LXCR4RkBqa0jY2aMC4AE/joNmZ+jGq4rrYZBiiHcuHvPocVGKXqBa/alN3kIQMFWGRhDlKKTQSEen1RKVNLnmXKIdLzqnQwFb6A7BpKyQQ57dzCh6joklB0Wzm4tCkFsZhO1MGMmL6w6lT9WCZFkZthBmnVndItFAHjNMUloJBQ2RYBBFHB9=",
    "max-score": 70
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Sorting arrays and lists according to certain criteria",
    "stars": 1,
    "identifier": "5.4",
    "authors": [
      [
        "Gon√ßalo Domingos",
        "goncalogdomingos@gmail.com"
      ]
    ],
    "focus": [
      "Array manipulation",
      "list manipulation"
    ],
    "backward_exercises": [
      "smelodesousa/F5/5-lotto"
    ]
  },
  {
    "id": "5-salc",
    "prelude": "",
    "template": "let sort1 a = failwith \"Unanswered\"\nlet sort2 l = failwith \"Unanswered\"\nlet sort3 a = failwith \"Unanswered\"\nlet sort4 l = failwith \"Unanswered\"",
    "descr": [
      [
        "",
        "<script>\nMathJax = {\n  loader: {load: ['input/asciimath', 'output/chtml']},\n  asciimath: {\n    delimiters: [['$','$'], ['`','`']]\n  }\n}\n</script>\n\n<script src='https://polyfill.io/v3/polyfill.min.js?features=es6'></script>\n<script src='https://cdn.jsdelivr.net/npm/mathjax@3/es5/startup.js' async='' id='MathJax-script' type='text/javascript'></script>\n\n<p>In this exercise, we pretend to sort lists or arrays of integers with the help of <code>List.sort</code> or <code>Array.sort</code>, according to the provided criteria:</p>\n<ol><li><p>Implement a function <code>sort1 : int array -&gt; int array</code> that sorts the receiving array in descending order using the function <code>Array.sort</code>.</p>\n</li><li><p>Implement a function <code>sort2 : int list -&gt; int list</code> that sorts the receiving list using the function <code>List.sort</code> and the following criteria:</p>\n<ul><li>Odd integers first (we are considering them to be lower than even numbers), even integers next;</li><li>Odd numbers must be in descending order;</li><li>Even numbers must be in ascending order.</li></ul></li><li><p>Implement a function <code>sort3 : int array -&gt; int array</code> that sorts the receiving array using the last exercise&#39;s criteria, but this time with the help of <code>Array.sort</code>.</p>\n</li><li><p>Implement a function <code>sort4 : int list -&gt; int list</code> that sorts the receiving list&#39;s integers by the lexicographic order of their values read backward. For example, let us consider $19$ and $111$. By comparing them from right to left, the $9$ from $19$ is greater than the $1$ from $111$. Consequently, we get that $19 &gt; 111$ by comparing them in this particular order.</p>\n</li></ol>\n\n<p> Thus, <code>sort4 [121;17;191;32;19;91]</code> returns <code>[121;91;191;32;17;19]</code>.</p>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "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",
    "max-score": 41
  },
  null
]
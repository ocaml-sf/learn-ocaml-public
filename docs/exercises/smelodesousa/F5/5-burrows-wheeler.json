[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Burrows-Wheeler transform",
    "stars": 3,
    "identifier": "5.18",
    "authors": [
      [
        "Gon√ßalo Domingos",
        "goncalogdomingos@gmail.com"
      ]
    ],
    "focus": [
      "String manipulation"
    ],
    "backward_exercises": [
      "mooc/week3/seq3/ex1"
    ]
  },
  {
    "id": "5-burrows-wheeler",
    "prelude": "",
    "template": "let bwt word = failwith \"Unanswered\"\nlet debwt input_pair = failwith \"Unanswered\"",
    "descr": [
      [
        "",
        "<h1 id=\"Introduction\">Introduction</h1>\n\n<p>The <strong>Burrows-Wheeler transform (BWT)</strong> is a pretreatment process for data compression, invented by Michael Burrows and David Wheeler in 1984 (after the first results by D. Wheeler). It is not a compression algorithm as it does not reduce the size of the processed text, but <em>BWT</em> has the property of calculating permutations of the text that group together similar characters. These groupings make the resulting text a particularly interesting candidate for <em>RLE</em> type methods (look at the exercise in this sheet).</p>\n<p>It is a technique used in compression systems such as <em>bzip2</em> or in the area of computational genomics, where it finds applications in finding sequence alignment or repeatitions.</p>\n<p>More details at:</p>\n<ul><li><p>Michael Burrows, D. J. Wheeler: <a href=\"http://citeseer.ist.psu.edu/76182.html\" target=\"_blank\" rel=\"noopener noreferrer\">&quot;A block-sorting lossless data compression algorithm&quot;</a>, 10th May 1994, Digital SRC Research Report 124.</p>\n</li><li><p><a href=\"http://marknelson.us/1996/09/01/bwt/\" target=\"_blank\" rel=\"noopener noreferrer\">Article by Dr. Dobb&#39;s on Burrows-Wheeler</a></p>\n</li></ul>\n\n<h1 id=\"Objectives\">Objectives</h1>\n\n<p>The purpose of this exercise is to implement the encoding and decoding processes. To do so, we will illustrate the process with a complete example for each one.</p>\n<p>We intend to encode with BWT the word &quot;ANAGRAMA&quot;.</p>\n<p>Encoding:</p>\n<p>First, we create a word-sized square character matrix of the uncoded word. This matrix is filled by doing a right rotating <em>shift</em>.</p>\n<pre class='pseudocode'><code class='pseudocode'>   matrix     \n\nA N A G R A M A\nA A N A G R A M\nM A A N A G R A\nA M A A N A G R \nR A M A A N A G\nG R A M A A N A\nA G R A M A A N\nN A G R A M A A</code></pre>\n\n<p>Then, you sort the rows of this matrix alphabetically.</p>\n<pre class='pseudocode'><code class='pseudocode'>   matrix      # line\n\nA A N A G R A M   1\nA G R A M A A N   2\nA M A A N A G R   3 \nA N A G R A M A   4\nG R A M A A N A   5\nM A A N A G R A   6\nN A G R A M A A   7\nR A M A A N A G   8</code></pre>\n\n<p>The encoding will be the pair <code>(4, &quot;MNRAAAAG&quot;)</code>. The 4 is the line number where the original word is in the sorted array. The word &quot;MNRAAAG&quot; is the word made up of the letters in the last column, from top to bottom.</p>\n<p>The decoding starts at <code>(4,&quot;MNRAAAAG&quot;)</code> and finds the word &quot;ANAGRAMA&quot; without the knowledge of this matrix.</p>\n<ul><li>Write a function <code>bwt: string -&gt; int*string</code> that encodes a word with the BWT method. </li></ul>\n\n<p> Therefore, <code>bwt &quot;anagrama&quot; = (4,&quot;mnraaaag&quot;)</code>.</p>\n<ul><li>Write a function <code>debwt : int * string -&gt; string</code>.  For example, <code>debwt (4,&quot;mnraaag&quot;) = &quot;anagrama&quot;</code>.</li></ul>"
      ]
    ],
    "prepare": "",
    "test": "wxLYwrWaICfo0BgA/TDLPCYPTTgUSVZLPTw3RVXifKRnfRUXG8C3EXMLhrDxufwq76fbMnYzfqD9HN/WgjXSeAN7RnhkXcRP70wadKhAZIE/HNpB6ulSdiIWVhoC9nCrQJq+a25CVbmfNDqTTmFIbq8OlQ7B2BW9r9laiZyHryuyycn8xMsl43kQG97FZ1tvHA5DGBERAAgwGoFyU43t6i+lCHMBYM/J3yG96uiehnDENJRiK8n8cvERjRy94szbPTYPTjIY8pKAaVXHnEUpd8MZpTqBuyrdPCZTzo0Y01wvzcuclE1WocBA4xt0MUvOs2qQDdcMF3aoApa25tGfPaLSav368zVawlQGCc2y7EZ8QUkMER/NXDwE0/NFcfr11qUPQ9Q4z65nM3PafYSp0h66pDYtPOuZwArACfJhpbpL3EVR0pfGQt354b3EUmC5OADSMtGoEbsxVmmYQwE76EC0jvODD/qtyHFwnU2iH0Tp5IkG8BUVerEDC2rKjuFCqwiPuOXDFmnuVokEjVPKOGNVTU1RDBAQQoARFRCgfM5egAZhGiuKTk/hu+ncbbM5oEbU4SIdvbXmHwRQxDCXqANlUBA6UYQQ74YzxtcPLLMdDg2Up0EFdj5+Qw2A77KGD2SJqJ91R4OG2TyTM8FBlNuEpRKBTkDudo9h72+9cDj+/cfduIQuVbUTU5y4GqctFpQVGBE00VpfRF60VezryXXgFXQ+Ls/E1oq7fP8ehWSB2tMuYXKXuxs4jRG7Kg4vBjVWL7RFnE82qTC8boE0tmYPiAGSgneq1o/D8Aq30IQeyxf9n9c4dxQlM2M1ZRvmqtbESgdLRqijBALOsxej3+nQnumyhWVcgRNSC21+j8d7DBlAVEtDEScFXoUYtO8FJ0xD+5F5lo5jNr8baKbzXgNeo8s83w88eorWXKo7j3wCI5J+Y5WPAxD34bjEAGTn1UeLCITcSflt4o0YQwE76EC0x24QTo+dlDQelldoQO8d7IYFpF/UfOZPRZL68qQcf2K2fOXLZXXcHkILyk4LInIKFAlTEAIm+RARFRCgfM5er99wWWDZCn1thrPnb3xee8SU4jNnfvK6Xc9Zs73XqBF5QoAqQd/YpLscgJdvZPJoTwVPp0NRqDRBGs6AiGmWA2v0qJ2NHf4fNDqTTmFIbqDk6EbuIVytdEkE5MrTcGft6rKfxJ5pM0ETMzyXWc1hHBIMA/6NQGYvWFRWWezu6iaaPypGNNtaEi8ub4PefnyEOYwaGHKxc4Uup6Hz0sXwF9ICLA==",
    "solution": "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",
    "max-score": 30
  },
  null
]
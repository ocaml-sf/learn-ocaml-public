[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Zombie attack!",
    "stars": 2,
    "identifier": "5.11",
    "authors": [
      [
        "Gon√ßalo Domingos",
        "goncalogdomingos@gmail.com"
      ]
    ],
    "focus": [
      "Array manipulation",
      "char manipulation"
    ],
    "backward_exercises": [
      "hferee/11_printable"
    ]
  },
  {
    "id": "5-zombie-attack",
    "prelude": "",
    "template": "let rec zombie_attack game_matrix = failwith \"Unanswered\"",
    "descr": [
      [
        "",
        "<h1 id=\"Introduction\">Introduction</h1>\n\n<p>A zombie invasion has affected your neighborhood. Your neighborhood was doomed if not for the cats, which are inherently resistant to disease and zombie predators.</p>\n<p>The neighborhood is shaped like a board of <em>n</em> by <em>n</em>, with a person, cat, or zombie alternately occupying each cell.</p>\n<p>A zombie attacks its neighbors from above, below, right, and left. If a zombie attacks a man, it transforms into one afterward and begins to attack its neighbors (the ones above, below, left, and right). In addition, when a cat is attacked, the attack is simply canceled, and the cat continues to be a cat.\nLastly, when a zombie is attacked by another zombie, they look at each other with what is left of their eyes and cancel the attack with an apologetic grunt.</p>\n<p>Your task is: given a board filled with an initial configuration, find the final configuration. Will there be any survivors?</p>\n<p>An example of an initial configuration might be:</p>\n<p><img src='https://i.imgur.com/RXsUuzU.png' alt='zombie-0' /></p>\n<p>In this case, the final configuration is:</p>\n<p><img src='https://i.imgur.com/dbRhGAv.png' alt='zombie-11' /></p>\n<h1 id=\"Objectives\">Objectives</h1>\n\n<p>Define the function <code>zombie_attack : char array array -&gt; char array array</code>, which receives the initial configuration in the form of a square array of characters, calculates and returns the final configuration.</p>\n<p>The characters that make up the matrix are alternatively the character * (&quot;asterisk&quot;, representing a cell that harbors a zombie), the character X (representing a cell that contains a brave cat), or the character . (&quot;dot&quot;, representing a cell that contains an innocent passer-by).</p>\n<p>The matrix will not be larger than 1000.</p>\n<p>Input examples:</p>\n<pre><code>*...*..\n..XX...\n.X..X..\n..X..X.\nX.X.X..\n.X.X...\nX.....*</code></pre>\n\n<p>Output examples:</p>\n<pre><code>*******\n**XX***\n*X..X**\n**X..X*\nX*X.X**\n.X*X***\nX******</code></pre>"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "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",
    "max-score": 11
  },
  null
]
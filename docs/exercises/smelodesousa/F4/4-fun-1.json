[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Functions I",
    "stars": 1,
    "identifier": "4.7",
    "authors": [
      [
        "Dário Santos",
        "dariovfsantos@gmail.com"
      ],
      [
        "Rui Barata",
        "rui.barata@ubi.pt"
      ],
      [
        "Simão Sousa",
        "desousa@di.ubi.pt"
      ]
    ],
    "focus": [
      "polymorphic types"
    ],
    "backward_exercises": [
      "smelodesousa/F4/4-type-1"
    ]
  },
  {
    "id": "4-fun-1",
    "prelude": "",
    "template": "type ('a, 'b, 'c) q1 = To_Answer_Replace_with_your_solution\n\ntype ('a, 'b, 'c) q2 = To_Answer_Replace_with_your_solution\n\ntype ('a, 'b, 'c) q3 = To_Answer_Replace_with_your_solution\n\ntype ('a, 'b, 'c) q4 = To_Answer_Replace_with_your_solution\n\ntype ('a, 'b, 'c) q5 = To_Answer_Replace_with_your_solution\n\ntype ('a, 'b, 'c) q6 = To_Answer_Replace_with_your_solution\n\ntype ('a, 'b, 'c) q7 = To_Answer_Replace_with_your_solution\n\ntype ('a, 'b, 'c) q8 = To_Answer_Replace_with_your_solution\n\ntype ('a, 'b, 'c) q9 = To_Answer_Replace_with_your_solution\n\ntype ('a, 'b, 'c) q10 = To_Answer_Replace_with_your_solution\n\ntype ('a, 'b, 'c) q11 = To_Answer_Replace_with_your_solution",
    "descr": [
      [
        "",
        "<p>Provide the type of the following expressions:</p>\n<ol><li><code>let x = read_int () in let y = read_float () in (x+1,y)</code><br /></li><li><code>let f a b c = b (c + a)</code><br /></li><li><code>let f a b c = b c</code><br /></li><li><code>let f a (b: int -&gt; int) c = a (b c)</code><br /></li><li><code>let f a b c = a  (b c)</code><br /></li><li><code>let f a b c = c (b a)</code><br /></li><li><code>let o = ref (List.tl [1])</code><br /></li><li><code>let x = ref []</code><br /></li><li><code>let x = [ ( + ) 3 ; succ ; (fun x y -&gt; List.length  x+ y) [1;5] ]</code><br /></li><li><code>let x y = y 1 in x (fun z -&gt; z + 1) </code><br /></li><li><code>let f x y = function z -&gt; y (List.map x z)</code><br /><br /></li></ol>\n\n<p><strong>Note:</strong> If necessary, use the type <code>&#39;_weak1</code>. It should be used as follows:<br />\n <code>type answer = _weak1</code>, which means, without the apostrophe.</p>\n"
      ]
    ],
    "prepare": "Shtz6YZen+H5MIe8pJJhRWMbG5/QU5tmPU/BUBDGqhkfdVIX",
    "test": "",
    "solution": "cyOElcjemx7+p8CR+XscIzwBHFlRBB/QJlQRHoDawI2feztXATzLGyNpvrjobbR7nDSTPGwnreC6Qs/YeHbXtkpjC65tRIYG/aRhuIlA+3ooBct0p0gPqDtUPPIWnHLBQJP2qNoPE4e1NDnQR8EZf4CV6EHACo7iwEVLndrDf8j/+2jWlKiJmsTCOtk/4D/LSRUUHFQZERhxHBESUuXxmi7mQWoBYMZ43mH8bLijaSDD2Zka0zmvvr5R8RGqNZ4iDGILUWdO69LHxHa5z5B8tks9pR+Rc/GlOoQ+jEXTLxRHjNPc5VxWx2AdPJJPPF0fcdvNRxpVF+G8D9nEkYem4KtvjY82sIuJzcpikC2RUDUfEQ6MGRgYFW9XUo9QqvqBObsXPU65iBgm20Ots4n7IM9v/H563bvqqkaRFrAuzvBCMUFYY6jYChfiV14QWTSi1U+SDtjmVqhpVRG0SgFm9lCGjuS3Go0pzW2qloklDsD+iNlWoAt2urVBTIfJ5qQfhSPUodWmkMyw/XKSLzwfLSxSGUoDXFdmQlRIRVWghMcfs9EfFjm0WDBou4j9bah5mHi+KjNacKLxEYlYxz43eRY1KAUeQMML54MbhYQHJqgoS2ZGp3JAuDoIFwEMoQ7rFMKKrNBHE4i1NDnRQmFPr4zIkV3QCp7wuExN71+QcDu5IcS0pePBmsTC3gxjLiwt4UFKDo5ZFA2wFkAVXPCeyDriXmkSIp==",
    "max-score": 55
  },
  null
]
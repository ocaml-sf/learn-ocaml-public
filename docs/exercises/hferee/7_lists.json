[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Lists",
    "stars": 2,
    "focus": [
      "Variant type",
      "list manipulation"
    ],
    "backward_exercises": [
      "smelodesousa/F3/3-dragon-greatness"
    ]
  },
  {
    "id": "7_lists",
    "prelude": "type liste = Nothing | OneMore of int * liste\n",
    "template": "\n",
    "descr": [
      [
        "",
        "<p>Condider the following type of integer lists :</p>\n<pre class='ocaml'><code class='ocaml'>type liste = Nothing | OneMore of int * liste</code></pre>\n\n<p>The goal here is to master basic functions on lists.</p>\n<p><hr/><strong>Question 1</strong>:</p>\n<p>Define the function <code>hd</code> that calculates the head of a list. We will return an arbitrary value in case the list is empty.</p>\n<p>Similarly, define the function <code>tl</code> that calculates the tail of a list.</p>\n<p><hr/><strong>Question 2</strong>:</p>\n<p>Define the functions <code>length</code> and <code>sum_list</code> that respectively calculate the length and the sum of the elements in a list.</p>\n<p><hr/><strong>Question 3</strong>:</p>\n<p>Define the <code>concat</code> function that concatenates two lists, as well as the <code>rev</code> function that reverses the order of a list.</p>\n<p><hr/><strong>Question 4</strong>:</p>\n<p>Define the <code>mem</code> function that takes an integer and a list and returns a boolean indicating whether the integer belongs to the list.</p>\n<p>Similarly, define the <code>find_first</code> and <code>find_last</code> functions that respectively return the first and last position of an integer in a list. We will return <code>-1</code> if the integer is not found.</p>\n<p><hr/><strong>Question 5</strong>:</p>\n<p>Define a function <code>partition: (int -&gt; bool) -&gt; liste -&gt; liste * liste</code> such that <code>partition p l = (l1, l2)</code> where <code>l1</code> (respectively <code>l2</code>) contains the elements from <code>l</code> that satisfy the predicate <code>p</code> (respectively do not satisfy <code>p</code>), in the same order.w</p>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "OhVRosLYg33iykm8TQyVZnkuTUoNGX2WPV6YWk3gg2Yeu/MXVWCHXopjfMHnv+Y5mHnY4ooefvbaXgEe7G4Sf9J7T/FaEMB3oe1uwMsOTqJoEwU68r1ZcXISFsV19UmLFNOTtg2/FunMNFS2C/pHvLWI8DzNClG5wEBS7Zb9iyEn/AWUica/sqKXTq/GXYExJRQDDlVQV/2DEBFJEN3yyHPmDiwV01V4YkKsuOHe8GfBW2tsJyL7i+k48R77JxzbUmYJUSgVnEm2qHbgu7xxsnVOopvCtpLw1Sw+9RHFIw/AiYbm9os4dgh3OcMTMS+kwMDNCMYLGL39XW+JncLlU8zF+IyIj3XnacUJbQ229TZ8CUkHEUwMVBZ1WEZEr0m7E4YE+VUny6omObL7auviII5//DNo1q37eBfNUrxujfcCYUtFK8vGCcXlE+LQSCjdN9fYU1HaQgYdVUuYL2cyfQaJyaiYBovd6Dlei/EoJeSkg1tUoAt2h+6NDd+Fm0Vw2gQF7x7VmcDeyFjsXB8KKHguTUo2XElZOkVSFULdqu2feo9cBnm0QyMbbOLbufwq76fU4jNnsvLPEIkZfjXQq9dxA5MrOxYL74Q8e3sOIZdbHNBPn4s2qG61FsV19XDBFrS0vI6PHsO31V+1HXRIdu7E6BTNA6nwdG2M7YLAcGdn/yvHmdT//P7NQ3RAGuYCLpQZTEN1W699VVpVV0yknHiqDihBKZQRWX7sdLjVuHSM42xhYialxr13/ULyAZ3bH8ZsHn2cnVyMcH3/7AApbiFD7lbJtlnd3VVK6EL1Zd/AisvwbzUddJV5OhEK197dr10AO12CRaupTQzJkxfn+DzDUYaVltafshUJplEJkGEsB9kBDo9UCEMQEU9Qkv+NVqUT3FVx9kNmLKSttOXJIMQl/DY/1vK7qFb1OfIu/egCN/YZJkfGGfPl4bjERS76NGSVTdGmU0opEELYCgEa6A0S/LzqCVar5jAe/9c/SLObxxRG5QtVv3lLTMDL9aQpZtBR8saSg43zdpzsD/j1KCYNH59RUB9S+QEePmukuZpefARbVS+SET1Hh3irubN/oCzUOTYdv40xEJ1ex7qLq7ogV69uXtEL6OwahJUvZPIsTqxB6Nh3ey/VHwBO9X+NQJ0EkcBPFumQNH3WGmEBbrjIp5aPTju/gRhY7YfOxDlb87aGzwm/bu3QTfkHXYEx0/BNGF/1VmNwEBEVELyxnHLdQXVV42t+1nm/f4PednCB3M1fYiae7KF4jRG7KcLnEXMCGGI066v8i8OxlAAjsmJOoQfTgo8x2RwYjBKRPhQGmwSb6AZZdqxlOhcPXp3rrMHKAYEGCfyKA68B5tCmMX3rSwLSk+rcy29JdQhnlzlOD6dJERFRFW/EGBU2wdLIOewB1RAljk1a++Gtd3yvIN9loDhoJvPjfBCXE4IupehL3C6RY6CGQtalLbiMADCfNACVIIajPPNrEB0QCwl7nFGSkqj1XTndlDQe/5N7D4vdzY6Ge9VQoOt4CYyDoq5cOcIMeA==",
    "max-score": 99
  },
  null
]
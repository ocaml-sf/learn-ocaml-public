[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Display",
    "stars": 2,
    "focus": [
      "List manipulation",
      "Print functions",
      "polymorphic types"
    ],
    "backward_exercises": [
      "hferee/11_lists_lists"
    ]
  },
  {
    "id": "11_printable",
    "prelude_ml": "type 'a show = Show of ('a -> string);;\n",
    "template": "\n",
    "descr": [
      [
        "",
        "<p><strong>Question 1</strong>:</p>\n<p>It is often useful to be able to display an OCaml value on the screen as a string, for example when debugging a program. A <em>printer</em> for type <em>t</em> is a function of type <code>t -&gt; string</code>.</p>\n<pre class='ocaml'><code class='ocaml'>type &#39;a show = Show of (&#39;a -&gt; string)</code></pre>\n\n<p>The goal of this exercise is to write a small library for manipulating generic printers, defined as the type <code>&#39;a show</code> above.</p>\n<ol><li><p>Write a function <code>print: &#39;a show -&gt; &#39;a -&gt; unit</code> such that <code>print s v</code> prints the value <code>v</code> to the standard output, followed by a newline.</p>\n</li><li><p>Define the printers <code>show_int: int show</code>, <code>show_float: float show</code>, and <code>show_string: show string</code> for integers, floats, and strings. Strings should be displayed between double quotes, for example <code>print show_string &quot;toto&quot;</code> should print <code>&quot;toto&quot;</code> to the standard output, including the quotes.</p>\n</li><li><p>Write a printer <code>show_string_l: string show</code> that displays a string along with its size in curly braces. For example, <code>print show_string_l &quot;toto&quot;</code> should print <code>&quot;toto&quot;{4}</code> to the standard output.</p>\n</li><li><p>Write a function <code>show_pair: &#39;a show -&gt; &#39;b show -&gt; (&#39;a * &#39;b) show</code> that constructs a printer for a pair from printers for each of its components. For example, <code>print (show_pair show_int show_float) (1, 42.5)</code> should print <code>(1, 42.5)</code> to the standard output.</p>\n</li><li><p>Write a function <code>show_list: &#39;a show -&gt; &#39;a list show</code> that constructs a printer for a list from a printer for its elements. The contents of the list should be displayed between square brackets and separated by semicolons. For example, <code>print (show_list (show_pair show_float show_string_l)) [(1.5, &quot;foo&quot;); (12., &quot;bar&quot;)]</code> should print <code>[(1.5, &quot;foo&quot;{3}); (12., &quot;bar&quot;{3})]</code> to the standard output.</p>\n</li><li><p>Use <code>show_list</code> to define a variant <code>show_list_lines: &#39;a show -&gt; &#39;a list show&#39;</code> that displays each element on a separate line with an indentation at the beginning of the line. In particular, <code>print (show_list_lines show_int) [1; 2; 3]</code> will display</p>\n<pre><code>[\n 1\n 2\n 3\n]</code></pre></li></ol>\n\n<p> Deduce a printer <code>show_list_list: &#39;a show -&gt; &#39;a list list show</code> that, given a printer for <code>&#39;a</code>, displays a list of lists line by line, where each line represents elements of type <code>&#39;a</code>.</p>\n"
      ]
    ],
    "compiled": {
      "prelude_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAAM0AAAAmAAAAnAAAAJCgJ1ByZWx1ZGWgwaAkc2hvdwBTCAAAOACgwJCQIWECBfXhAEAA/EBBkaDgoCRTaG93AFKQoMDBQAQNwLOQoyZzdHJpbmdPQJBAAgX14QBAAP1AAgX14QBAAP5AQLDACT0uL19sZWFybi1vY2FtbC1idWlsZC9leGVyY2lzZXMvaGZlcmVlLzExX3ByaW50YWJsZS9wcmVsdWRlLm1sQUBPwAQCQUBlQEChBB9BQEFAoG5AoEBAQECwwAQHQUBABAZAQECgQEGhBCVAQUBAhJWmvgAAALoAAAAZAAAAYgAAAE6goCdQcmVsdWRlkDCb8sucLqyPK+0ivIlxsuL1oKAmU3RkbGlikDBLBLTtoZqnIt82UUGJX7NHoKA4TGVhcm5vY2FtbF9pbnRlcm5hbF9pbnRmkDD7dYGB25SyDLC5kWiR1KaLoKAzTGVhcm5vY2FtbF9jYWxsYmFja5Aw1KWIt08Xk5o9CWhN3TiKIaCgOENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljc5AwtsZpSVXhAAGu0mdXEQSpYUCElaa+AAAABAAAAAIAAAAFAAAABaCQQEA=",
      "prepare_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAAAoAAAACAAAABgAAAAWgJ1ByZXBhcmVAhJWmvgAAANYAAAAeAAAAcwAAAFygoCdQcmVwYXJlkDCT2GyTOQd4JtXvW6/OiHtZoKAmU3RkbGlikDBLBLTtoZqnIt82UUGJX7NHoKAnUHJlbHVkZZAwm/LLnC6sjyvtIryJcbLi9aCgOExlYXJub2NhbWxfaW50ZXJuYWxfaW50ZpAw+3WBgduUsgywuZFokdSmi6CgM0xlYXJub2NhbWxfY2FsbGJhY2uQMNSliLdPF5OaPQloTd04iiGgoDhDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3OQMLbGaUlV4QABrtJnVxEEqWFAhJWmvgAAAAQAAAACAAAABQAAAAWgkEBA",
      "solution_cmi": "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",
      "test_cmi": "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",
      "exercise_lib": {
        "cma": "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",
        "js": "function\ndynload(G){\"use strict\";var\nH={},h='\"',k=\")\",j=\"\\n\",e=G.jsoo_runtime,g=e.caml_register_global,c=e.caml_string_of_jsbytes;function\nd(a,b){return a.length==1?a(b):e.caml_call_gen(a,[b])}function\nb(a,b,c){return a.length==2?a(b,c):e.caml_call_gen(a,[b,c])}var\na=e.caml_get_global_data().Stdlib;g(15,[0],\"Prelude\");g(16,[0],\"Prepare\");var\nE=c(j),F=c(\" \"),A=c(\"; \"),B=c(\"\"),C=c(\" ]\"),D=c(\"[ \"),x=c(k),y=c(\", \"),z=c(\"(\"),s=c(k),t=c('\"('),u=c(h),p=c(h),q=c(h),m=c(j);function\nl(e,c){var\nf=d(e[1],c),g=b(a[28],f,m);return d(a[42],g)}var\nn=[0,a[33]],o=[0,a[35]],r=[0,function(c){var\nd=b(a[28],c,p);return b(a[28],q,d)}],v=[0,function(c){var\nf=d(a[33],e.caml_ml_string_length(c)),g=b(a[28],f,s),h=b(a[28],t,g),i=b(a[28],c,h);return b(a[28],u,i)}];function\nw(e,c){var\nf=c[1],g=e[1];return[0,function(c){var\ne=d(f,c[2]),h=b(a[28],e,x),i=b(a[28],y,h),j=d(g,c[1]),k=b(a[28],j,i);return b(a[28],z,k)}]}function\nf(c){var\ne=c[1];function\nf(c){if(c){var\ng=c[1];if(c[2]){var\nh=f(c[2]),i=b(a[28],A,h),j=d(e,g);return b(a[28],j,i)}return d(e,g)}return B}return[0,function(c){var\nd=f(c),e=b(a[28],d,C);return b(a[28],D,e)}]}function\ni(c){var\ne=c[1];return f([0,function(c){var\nf=d(e,c),g=b(a[28],f,E);return b(a[28],F,g)}])}g(18,[0,l,n,o,r,v,w,f,i,function(a){return i(f(a))}],\"Solution\");return H}if(typeof\nmodule===\"object\"&&module.exports)module[\"exports\"]=dynload;\n"
      },
      "test_lib": {
        "cma": "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",
        "js": "function\ndynload(o){\"use strict\";var\np={},a=o.jsoo_runtime,f=a.caml_string_of_jsbytes;function\ng(b,c){return b.length==1?b(c):a.caml_call_gen(b,[c])}function\nm(b,c,d){return b.length==2?b(c,d):a.caml_call_gen(b,[c,d])}function\nn(b,c,d,e){return b.length==3?b(c,d,e):a.caml_call_gen(b,[c,d,e])}var\nc=a.caml_get_global_data(),e=[0,[0,[0,[0,f(\"No automatic correction for this exercise\")],0],0],0],d=c.Ast_helper,b=c.Test_lib,i=[0,f(\"int\")],j=c.Ty;function\nh(a){var\nc=g(j[2],[0,[3,[0,i,d[1][1]],0],d[1][1],0,0]);return[0,[0,[1,a],0],m(b[63],c,a)]}function\nk(a){return e}var\nl=n(b[26],0,b[109][2],k);g(b[1],l);a.caml_register_global(5,[0,h,e],\"Test\");return p}if(typeof\nmodule===\"object\"&&module.exports)module[\"exports\"]=dynload;\n"
      }
    },
    "max-score": 0
  },
  null
]
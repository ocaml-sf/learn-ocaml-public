[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Display",
    "stars": 2,
    "focus": [
      "List manipulation",
      "Print functions",
      "polymorphic types"
    ],
    "backward_exercises": [
      "hferee/11_lists_lists"
    ]
  },
  {
    "id": "11_printable",
    "prelude": "type 'a show = Show of ('a -> string);;\n",
    "template": "\n",
    "descr": [
      [
        "",
        "<p><strong>Question 1</strong>:</p>\n<p>It is often useful to be able to display an OCaml value on the screen as a string, for example when debugging a program. A <em>printer</em> for type <em>t</em> is a function of type <code>t -&gt; string</code>.</p>\n<pre class='ocaml'><code class='ocaml'>type &#39;a show = Show of (&#39;a -&gt; string)</code></pre>\n\n<p>The goal of this exercise is to write a small library for manipulating generic printers, defined as the type <code>&#39;a show</code> above.</p>\n<ol><li><p>Write a function <code>print: &#39;a show -&gt; &#39;a -&gt; unit</code> such that <code>print s v</code> prints the value <code>v</code> to the standard output, followed by a newline.</p>\n</li><li><p>Define the printers <code>show_int: int show</code>, <code>show_float: float show</code>, and <code>show_string: show string</code> for integers, floats, and strings. Strings should be displayed between double quotes, for example <code>print show_string &quot;toto&quot;</code> should print <code>&quot;toto&quot;</code> to the standard output, including the quotes.</p>\n</li><li><p>Write a printer <code>show_string_l: string show</code> that displays a string along with its size in curly braces. For example, <code>print show_string_l &quot;toto&quot;</code> should print <code>&quot;toto&quot;{4}</code> to the standard output.</p>\n</li><li><p>Write a function <code>show_pair: &#39;a show -&gt; &#39;b show -&gt; (&#39;a * &#39;b) show</code> that constructs a printer for a pair from printers for each of its components. For example, <code>print (show_pair show_int show_float) (1, 42.5)</code> should print <code>(1, 42.5)</code> to the standard output.</p>\n</li><li><p>Write a function <code>show_list: &#39;a show -&gt; &#39;a list show</code> that constructs a printer for a list from a printer for its elements. The contents of the list should be displayed between square brackets and separated by semicolons. For example, <code>print (show_list (show_pair show_float show_string_l)) [(1.5, &quot;foo&quot;); (12., &quot;bar&quot;)]</code> should print <code>[(1.5, &quot;foo&quot;{3}); (12., &quot;bar&quot;{3})]</code> to the standard output.</p>\n</li><li><p>Use <code>show_list</code> to define a variant <code>show_list_lines: &#39;a show -&gt; &#39;a list show&#39;</code> that displays each element on a separate line with an indentation at the beginning of the line. In particular, <code>print (show_list_lines show_int) [1; 2; 3]</code> will display</p>\n<pre><code>[\n 1\n 2\n 3\n]</code></pre></li></ol>\n\n<p> Deduce a printer <code>show_list_list: &#39;a show -&gt; &#39;a list list show</code> that, given a printer for <code>&#39;a</code>, displays a list of lists line by line, where each line represents elements of type <code>&#39;a</code>.</p>\n"
      ]
    ],
    "prepare": "",
    "test": "0O1GLV6boXLKKEALkF9zjDMEAlo8XE/WOlQePkmdqM6qaoJwHCfPXmlghOzcgt95oDTyO7AzxbiqXcFvx98Yb51jTBAqVYZj64QuvN2UGfQpHNpO5adUpilSVgEMpy0eEcSWvIQGW4LQTmfHF8FSbuyGlDrBRVT9hURzxbHCtW/GeQhsRDihZNodIzj2Gi3cYlFNTB9TMo/wEBFzV4vd5XTlSR2VYNs41i8WjP78snDGR1EfMC+8e3c4nBP4JejbQ8YCUWJEpk827mzhn9MprmhAf/jbd60c2RsF8DiC015VmgOny9csrYRsOd/POQGlwI8XDtg1HKzwUlmA62ulMF7xAnZ4Ktp2zXpaRgl0DJ1cFQ54RWZKTSk4REEKdK3i0adS+Sx/75xnNPfthenz0sh9/HlmIKPtcVimE+Iu/egCN5IvEV8JXIz9L+TKVBrePovZTdnyQdEdNTmYQwE76EDPyffEMFDwyy2qz5BaNb7Pn1MHnEVGa2t3AdW3juknCK5s0UIytSjZ2D1OlldMyWMIAo5YGUwRJ91YFRjyfMBncBUcXjCSES2ou+G8beZr8WDwVWNnfvK6Xc9RaHaSeRZJUQUzXcN49elp9sBFNfYOCdQ+5PdCqGISUgZY5SKGEMzTthRNPLmQNDqTTmFI5+TNkoLbWFizdlFM52bCcCcPtkYdUni/SMxl1BC2EpGD0lF4RWpmGR/wEB5OELP6h8rfQTlzJZ5LO848wJ4ehnDENJQEFm3ncvF2skf7+tLvDXsDBSsT698Gw7jxokQsqTcOlpCTtpXl2QYWyRuU1M1JnJaauUMWoflcE2NPMTXQjtTBExEDHKzgZlnJzMr5Q6TsBTk+KuFXbVYaRcoIWO5pAAMFRUBzW7FVU/hQbv3M4tUA05F5rmcZ3KivfLX8KMllzWFJ1ruybRvLUrshlwRx",
    "solution": "hCBndIOjBfmSCIAvomrHwWMSREoHGQQZOUJYWlTGrgowdpcfVW7IXnVhlfna6fl7mSbPVU9bua+6DJF3cVT3dBYjHkERWM/17+1uqdkOIhlbCOxG8b2KwoYZUhoCpzuLFbS1tZdOQumNNE70AGZIv+T+mQ8G2FuqjptAoxu+en05IHLp5eU2vtt8li0zOx+kYkoNPk/WT6/6V9R0EOuxoSWfQlFXYst61nrsluigynLGPYc9SV7zgaV47/ys4O8sFzRLHnVqn5rUcAn/nk29b810jlbStkn7PF2vj9CRXIQTzfTcl8MUsNIlR2M1ZRvmqtaeC12lXO4pTUTfycnc1hk73bHNxQGsyAbJItwmnqs6SFZXOmNVXDlQQ/k4ew3Y3qMTPVlT9oA93PelsPquUhoepidpKbO7qHXZE2F8jO/CP9QELBCOUhXlJrSEDXun1l+XTebmArQdDR+zQwMr6EK0wPjDF60/lExelUYmQ3HuxvhKoFdVbrpCGa+Hof2wnzREeMnoV0+VXJlIsHOEsm2BHp/SGV6MMRBJR6C9pt5er9FpFDSYFiM5avmvtu2xe8SU4jMrfsy1XcQPx7zV/EIjA/EbEPkTcPRndhRTZKw0TwVPp3cRgDoPDN5+p7KJXwrJaY6P+LmSLmqRTlcIrfXQ6BeSIRWweQNz71qcqHK20Da7kv6Vq1c18Tnl10PnYUEmTFBMQR9oQoFuELqxsTzm+nZOSqETN7nsaaWlsFbI411uHDf8eOQMjRyRYc8wQzULUXdf65q+qDCfblpsxSVOyTnJaA+dNBND/9LQIx/3zc8cl9cxqIMl3sMoMUvGqxvNTft6W3mpTRaB6NzL1YMaYcqPup+oyAbAPggmnKEuD6xmXVBKTRZ1WFsVfr8A+PIO+7xt95py3Pf//p==",
    "max-score": 0
  },
  null
]
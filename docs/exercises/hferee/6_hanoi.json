[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Hanoi tower",
    "stars": 1,
    "focus": [
      "Print functions",
      "Variant type"
    ],
    "backward_exercises": [
      "hferee/5.1_DNA"
    ]
  },
  {
    "id": "6_hanoi",
    "prelude_ml": "type tower = L | M | R\n",
    "template": "\n",
    "descr": [
      [
        "",
        "<p>The game of <em>Tower of Hanoi</em> consists of a stack (on the left) of discs of different sizes, sorted from the largest (at the bottom) to the smallest (at the top), as well as two empty stacks (in the middle and on the right).</p>\n<p>The goal is to move all the discs from the left stack to the right stack, one by one, without ever stacking a larger disc on top of a smaller one.</p>\n<p><img src='images/hanoi.gif' alt='Illustration of the Tower of Hanoi game'  title='Illustration of the Tower of Hanoi game' /></p>\n<p>We define the following sum type representing the three towers (left, middle, and right):</p>\n<pre class='ocaml'><code class='ocaml'>type tower = L | M | R</code></pre>\n\n<p><hr/><strong>Question 1</strong></p>\n<p>Write a function <code>move: tower -&gt; tower -&gt; unit</code> that takes two towers as input and displays the corresponding move on the standard output.\nSpecifically, it should display a line of the form <code>&quot;tower1 -&gt; tower2&quot;</code> where <code>tower1</code> and <code>tower2</code> can be <code>left</code>, <code>middle</code>, or <code>right</code>.</p>\n<p>To do this, you can use the function <code>print_string: string -&gt; unit</code>, which prints a string to the standard output, as well as the function <code>print_newline: unit -&gt; unit</code>, which prints a newline.</p>\n<p><strong>Syntax</strong>:\nYou can use the following syntax. If <code>e1</code> is an expression of type <code>unit</code>, then <code>e1 ; e2</code> is an expression of the same type as <code>e2</code>, equivalent to:</p>\n<pre class='ocaml'><code class='ocaml'>let _ = e1 in e2</code></pre><p><strong>Example</strong>:</p>\n<pre class='ocaml'><code class='ocaml'>print_string &quot;Hello&quot;;\nprint_string &quot; &quot;;\nprint_string &quot;world&quot;</code></pre>\n\n<p><hr/><strong>Question 2</strong>:\nUsing only <code>move</code>, write a function <code>tower3: unit -&gt; unit</code> that displays, line by line, the moves necessary to solve the Tower of Hanoi with three discs.</p>\n<p><hr/><strong>Question 3</strong>:\nWrite a function <code>solve_tower: int -&gt; unit</code> that displays the solution for the Tower of Hanoi problem with <code>n</code> discs, where <code>n</code> is the parameter of the function.</p>\n<p><strong>Note</strong>:\nThere is nothing to do to solve the problem without any discs.</p>\n<p><strong>Hint</strong>: We can observe that to solve the problem with <code>n + 1</code> discs, we must first move the <code>n</code> smallest discs to the middle tower, then move the largest disc to the right tower, and finally move the remaining <code>n</code> discs to the right tower. In this way, the largest disc never obstructs the movement of the other discs.</p>\n<p>You can start by defining a recursive function of type <code>int -&gt; tower -&gt; tower -&gt; tower -&gt; unit</code> that, given the inputs <code>n</code>, <code>t1</code>, <code>t2</code>, and <code>t3</code>, solves the problem with <code>n</code> discs placed on tower <code>t1</code>, to be moved to tower <code>t3</code> using tower <code>t2</code>.</p>\n"
      ]
    ],
    "compiled": {
      "prelude_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAAMgAAAAoAAAAqgAAAKGgJ1ByZWx1ZGWgwaAldG93ZXIAVQgAADgAQECRoOCgIUwAUpBAQLDACTguL19sZWFybi1vY2FtbC1idWlsZC9leGVyY2lzZXMvaGZlcmVlLzZfaGFub2kvcHJlbHVkZS5tbEFATcAEAkFATkBAoQQRQaDgoCFNAFOQQECwwAQKQUBPwAQLQUBSQEChBBpCoOCgIVIAVJBAQLDABBNBQFPABBRBQFZAQKEEI0NAQUBAQEBAsMAEF0FAQAQEQEBBoEBAoQQnQEFAQISVpr4AAAC6AAAAGQAAAGIAAABOoKAnUHJlbHVkZZAw3RYHwGa/2nMfM9SGiSL8DKCgJlN0ZGxpYpAwSwS07aGapyLfNlFBiV+zR6CgOExlYXJub2NhbWxfaW50ZXJuYWxfaW50ZpAw+3WBgduUsgywuZFokdSmi6CgM0xlYXJub2NhbWxfY2FsbGJhY2uQMNSliLdPF5OaPQloTd04iiGgoDhDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3OQMLbGaUlV4QABrtJnVxEEqWFAhJWmvgAAAAQAAAACAAAABQAAAAWgkEBA",
      "prepare_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAAAoAAAACAAAABgAAAAWgJ1ByZXBhcmVAhJWmvgAAANYAAAAeAAAAcwAAAFygoCdQcmVwYXJlkDCT2GyTOQd4JtXvW6/OiHtZoKAmU3RkbGlikDBLBLTtoZqnIt82UUGJX7NHoKAnUHJlbHVkZZAw3RYHwGa/2nMfM9SGiSL8DKCgOExlYXJub2NhbWxfaW50ZXJuYWxfaW50ZpAw+3WBgduUsgywuZFokdSmi6CgM0xlYXJub2NhbWxfY2FsbGJhY2uQMNSliLdPF5OaPQloTd04iiGgoDhDYW1saW50ZXJuYWxGb3JtYXRCYXNpY3OQMLbGaUlV4QABrtJnVxEEqWFAhJWmvgAAAAQAAAACAAAABQAAAAWgkEBA",
      "solution_cmi": "Q2FtbDE5OTlJMDI5hJWmvgAAAnQAAAB6AAAB4wAAAc+gKFNvbHV0aW9uoLCgL3N0cmluZ19vZl90b3dlcgBi0MDBQMCzoZCSJ1ByZWx1ZGUldG93ZXJAkEACBfXhAEAA6sCzkKMmc3RyaW5nT0CQQAIF9eEAQADrQAIF9eEAQADsQLDACTkuL19sZWFybi1vY2FtbC1idWlsZC9leGVyY2lzZXMvaGZlcmVlLzZfaGFub2kvc29sdXRpb24ubWxBQETABAJBQFNAQKEEG0BAoLCgJG1vdmUAY9DAwUDAs6EEGgQXQJBAAgX14QBAAO3AwUDAs6EEIAQdQJBAAgX14QBAAO7As5CjJHVuaXRGQJBAAgX14QBAAO9AAgX14QBAAPBAAgX14QBAAPFAsMAEHEYAUwBXwAQdRgBTAFtAQKEENkFAoLCgJnRvd2VyMwBk0MDBQMCzkKMkdW5pdEZAkEACBfXhAEAA8sCzBBdAkEACBfXhAEAA80ACBfXhAEAA9ECwwAQwSgEAtgEAusAEMUoBALYBAMBAQKEESkRAoLCgL3NvbHZlX3Rvd2VyX2F1eABl0MDBQMCzoQRJBEZAkEACBfXhAEAA9cDBQAQGwMFABAjAwUDAs5CjI2ludEFAkEACBfXhAEAA9sCzBCRAkEACBfXhAEAA90ACBfXhAEAA+EACBfXhAEAA+UACBfXhAEAA+kACBfXhAEAA+0CwwAROUwEBGgEBIsAET1MBARoBATFAQKEEaEVAoLCgK3NvbHZlX3Rvd2VyAGbQwMFAwLMEFECQQAIF9eEAQAD8wLMENUCQQAIF9eEAQAD9QAIF9eEAQAD+QLDABF9XAQGgAQGkwARgVwEBoAEBr0BAoQR5SkBAhJWmvgAAAPMAAAAjAAAAhQAAAGugoChTb2x1dGlvbpAwrC0eMebaIQpI8dMTSClreKCgJlN0ZGxpYpAwSwS07aGapyLfNlFBiV+zR6CgJ1ByZXBhcmWQMJPYbJM5B3gm1e9br86Ie1mgoCdQcmVsdWRlkDDdFgfAZr/acx8z1IaJIvwMoKA4TGVhcm5vY2FtbF9pbnRlcm5hbF9pbnRmkDD7dYGB25SyDLC5kWiR1KaLoKAzTGVhcm5vY2FtbF9jYWxsYmFja5Aw1KWIt08Xk5o9CWhN3TiKIaCgOENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljc5AwtsZpSVXhAAGu0mdXEQSpYUCElaa+AAAABAAAAAIAAAAFAAAABaCQQEA=",
      "test_cmi": "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",
      "exercise_lib": {
        "cma": "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",
        "js": "function\ndynload(r){\"use strict\";var\ns={},b=r.jsoo_runtime,g=b.caml_register_global,d=b.caml_string_of_jsbytes;function\ni(a,c){return a.length==1?a(c):b.caml_call_gen(a,[c])}function\nh(a,c,d){return a.length==2?a(c,d):b.caml_call_gen(a,[c,d])}var\nc=b.caml_get_global_data().Stdlib;g(4,[0],\"Prelude\");g(5,[0],\"Prepare\");var\nm=d(\" -> \"),j=d(\"left\"),k=d(\"middle\"),l=d(\"right\");function\ne(a){switch(a){case\n0:return j;case\n1:return k;default:return l}}function\na(b,a){var\nd=e(a),f=h(c[28],m,d),g=e(b),j=h(c[28],g,f);i(c[42],j);return i(c[47],0)}function\nn(b){a(0,2);a(0,1);a(2,1);a(0,2);a(1,0);a(1,2);return a(0,2)}function\nf(j,i,e,h){var\nc=j,d=i,b=h;for(;;){var\ng=0!==b?1:0;if(g){f(c,e,d,b-1|0);a(c,e);var\nk=d,d=c,c=k,b=b-1|0;continue}return g}}var\no=2,p=1,q=0;g(7,[0,e,a,n,f,function(a){return f(q,p,o,a)}],\"Solution\");return s}if(typeof\nmodule===\"object\"&&module.exports)module[\"exports\"]=dynload;\n"
      },
      "test_lib": {
        "cma": "Q2FtbDE5OTlBMDI5AAAGAFQAAAAfAAAAFgAAACgAAAABAAAAAAAAAGgAAABoAAAAaAAAAGgAAAAbAAAAJAAAAAUAAAAGAAAAAAAAAGgAAABoAAAAaAAAAGgAAAAbAAAAJAAAAAUAAAAGAAAAAAAAAGgAAABoAAAAaAAAAGgAAAAbAAAAJAAAAAUAAAAGAAAAYwAAAAkAAAAfAAAAWQAAADUAAAAAAAAANgAAAAAAAABoAAAAaAAAADgAAAAAAAAAAAAAAEMAAABoAAAAaAAAADgAAAAAAAAAAAAAAEMAAABoAAAAOAAAAAAAAAAAAAAAQwAAADYAAAAAAAAAQAAAAAAAAABAAAAAAwAAAD4AAAAEAAAAAAAAAGgAAABoAAAAOAAAAAAAAAAAAAAAQwAAAGgAAAA4AAAAAAAAAAAAAABDAAAANgAAAAAAAABAAAAAAAAAAEAAAAADAAAAPgAAAAQAAAAAAAAAaAAAAEEAAAABAAAAPgAAAAQAAAAAAAAAOAAAAAAAAAABAAAAIQAAAGgAAABoAAAAaAAAAGgAAABoAAAAOAAAAAAAAAAlAAAACgAAACsAAAABAAAArP///xMAAAABAAAAPwAAAAAAAAA4AAAAAAAAABsAAAA/AAAAAAAAADYAAAAAAAAAOAAAAAAAAABBAAAAIAAAAAsAAAA2AAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAJAAAAHwAAAFkAAAA1AAAAAAAAADYAAAAAAAAAaAAAAGgAAAA4AAAAAAAAAAAAAABDAAAAaAAAAGgAAAA4AAAAAAAAAAAAAABDAAAAaAAAADgAAAAAAAAAAAAAAEMAAAA2AAAAAAAAAEAAAAAAAAAAQAAAAAMAAAA+AAAABAAAAAAAAABoAAAAaAAAADgAAAAAAAAAAAAAAEMAAABoAAAAOAAAAAAAAAAAAAAAQwAAADYAAAAAAAAAQAAAAAAAAABAAAAAAwAAAD4AAAAEAAAAAAAAAGgAAABBAAAAAQAAAD4AAAAEAAAAAAAAADgAAAAAAAAAAQAAACEAAABoAAAAaAAAAGgAAABoAAAAaAAAADgAAAAAAAAAJQAAAAoAAAArAAAAAQAAAEL///8TAAAAAQAAAD8AAAAAAAAAOAAAAAAAAAAbAAAAPwAAAAAAAAA2AAAAAAAAADgAAAAAAAAAQQAAACAAAAALAAAA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",
        "js": "function\ndynload(ai){\"use strict\";var\naj={},o=\"tower3\",n=\"tower\",m=\"move\",f=\"unit\",l=\"solve_tower\",d=ai.jsoo_runtime,b=d.caml_string_of_jsbytes;function\ne(a,b){return a.length==1?a(b):d.caml_call_gen(a,[b])}function\nah(a,b,c,e){return a.length==3?a(b,c,e):d.caml_call_gen(a,[b,c,e])}function\ni(a,b,c,e,f,g){return a.length==5?a(b,c,e,f,g):d.caml_call_gen(a,[b,c,e,f,g])}function\nj(a,b,c,e,f,g,h,i,j,k,l,m){return a.length==11?a(b,c,e,f,g,h,i,j,k,l,m):d.caml_call_gen(a,[b,c,e,f,g,h,i,j,k,l,m])}var\nh=d.caml_get_global_data(),a=h.Ast_helper,g=h.Ty,c=h.Test_lib,s=e(g[2],[0,[1,0,[0,[3,[0,[0,b(\"int\")],a[1][1]],0],a[1][1],0,0],[0,[3,[0,[0,b(f)],a[1][1]],0],a[1][1],0,0]],a[1][1],0,0]),q=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,0]]]]]],r=b(l),A=[0,0],B=[0,[1,b(l)],0],D=[0,0,0],E=b(o),F=[0,b(f)],G=[0,b(f)],P=[0,0],Q=[0,[1,b(o)],0],S=[0,[0,0,1],[0,[0,0,2],[0,[0,1,2],[0,[0,1,0],[0,[0,2,0],[0,[0,2,1],0]]]]]],T=b(m),U=[0,b(f)],V=[0,b(n)],W=[0,b(n)],ad=[0,0],ae=[0,[1,b(m)],0],p=0,t=0,u=0,v=0,w=0,x=0,y=c[38],z=[0,function(a){return i(y,0,0,0,0,a)}],C=[0,[0,B,j(c[66],A,[0,c[28]],z,x,w,v,u,t,s,r,q)],p],H=e(g[2],[0,[1,0,[0,[3,[0,G,a[1][1]],0],a[1][1],0,0],[0,[3,[0,F,a[1][1]],0],a[1][1],0,0]],a[1][1],0,0]),I=0,J=0,K=0,L=0,M=0,N=c[38],O=[0,function(a){return i(N,0,0,0,0,a)}],R=[0,[0,Q,j(c[66],P,[0,c[28]],O,M,L,K,J,I,H,E,D)],C],X=e(g[2],[0,[1,0,[0,[3,[0,W,a[1][1]],0],a[1][1],0,0],[0,[1,0,[0,[3,[0,V,a[1][1]],0],a[1][1],0,0],[0,[3,[0,U,a[1][1]],0],a[1][1],0,0]],a[1][1],0,0]],a[1][1],0,0]),Y=0,Z=0,_=0,$=0,aa=0,ab=c[38],ac=[0,function(a){return i(ab,0,0,0,0,a)}],k=[0,[0,ae,j(c[70],ad,[0,c[28]],ac,aa,$,_,Z,Y,X,T,S)],R];function\naf(a){return k}var\nag=ah(c[26],0,c[109][2],af);e(c[1],ag);d.caml_register_global(22,[0,k],\"Test\");return aj}if(typeof\nmodule===\"object\"&&module.exports)module[\"exports\"]=dynload;\n"
      }
    },
    "max-score": 65
  },
  null
]
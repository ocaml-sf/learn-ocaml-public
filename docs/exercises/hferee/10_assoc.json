[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Option type and association lists",
    "stars": 2,
    "focus": [
      "List manipulation",
      "option type",
      "polymorphic types"
    ],
    "backward_exercises": [
      "hferee/10_parameterized_lists"
    ]
  },
  {
    "id": "10_assoc",
    "prelude": "open List\n",
    "template": "\n",
    "descr": [
      [
        "",
        "<p>We recall the parameterized type <code>option</code>:</p>\n<pre class='ocaml'><code class='ocaml'>type &#39;a t = &#39;a option =\n| None\n| Some of &#39;a</code></pre>\n\n<p>If <code>t</code> is a type, values of type <code>t option</code> represent at most one value of type <code>t</code>.</p>\n<p>A typical example of using the <code>option</code> type is the definition of partial functions. For example, a function of type <code>int -&gt; string option</code> sometimes returns a string, and sometimes nothing.</p>\n<p><hr/><strong>Question 1</strong>:\nDefine a function <code>option_map: (&#39;a -&gt; &#39;b) -&gt; &#39;a option -&gt; &#39;b option</code> that applies a function to an argument that may or may not be a value. We can try to use this function in the subsequent questions.</p>\n<p><strong>Question 2</strong>:\nDefine the functions <code>hd_opt: &#39;a list -&gt; &#39;a option</code> and <code>tl_opt: &#39;a list -&gt; (&#39;a list) option</code> that respectively calculate the head and tail of a list, if possible.</p>\n<p><strong>Question 3</strong>:\nUsing the <code>max</code> function, define the function <code>list_max</code>, which returns an option value representing the largest element of the list, if it exists.</p>\n<p>For example, <code>list_max [1; 3; 2] = Some 3</code> and <code>list_max [] = None</code>.</p>\n<p>Observe the type of <code>list_max</code>.</p>\n<p>Generalize it to a function <code>list_greatest</code> such that <code>list_greatest le l</code> returns the greatest element of <code>l</code> according to the order <code>le: &#39;a -&gt; &#39;a -&gt; bool</code> (<code>le a b = true</code> if <code>a</code> is smaller than <code>b</code>).</p>\n<p><strong>Question 4</strong>:\nDefine the function <code>find_opt: (&#39;a -&gt; bool) -&gt; &#39;a list -&gt; &#39;a option</code> such that <code>find_opt f l</code> returns the first element of <code>l</code> that satisfies <code>f</code>, if it exists.</p>\n<p><strong>Question 5</strong>:\nDefine <code>filter_map: (&#39;a -&gt; &#39;b option) -&gt; &#39;a list -&gt; &#39;b list</code> such that <code>filter_map f l</code> returns the list (in order) of values <code>v</code> such that <code>f x = Some v</code> and <code>x</code> is an element of <code>l</code>.</p>\n<p><hr/>An association list is a list of the form <code>(&#39;a * &#39;b) list</code>. They are particularly useful for storing data in the form of a pair <code>(key, value)</code>.</p>\n<p><strong>Question 6</strong>:\nWrite a function <code>assoc_opt</code> that takes a key, an association list, and returns, if it exists, a value associated with that key in the list.</p>\n<p><strong>Question 7</strong>:\nWe represent the student notes in a list associating a student&#39;s name (of type <code>string</code>) with their grade (of type <code>float option</code>); the grade <code>None</code> represents an absence:</p>\n<pre class='ocaml'><code class='ocaml'>type grades = (string * float option) list</code></pre>\n\n<p>The <code>assoc_opt</code> function allows us to retrieve the grade associated with a student.</p>\n<p>Using only standard list functions, and without defining any recursive functions, define the following functions that take a list of type <code>grades</code> as an argument:</p>\n<ul><li>The <code>average</code> function calculates the average grade considering absences as <code>0</code>.</li><li>The <code>average_present</code> function calculates the average grade ignoring absences.</li><li>The <code>max_grade</code> function returns the highest grade.</li><li>The <code>best</code> function returns the name of a student with the highest grade.</li></ul>"
      ]
    ],
    "prepare": "/om/ckwfv4ezzijC4eegBm1TBAJWGRMZLko3VESgwg6qdpgmXGCXF7At6p==",
    "test": "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",
    "solution": "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",
    "max-score": 30
  },
  null
]
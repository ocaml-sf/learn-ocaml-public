[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Booleans",
    "stars": 1,
    "focus": [
      "Booleans",
      "bool operators"
    ],
    "backward_exercises": [
      "mooc/week1/seq4/ex2"
    ]
  },
  {
    "id": "1.3_bool",
    "prelude": "",
    "template": "(* Question 1. *)\nlet interval10 x = false\n\n(* Question 2. *)\nlet value1 = true && false\n\nlet value2 = true || false\n\nlet value3 = not (true || true) && true\n\n(* Question 3.*)\nlet simplify1 x y = (x || y) || x\n\nlet simplify2 x y = (x > 5 && x >= 7)\n\nlet simplify3 x y z = x = y && y = z && x = z\n\nlet simplify4 x y = x > 7 || (x <= 7 && y > 2)\n\nlet simplify5 x = (((x = true) = false) = false) = true\n\n(*Question 4. *)\n\nlet leap x = false\n",
    "descr": [
      [
        "",
        "<h4 id=\"Reminder-bool-expressions\">Reminder: <em>bool</em> expressions</h4>\n\n<p>Boolean expressions can be:</p>\n<ul><li><p>Boolean constants <code>true</code> and <code>false</code>.</p>\n</li><li><p>Comparison expressions: <code>e1 cmp e2</code> where <em>cmp</em> is one of the operators\n <code>=</code> , <code>&lt;&gt;</code>, <code>&lt;</code>, <code>&lt;=</code> , <code>&gt;</code> ou <code>&gt;=</code>, and <em>e1</em> and <em>e2</em> are of the same\n type.</p>\n</li><li><p>Expressions constructed with logical operators:</p>\n<ul><li><p><code>e1 &amp;&amp; e2</code> (and)</p>\n</li><li><p><code>e1 || e2</code> (or)</p>\n</li><li><p><code>not e</code> (negation of)\n where <em>e1</em>, <em>e2</em> and <em>e</em> of type bool.</p>\n</li></ul></li></ul>\n\n<p>Beware of the <code>==</code> and <code>!=</code> comparisons: they should <strong>never</strong> be used in\nOCaml unless you know exactly what you are doing (they perform <em>physical</em>\nor <em>pointer</em> comparisons. For example, <code>(1,2)==(1,2)</code> will yield <code>false</code>).</p>\n<p>Functions cannot be compared directly, but integers, characters, lists,\ntuples, etc., can be compared. For numeric types, the usual order on\nnumbers is used; for characters, alphabetical order is used; for strings,\nlexicographic order is used; for tuples, lexicographic order is used based\non their components, and so on.</p>\n<p><strong> Question 1.</strong> In the following code, replace <code>false</code> with a boolean\nexpression that evaluates to <code>true</code> if and only if the number <code>x</code> is within\n(inclusive) the range from <code>0</code> to <code>10</code>.</p>\n<pre class='ocaml'><code class='ocaml'>let interval10 x = false</code></pre>\n\n<p><strong>Question 2.</strong> In the following declarations, replace the boolean\nexpression with its value (<code>true</code> or <code>false</code>)</p>\n<pre class='ocaml'><code class='ocaml'>let value1 = true &amp;&amp; false\n\nlet value2 = true || false\n\nlet value3 = not (true || true) &amp;&amp; true</code></pre>\n\n<p><strong>Question 3.</strong> In the following declarations, replace the expression on the\nright-hand side with a simpler equivalent expression.</p>\n<pre class='ocaml'><code class='ocaml'>let simplify1 x y = (x || y) || x\n\nlet simplify2 x y = (x &gt; 5 &amp;&amp; x &gt;= 7)\n\nlet simplify3 x y z = x = y &amp;&amp; y = z &amp;&amp; x = z\n\nlet simplify4 x y = x &gt; 7 || (x &lt;= 7 &amp;&amp; y &gt; 2)\n\nlet simplify5 x = (((x = true) = false) = false) = true</code></pre>\n\n<p><strong>Question 4.</strong> A leap year is a year whose number is divisible by 4, except if it is\nalso divisible by 100... unless it is also divisible by 400. In the following declaration,\nreplace <code>false</code> with a boolean expression that evaluates to <code>true</code> only when <code>x</code> is an\ninteger corresponding to a leap year.</p>\n<pre class='ocaml'><code class='ocaml'>let leap x = false</code></pre>\n\n<p>It is worth noting that the <code>mod</code> operator calculates the remainder of the division operation.\nSpecifically, <code>x mod y</code> is equal to <code>0</code> when <code>x</code> is divisible by <code>y</code>.</p>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "b8CopxgtYLkVfPlANrj1CzwuAQ/FGVBXPVVDQkHkb25eh9E5VT80QWghq+nea3NhoC7J4iJ7fvKL22E0x/uCboF7SohtEJQF74gjod6FMPIyDc9+6KJRxTpTVgQRkA7rDNfOaYYOWrzVJ8qOTjU+ueW7u5uEXoXagQEZmN7OfTjl3ai5y5MZhR+yp/V7tM6JLAcNXodTEDM/VUUVQaC/zH4mBjREYIN4Ky7puOXeqimE00gVLm3bxqIW/EHrYsHyUDZ+UTtQzpqRcGHp6B2OjDlLpUbSb6mt1BoQ5VGR3xQZzhDcmUcOqMllYsNJNl78dJWEHKt6W3mpTRaA6sfh2LR8w0ODKWuwA+4uADy87pAaHUlVEQ1ZClMfXVBEr0rB2rxN2BMgm/du3LCtg2HJKMgFpTxpJvPsekaNHfI6ywRx391FY/mDSsylJbjZAGnv1QP+CdGyU+EdRRaYRJ178B70/eKUTp3tpDQymUd6SK+t7NoGmERRv0B2XIyW8rQljA==",
    "max-score": 19
  },
  null
]
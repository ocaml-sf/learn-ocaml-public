[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Conditional expressions",
    "stars": 2,
    "focus": [
      "Booleans",
      "conditional"
    ],
    "backward_exercises": [
      "hferee/1.3_bool"
    ]
  },
  {
    "id": "1.4_conditionals",
    "prelude": "\n",
    "template": "(* Question 1 *)\nlet phrase1 = \"Replace me\"\n\nlet phrase2 = \"Replace me\"\n\nlet phrase3 = \"Replace me\"\n\n\n(* Question 2 *)\nlet simplify1 x = \"Replace me\"\n\nlet simplify2 x y = \"Replace me\"\n\nlet edt day time = \"Replace me\"\n\n\n(* Question 3 *)\n\nlet approximately t = \"Approximately …\"\n\nlet approximately_bonus t = \"Approximately …\"\n\n",
    "descr": [
      [
        "",
        "<h2 id=\"Reminder-Conditional-expressions\">Reminder: Conditional expressions</h2>\n\n<p>If <code>c</code> is an expression of type <code>bool</code> and <code>e1</code> and <code>e2</code> are expressions of the\nsame type, then <code>if c then e1 else e2</code> is an expression of the same type as <code>e1</code>\nand <code>e2</code>.</p>\n<p><strong>Question 1.</strong></p>\n<p>For each of the following expressions, give its value, or <code>Error</code> if it doesn&#39;t\nmake sense.</p>\n<pre class='ocaml'><code class='ocaml'>let phrase1 = if false then 3 else 4\n\nlet phrase2 = if true then 5 else 6.\n\nlet phrase3 = if 3 + 4 then true else false</code></pre>\n\n<p><strong>Question 2.</strong></p>\n<p>A conditional expression allows us to construct an expression using other expressions.\nThese other expressions can themselves be constructed using a conditional expression,\nand so on (we say they are <em>nested</em>).</p>\n<p>Replace the following conditional expressions with equivalent expressions containing\nstrictly fewer <code>if</code> statements.</p>\n<pre class='ocaml'><code class='ocaml'>let simplify1 x = if x &gt; 3 then false else true\n\nlet simplify2 x y=\n    if x then\n        if y then false\n        else true\n    else\n        if y then true\n        else false\n\nlet edt day time =\n    if day = &quot;monday&quot;\n    then if 13 * 60 + 30 &lt;= time &amp;&amp; time &lt; 15 * 60 + 30 then &quot;practical&quot;\n         else &quot;Nothing interesting&quot;\n    else if day = &quot;thursday&quot;\n         then if 8 * 60 + 30 &lt;= time &amp;&amp; time &lt; 10 * 60 + 30 then &quot;lecture-tutorial&quot;\n              else &quot;Nothing interesting&quot;\n         else &quot;Nothing interesting&quot;</code></pre>\n\n<p><strong>Question 3 ($$).</strong></p>\n<p>In the following declaration, replace <code>&quot;Approximately ...&quot;</code> with an expression that approximately\nexpresses in days, hours, minutes, or seconds duration <code>t</code> expressed in seconds. For example, the\nexpression should evaluate to <code>&quot;Approximately 3 hours&quot;</code> if <code>t</code> is <code>9000</code>, or <code>&quot;Approximately 2 days&quot;</code>\nif <code>t</code> is <code>180000</code>. For negative numbers, the result is not important.</p>\n<p><em>Note</em>: You can use the <code>string_of_int</code> function to convert an integer to a string.</p>\n<pre class='ocaml'><code class='ocaml'>let approximately t = &quot;Approximately …&quot;</code></pre>\n\n<p><strong>Bonus ($$$)</strong></p>\n<p>Same question, but correctly adjust the words &quot;seconds&quot;, &quot;minutes&quot;, &quot;hours&quot;, and &quot;days&quot; according to the value.</p>\n<p><em>Note</em>: For this question, it is much more convenient to use tuples.</p>\n<pre class='ocaml'><code class='ocaml'>let approximately_bonus t = &quot;Approximately …&quot;</code></pre>"
      ]
    ],
    "prepare": "YSfk/GEJGgIoWfjx9IV7N5==",
    "test": "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",
    "solution": "LhgVKo6w4VOEvJbR9FeDnE9NCB5RSVFLKENUBoC9fKkwfAgq4lvXG72ha3TqruB/kmSJ4pY5rOim24MeezeDq6FaTpErW1BSzPQyeZ9APPJsUgV1fg92bW6VRZEPpWeNBtLIaY6PTemNNHKVTj/Iuu8Nn90PREGwaUlJoZ8LcGRJhUkrHCFvVxPsnsDUXxOuL5RNUTtZGR/wWV1VVP7onC+fQiA+Lwd3Kyvsvuqed8PEPwRw1iL6xuJPjQjaKdPiDiMCVjQQl9LEtXao6BFodysO5kaBrFGqLFVC9A44IxYQnZrb6AZVaZpjE2NPMU7aqNqBRt6NF3i/FEnUnhn52T+ZUzdJ3ClSl3rO7YkUkaRmQUZMA59ZBXQQRVo2aO8OP0xV2B5/jlNm+0jtsaqkMMQa/Gom1uevgBHZEbgrkOxXZE21N9XSRNrcPvGGKzTn1UeQAgLjU0gSG9KQCcc/6AyV8u7CC9XxzXwdlWU0BLb97MUWlV/+d3lAD2jOpvlcNdt1KlwA4lKFxs0YpBbDwndYTUhRZmMZ+RARXF+gqM5/wlEqQWuISWNxu48kqvl5/jDGN7lk/3iyIJB4c7r4f9IgA//pBIYB732waZQJ04IPTw2P64IIemgaFs6C9W4IEce+sJZPQumOKTqAWSFYbvTApQ7BWEHeeQMLcxTI7iQsypE8HCE5EtTeyxGEXvy7YUEFAlRLS6sDEBEVEPn9ziffCHsVNNsB0y7eqLjqvjWKNM1uMTr9g2hQyjeuZ1ObSzICXzIG/5KJ7yaq6ElsqCQ+lBmDzVGdPFVT/BHUItlGzhecm/IWuNB51gYBMRrrxtHKA4gEUc0sAo7JyhfKPWHLUzhL0zFW6Ob99Yk3kf1qE56MEi21X76EWENVr++22q5E0k2KdXUaP4ztaKrm1xstiTI7JvarbCC0XroboLhWN6ceY6CGCdWoKbjMTz8nI93VUrrmU0pdVR0YQs696BS0oODQXQKjpnIuplc/ALbb7IpS5QQVx0ZZTIPLy3Is1dINKlw/09qVgKSR8VeXhzNBTQ/2S/pZIFYRQRCyc15xuFEsVTSTG8khw47ccOMml7SE1jNnfOurCxtTvpGXq9IjA/F7EMNHjuFawMIAMPJqUgVZl0MFcH90FsAW9SjEVxqWa2ICXaKFYHeRR6sIbqCI6E+BCkD/cp6M5ZbCcDdp89J9BzUsGais8wGNFgyIYlFNTF64GV2wDBEFEOj58XWfQkMQJgxLO7exuPOruzKBZwZaJ8fgghs4jRG7ZcLvQzZOBDBZpl3JfXb9p5AvdzkQ/VeBgoyg1/UU7lCRZd5Tisual9c4dqxlOcNPMnzvxNuLHt6GVPi6ARWJnYfKPTC4UjIGZ/B29ZLHic/3z3I2QUcMEo/yGTxQ0oVAc0j+1qdNFp==",
    "max-score": 66
  },
  null
]
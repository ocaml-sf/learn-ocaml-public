[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Applications of the fold_right function",
    "stars": 2,
    "focus": [
      "list manipulation"
    ],
    "backward_exercises": [
      "hferee/7_lists_binary_encoding"
    ]
  },
  {
    "id": "8_fold",
    "prelude": "type liste = Nothing | OneMore of int * liste\n\nlet rec fold_right f xs acc = match xs with\n  | Nothing -> acc\n  | OneMore (x, xs) -> f x (fold_right f xs acc)\n",
    "template": "",
    "descr": [
      [
        "",
        "<p>Throughout this exercise, we will consider a type <code>liste</code> for a list of integers and <code>fold_right: (int -&gt; &#39;a -&gt; &#39;a) -&gt; liste -&gt; &#39;a -&gt; &#39;a</code> as its right folding function.</p>\n<p><strong>Note</strong>: In the following exercise, you won&#39;t need to know the precise implementation of lists. You should use the <code>fold_right</code> function with the appropriate arguments.</p>\n<p><hr/><strong>Question 1</strong>:</p>\n<p>Using the <code>min</code> and <code>max</code> functions for integers, define the functions <code>list_min</code> and <code>list_max</code> that respectively calculate the minimum and maximum of a list. In the case of an empty list, you should return <code>min_int</code> or <code>max_int</code>.</p>\n<p><hr/><strong>Question 2</strong>:</p>\n<p>Define the functions <code>count_if</code>, <code>forall</code>, and <code>exists</code> such that if <code>p</code> is of type <code>int -&gt; bool</code> and <code>l</code> is a list, then:</p>\n<ul><li><code>count_if p l</code> returns the number of elements in <code>l</code> for which <code>p</code> is <code>true</code>.</li><li><code>forall p l</code> returns <code>true</code> if and only if <code>p</code> is true for all elements of <code>l</code>.</li><li><code>exists p l</code> is true if <code>p</code> is true for at least one element of <code>l</code>.</li></ul>\n\n<p><hr/><strong>Question 3</strong>:</p>\n<p>Using <code>exists</code>, define the function <code>mem: int -&gt; liste -&gt; bool</code> (for <em>member</em>) that determines whether an element is contained in a list.</p>\n<p><hr/><strong>Bonus</strong>:</p>\n<p>Define the functions <code>find_first</code> and <code>find_last</code> that return the first and last occurrences, respectively, satisfying a test <code>p</code>.</p>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "eZ+5Q2lMaCkD6RGu1aUrIGMHA5BVZ9sQL/6FFVipwt6ir5odDRbSES2S6bDhubNt8W4AAChmtvLsXdQRgGT0b8k9SoYvRIZGnKoaxYRNL0pOBct0fg/edH9BFwtNoGmQPcK1aYBPWumNNHj1AiUivLyPmBKBAkPdf9lU7YuNsmjtm4QAl5+q18nBHrU8rXYcNp9IA6EIGVp/QkQVALDx6Drv+o1ZJYc4NT4ae4GihiDE3JR7YmS/erU57k8/YdObSyBXHjJV69uKsia5z5Ald8RO9lyBd6LaNVV+jB0D2dFvtZ+h6EcTgJ/y0hBPYU7jdJWEAMgHU20jBAqByhed3aS2cASRBOpfPMVGgSOg+mlaHUlNU/xQGSUQVkR1fvi7E4YE+VUsy6JmIKjoq0fe+Z25oicu3rvaxV0ZS+tBqZRKPAITLVeTWIyb2t4IRTDnNp40CeekGOgqAR+IQsl7zUD2/0GUMETk/ioqll2iH0TpmYQHp95VwLwNB1aLiqRhxY3dBNcFqi/g6Ar51aBxPSICD9pMGRQZ3DxRFRCgfM5er9EcVWD0XiNhu+ncbbM5oDSU4jNnfvK6Xc9RczPSdEIeEkEyXNVO70UduxQLZONhTs/Pn0gAsRZaWwlW9WTNDsb/tZE1QunANH4TU8EOs0mMboTITFicwEUKiIWOtTi59L2ByFrqMHuIG+YprTA5YkFNGF/1Vo9xUkIVGeygnHejEy6VKZk4Ii8x6uiehnDENJRaYiLvxvF4jRG7Kg3bQ8YCUWIQ65rJcHaslE56qHF3/QvNhBSdMUQ4jAfRKx/R9qDXb5==",
    "max-score": 15
  },
  null
]
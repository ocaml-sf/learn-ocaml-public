[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Searching for Strings in Arrays",
    "stars": 2,
    "focus": [
      "Array manipulation",
      "recursive functions"
    ],
    "backward_exercises": [
      "smelodesousa/F3/3-dichotomy"
    ]
  },
  {
    "id": "ex1",
    "prelude": "",
    "template": "let is_sorted a =\n  \"Replace this string with your implementation.\" ;;\n\nlet find dict word =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<ol>\n  <li>\n   Write a function <code>is_sorted : string array -> bool</code> which\n   checks if the values of the input array are sorted in\n   strictly increasing order, implying that its elements are unique\n   (use <code>String.compare</code>).\n  </li>\n  <li>\n    Using the\n    <a href=\"https://en.wikipedia.org/wiki/Binary_search_algorithm\">\n      binary search algorithm</a>, an element can be found very\n    quickly in a sorted array.\n    \n    <br/>\n\n    Write a function <code>find : string array -> string -> int</code> such that\n   <code>find arr word</code> is the index of the <code>word</code> in\n   the sorted array <code>arr</code> if it occurs in <code>arr</code>\n   or -1 if <code>word</code> does not occur in <code>arr</code>.\n\n   <br/>\n\n   The number or array accesses will be counted, to check that you\n   obtain the expected algorithmic complexity. Beware that you really\n   perform the minimal number of accesses. For instance, if your\n   function has to test the contents of a cell twice, be sure to put\n   the result of the access in a variable, and then perform the tests\n   on that variable.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "dWu6YLtkKLSvRc4fKrokpD1TGAcFMo9ZIFgSWUXcu16+fBNdDEu0Xmdcb+mbsLZr9HHG4ignrO4yXd9ex7q0boYjRRQjEM1LpPR7ohQAZPIhANY2p4A3fXIBUhwC757EQJq+yII2VbX31ifHTiBItcuNn5Ku",
    "test": "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",
    "solution": "qnLkunjKS3dWkCW3STnA4HguTUo2XElZOkVSFVHttM6pr/pXVWD0Xmxbu33cdOMooC7UH8E5varqEgo4gXa4q5MjV69yXvpL74RaeYRJIqICGt1G8aR4aiMYRw9QkCLFTwORcNAOGLS0NDDTX86IgqCY6BLJT/rD8QpZl1rGwj7pJKH904MjqFzG12sI1JIgSW5LDVkKXDNwEBEVV4We8RGfQTkVYNtLISix6uievzerNJQbN7uvtxsk/VTjKcHiDHICFSsTl5q3rnjw6BkOdyEClBqBhRTaPBRD5ELC2tUSmcvr6ABGqMl3OcNPMQGddNqQC2ELC+yiGQi0yhf520Yw7fc9jT+dWYs5dQldpXpzDRhJOo9ZGW9QEV/Ve37F1qhF1RB5o/ceKaysefa8KdRypDAm3bvsxUiZWOpB/egCN5JRL/XSCdvgLbjZAB3zIp40CMapHqFtFES2QsVuooSVluCZCkLp/Tle6AB8DPvgovgG5QtVv+QECxzIpfQcez3oumCR1aJmumnSSX7NOU/BTUpRGR/1JUNUFVyafIsjf9E6VXD0Cmtchh+UruZhoDmZN71jwr36VN9AvnqEf5kzKFF7EIYL70EmqtEvT0M9FwU1/4IDfDo2WgEGkWeBQJ0+eN//FunZ36HTTiA2xqCY6Ee5WU4xaUMAmIXJxHXmIb8tMN9eqE7PWp==",
    "max-score": 30
  },
  null
]
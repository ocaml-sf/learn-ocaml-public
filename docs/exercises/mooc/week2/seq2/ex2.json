[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Points and vectors",
    "stars": 1.5,
    "focus": [
      "Arithmetic operations",
      "Record manipulation"
    ],
    "backward_exercises": [
      "hferee/5.2_sierpinski_vg"
    ]
  },
  {
    "id": "ex2",
    "prelude": "type point  = { x : float; y : float; z : float }\ntype dpoint = { dx : float; dy : float; dz : float }\ntype physical_object = { position : point; velocity : dpoint }\n",
    "template": "let move p dp =\n  \"Replace this string with your implementation.\" ;;\n\nlet next obj =\n  \"Replace this string with your implementation.\" ;;\n\nlet will_collide_soon p1 p2 =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  The given prelude defines three types, one for three dimensional\n   points, another for velocity vectors in three dimensions, and\n   another one representing moving objects in space.\n</p>\n\n<ol>\n  <li>\n    Write a function <code>move : point -> dpoint -> point</code> such\n    that <code>move p dp</code> is the point <code>p</code> whose\n    coordinates have been updated according to <code>dp</code>.\n    <br/>\n    (<code>x</code> is now <code>x +. dx</code>, <code>y</code> is now\n    <code>y +. dy</code>, <code>z</code> is now <code>z +. dz</code>.\n  </li>\n  <li>\n    Write a function <code>next : physical_object ->\n    physical_object</code> such that <code>next o</code> is the\n    physical object <code>o</code> at time <code>t + dt</code>.\n    <br/>\n    The position of <code>next o</code> is the position\n    of <code>o</code> moved according to its velocity vector.\n  </li>\n  <li>\n    Suppose that these objects are spheres whose radius\n    is <code>1.0</code>.\n    <br/>\n    Write a function <code>will_collide_soon : physical_object ->\n    physical_object -> bool</code> that tells if at the next instant,\n    the two spheres will intersect.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "jJC8ekwyPpJwELQjMrjyNWM0TRERQ6/2MQtRUUz7fIo6r6pcSEu0Xn6hc+n5bet5mmvUOmswfqr6Qs/Ix7CZq5ZqGVEhEJtLlaRlhhREPqItZLdD6O2Rdy9NQs5Z9XLLEcKOsJdBD0nG1X31DH51xaDV6FruCoXnwBlDjxL+qXL+k3uqWz1aAz90bmk5r026LUE0CVkWW/AcSQxVRqn96i8mFWRVP4FkPmiguOvnujne2ctmLmrrgchM//etKd3qQzYQUXdf65qFtSqskBF9eiEAlB3VtpGsPBoYd9KR0tEUzhuqlFIWdwVt0cM4Il7mqvKERx9DR07vHQP+5svc1su0ubd+Jz9X3lX9IXv9vz1tDlMUGB9TEj9CHoU0sdLIOewJ0URr7oA5M4y/duXs31QgzydmYOTne5nQR3s9j0A0PpJ0+BCUBYya113EAGTfIVb0Hhe5GO6kG/8WGJEq79DLnPOAAEXk6HklyUFuQ4uf5xRU8pIVc0wNHc7ZjqQ6/M4goQ==",
    "max-score": 30
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "A Small Typed Database",
    "stars": 3
  },
  {
    "id": "ex1",
    "prelude": "(* A phone number is a sequence of four integers. *)\ntype phone_number = int * int * int * int;;\n\n(* A contact has a name and a phone number. *)\ntype contact = {\n  name         : string;\n  phone_number : phone_number\n};;\n\n(* Here is a dumb contact. *)\nlet nobody = { name = \"\"; phone_number = (0, 0, 0, 0) };;\n\n(* A database is a collection of contacts. *)\ntype database = {\n  number_of_contacts : int;\n  contacts : contact array;\n};;\n\n(* [make n] is the database with no contact and at most [n] contacts\n    stored inside. *)\nlet make max_number_of_contacts =\n  {\n    number_of_contacts = 0;\n    contacts = Array.make max_number_of_contacts nobody\n  };;\n\n(* Queries are represented by a code and a contact.\n   - If the code is 0 then the contact must be inserted.\n   - If the code is 1 then the contact must be deleted.\n   - If the code is 2 then we are looking for a contact\n     with the same name in the database. *)\ntype query = {\n  code    : int;\n  contact : contact;\n}\n\nlet search db contact =\n  let rec aux idx =\n    if idx >= db.number_of_contacts then\n      (false, db, nobody)\n    else if db.contacts.(idx).name = contact.name then\n      (true, db, db.contacts.(idx))\n    else\n      aux (idx + 1)\n  in\n  aux 0;;\n\nlet insert db contact =\n  if db.number_of_contacts >= Array.length db.contacts then\n    (false, db, nobody)\n  else\n    let (status, db, _) = search db contact in\n    if status then (false, db, contact) else\n      let cells i =\n\u0009if i = db.number_of_contacts then contact else db.contacts.(i)\n      in\n      let db' = {\n          number_of_contacts = db.number_of_contacts + 1;\n          contacts = Array.init (Array.length db.contacts) cells\n        }\n      in\n      (true, db', contact);;\n\nlet delete db contact =\n  let (status, db, contact) = search db contact in\n  if not status then (false, db, contact)\n  else\n    let cells i =\n      if db.contacts.(i).name = contact.name then\n        nobody\n      else\n        db.contacts.(i) in\n    let db' = {\n        number_of_contacts = db.number_of_contacts - 1;\n        contacts = Array.init (Array.length db.contacts) cells\n      }\n    in\n    (true, db', contact);;\n\n(* Engine parses and interprets the query. *)\nlet engine db { code ; contact } =\n  if code = 0 then insert db contact\n  else if code = 1 then delete db contact\n  else if code = 2 then search db contact\n  else (false, db, nobody);;\n",
    "template": "let proof_of_bug =\n  [| \"Replace this string with your queries.\" |] ;;\n\nlet delete db contact =\n  \"Replace this string with your implementation.\" ;;\n\nlet update db contact =\n  \"Replace this string with your implementation.\" ;;\n\nlet engine db { code ; contact } =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  The code of the mini-database example is given in the prelude.\n</p>\n\n<ol>\n  <li>\n    You may have noticed that there is an error in the implementation\n    of our database. This error leads to not finding users that should\n    be in the database (because they have been added at some point,\n    and not deleted since) after certain sequences of queries.\n\n    <br/>\n\n    Find the bug and give a sequence of\n    operations <code>proof_of_bug</code> of type <code>query\n    array</code> that exhibits it when executed one after the other on\n    an initially empty database.\n\n    <br/>\n\n    The failure must be triggered by the last query.\n  </li>\n  <li>\n    To fix this bug, write a new version of <code>delete</code> that\n    enforces the following invariant on the database, which is\n    expected by the other functions.\n\n    <br/>\n\n    All the contacts of a database <code>db</code> (and no others)\n    should be stored in the array <code>db.contacts</code> between\n    indexes <code>0</code> and <code>db.number_of_contacts - 1</code>\n    (inclusive).\n  </li>\n  <li>\n    Write a new function <code>update : database -> contact -> (bool *\n    database * contact)</code> that either changes the number of an\n    existing person or inserts a new contact. It should\n    return <code>true</code> and the updated database if any of these\n    two options succeeded, or <code>false</code> with the untouched\n    database. The returned <code>contact</code> is not important, it\n    is here just so the function has the same signature as the others.\n  </li>\n  <li>\n    Write an updated <code>engine</code> function that does an update\n    when given a query with code 3, and uses your\n    updated <code>delete</code> function.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "dGDoN057YZKoWc4qV0UpinYVCEpMGVk1JVVFUDukuZpecRNlE7zVH8dHfOLftvk/oCzUO7lkxbm92Q==",
    "test": "",
    "solution": "qnLkumSL34M4bTf21yfUOjN1ZlpRY9UZM6BSW/TdfNUev9EzVSOUES1geq7cgrNeoHuVM7ZncfK8Eho+gnzMq6JbTRdy0d63oLYfqhQ2ZPw5QwV2m0NCtDoBHc549XbEWeH+a2BPFr4Q2iSXC8FVbrCIyl0CRFqcgQhY72+OumjcJrmvZMQjq6iHIhcFPswdMp9CA/RzVlp9U/RHEKTxpCbjQSgZYM/T1jz9uODeq7D4HwRaYiLvb+E1//XyKhvbUDYZUSF4nFaIsnqszQAad8dPjAuBu/Gb1AB2yUCKIsQIkJShupFDdZJo+2NSMUDuaI7WSxEYG+zpREmUncPlJs/yx+c9jWjdGt9ky5l6pWk8W9lPX/2NWCwEEQ5Qhr7G3q1EPU65jRMzMb7rwqrm+IsflQAsJf45gAiZDKI85eJCJQgR1BnGGxDlIriZAHaY1UfVTdHxU4cmEVPYXgEp6Fr0z0K3Gk4a6DQzloQoBurcmYR05Q/ZaOdITwLLiuonqSL3hTGU2P9L6zm0BSiN4HFNTVd2GQlQ+UlRSBC7pt5er9EcDzCYED1cu0Gcf3MeoH40MT1mv4+6Qs/KxzXWdp1jHkF5VM2Zi0occxRQLLlaCbxB/PhTbWgVCc6K5CfEUw4+esoPAuXQ+TrOTjlklNuEpRKBTkD/hR9J7YaMcHfdK4XrJhljxXOG1Z2I+MEqKp5LGGgVXFdcEF6RSLykh8rfQTlZJYc4MDi6hOeev7DZHwRaYiLvxr5ZjV77Ng4iBzhCBSwVnAqNsyGrnlhptmI+o9HJb/7WPFUWjEKRZd5Tisvl/9c4qNtlKsNTMSzxxty2SMkOWbepBUmN7YCi1ulmhOpp780xE1Majl/bmmdtDo9NU9kKFjFZERhQvOH7OewBPVV5y6M5P+i7duztZJl3/Hc81vPt7kaZE+JylrwC19BWY5jGUKPl4bjEAGSdJAPXCwPMHqwDF/zWFsB6lBO0oajUDR8n6X/g/6kOBenPndtIkUwWa42NQYy+/2hcdj36ujS+34INomKPX8m14AITHpkIFkBXIEQRHXHurx/7sAkhGn3PFiMdefLbsKkl6X4ALGwnv34sEhxex7rXq6d1A/F7EMcFxaRaeYQIMKA9Cg/P64FWtDpWWZYWlGHQS0H+aZ9BPLmQ3HfHTjMNr4DJlRfBQ/HowFBz71rOcHSkZb8uPN9xxVyCMcVD+YpbJ6MnAk2zW/YyRFBWROuxyHPaDo2VYNs41i7/fqnitGXINNAc0iKwe3dLzFLjIujbQ8YCFCgDppqAtybwo5hyqTd+kAnVhFbl2RFOlUm4Yd9Fzd4c9pBYfJFi0clB1AWadNmMAdd6F+z9TUnJzM+c3f1Ye3x78T0kH2g0jpldpT9qE56zER9ZGW9QUEBIr3CB4bJBN/VolyVm3OT7/aq8YZFt/GcJWK0ycVbMQ3ZvpasC19BRIVaIXd7iKbjZKzTnPQqBTdy5B4kxAEXUQsV57ED9laiNTlXg9WZhzlckCqvmodxSpE6Bv3lDZxyLoeIcxDP5bmGKNr5RpmaoDTmB4CdEGUoSXFVVO6BYFQjTfM5er9EcHC00GmFjerPmufJ89G3+2nwegOm5EwpRqnqUdQo7QoIjHt6KoLFar1oFKqInA2t05PAFqH9ZRZkCkWCKAcSUvZEMQra3PHL+ZTFIbqDBnznBCoWwfA5Y7YaMdmirZavFZN9jqFzGPhgA4xQrHAhLMkJWVllxUlVGEKTx8HzlDj5YIwhNDD4ulafluXSF2dAt3F8vxvF4jRH6ZNyvAiVWAzIN6zu0w8fl799vrnVOySfThRD/M6/T/5XF+xQEj2SbypFCaZN5+NwP15jjqNrrRxELF4SOTUnJnd3fFaNyx+ct8WTwHIwoyldemXp5D5MYUFwNEEMQEVB1fviI1qQS3A1ljoto3Oe8dfb7YgA3q8MzJruyeo7QXb1ulaoC0QISLVTDCgLlPKLKVCWoJUeITcnZU0okEo+0D2Vy6Fj0nqjEBkPnlHkk5Aw8HPvlnxQFm9VBfO1ZZxyLne6rsz4xfWS+34516zm0HDnVNCYPTQ6UVVoNLBBVVoDfwhZqbpJw4jD0G8dufKmlq3N87iDR4ignbKLkFgo4xy8SaoBkS/EzUxZIouxuuM2UTqJoCc916LMYb8pWWZpH9TbEUgrOsZUBFrzA1HvHC8EMrPDLnp8VS/0c89kMmI42tTieI3D8NgpfqBiE42sD1hMmJo6EVpxm",
    "max-score": 35
  },
  null
]
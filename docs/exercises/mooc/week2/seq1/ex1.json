[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Tetragon",
    "stars": 2.5,
    "focus": [
      "Logical operations",
      "tuple manipulations"
    ],
    "backward_exercises": [
      "smelodesousa/F4/4-type-4"
    ]
  },
  {
    "id": "ex1",
    "prelude": "type point2d = int * int\ntype tetragon = point2d * point2d * point2d * point2d\n\n",
    "template": "let pairwise_distinct (lup, rup, llp, rlp) =\n  \"Replace this string with your implementation.\" ;;\n\nlet wellformed (lup, rup, llp, rlp) =\n  \"Replace this string with your implementation.\" ;;\n\nlet rotate_point (x, y) =\n  \"Replace this string with your implementation.\" ;;\n\nlet reorder (p1, p2, p3, p4) =\n  \"Replace this string with your implementation.\" ;;\n\nlet rotate_tetragon (lup, rup, llp, rlp) =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  In this exercise, we will do some basic two-dimensional geometry.\n</p>\n\n<p>\n  We represent a point in two dimensions using a pair, as defined by\n  type <code>point2d</code> in the given prelude. The first component\n  is abscissa (x) and the second component is the ordinate (y).\n  Abscissas grow from left to right and ordinates grow from bottom to\n  top as illustrated by the following schema:\n</p>\n\n<pre>\n                          ^ (y)\n                          |\n                          |\n                          |\n                          |\n   -------------------- (0,0) --------------------> (x)\n                          |\n                          |\n                          |\n                          |\n</pre>\n\n<p>\n  A tetragon is a polygon with four sides. We represent such an object\n  using a 4-uple of points, as defined by type <code>tetragon</code>\n  in the given prelude. that appear in the following order: the left\n  upper point (lup), the right upper point (rup), the left lower point\n  (llp) and the right lower point (rlp).\n</p>\n\n<ol>\n  <li>\n   Write a function <code>pairwise_distinct</code> of\n   type <code>tetragon -> bool</code> that checks that the points of\n   an input tetragon are pairwise distinct. In the sequel, we assume\n   that all the points are pairwise distinct.\n  </li>\n  <li>\n   A tetragon is well-formed if the following properties are verified:\n   <ol>\n     <li>\n       The left upper and the left lower points have the lowest abscissa.\n     </li>\n     <li>\n       Between the two leftmost points, the left upper point has the\n       greatest ordinate.\n     </li>\n     <li>\n       Between the two rightmost points, the right upper point has the\n       greatest ordinate.\n     </li>\n   </ol>\n   Write a function <code>wellformed</code> of type <code>tetragon ->\n   bool</code> that returns true if and only if the input tetragon is\n   well formed.\n  </li>\n  <li>\n   A simple way to rotate a tetragon by 90 degrees clockwise with\n   respect to (0, 0) is to rotate each of its points by exchanging\n   their abscissa and ordinate and negating the resulting ordinate.\n   <br/> Write a function <code>rotate_point</code> of\n   type <code>point2d -> point2d</code> such that <code>rotate_point\n   p</code> is the point <code>p</code> rotated as explained in the\n   previous paragraph.\n  </li>\n  <li>\n    Once rotated, the points of the tetragon may not be in the right\n    order: lup may be now llp, rup may be now llp, etc.  <br/> Write a\n    function <code>reorder</code> of type <code>point2d * point2d *\n    point2d * point2d -> tetragon</code> that takes 4 pairwise\n    distinct points (not necessarily the output of the previous\n    function but any 4 points) and returns a wellformed tetragon.\n  </li>\n  <li>\n   Write a function <code>rotate_tetragon</code> that takes a\n   well-formed tetragon and returns a well-formed rotated tetragon.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "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",
    "max-score": 51
  },
  null
]
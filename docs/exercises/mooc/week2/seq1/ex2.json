[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Enigma",
    "stars": 2.5
  },
  {
    "id": "ex2",
    "prelude": "",
    "template": "let exchange k =\n  \"Replace this string with your implementation.\" ;;\n\nlet is_valid_answer (grand_father_age, grand_son_age) =\n  \"Replace this string with your implementation.\" ;;\n\nlet find answer =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  Let us solve the following puzzle:\n  <br/>\n  <quote>\n    If you multiply my grand-son age by four, you know how old I\n    am. Now, if you exchange the two digits of our ages then you have\n    to multiply by three my age to get the age of my grand-son!\n  </quote>\n</p>\n\n<ol>\n  <li>\n    Write a function <code>exchange</code> of type <code>int ->\n    int</code> that takes an integer <code>x</code> between 10 and 99\n    and returns an integer which is <code>x</code> whose digits have\n    been exchanged. For instance, <code>exchange 73 = 37</code>.\n  </li>\n  <li>\n    Define <code>is_valid_answer</code> of type <code>int * int ->\n    bool</code> such that <code>is_valid_answer (grand_father_age,\n    grand_son_age)</code> returns <code>true</code> if and only if\n    <code>grand_father_age</code> and <code>grand_son_age</code>\n    verify the constraints of the puzzle.\n  </li>\n  <li>\n    Write a function <code>find : (int * int) -> (int * int)</code>\n    that takes a pair <code>(max_grand_father_age,\n    min_grand_son_age)</code> and returns a\n    solution <code>(grand_father_age, grand_son_age)</code> to\n    the problem, where\n    <code>min_grand_son_age &lt;= grand_son_age &lt; grand_father_age\n    &lt;= max_grand_father_age</code> or <code>(-1, -1)</code> if\n    there was no valid answer in the given range.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "GRov6QXEba+xS3DU2CwZfGMkCBcFZ/VQKmxeWVXsfJsfcoFoEBbSES2hw+Wcgt95oE0VMS1cwfmxEYlRrmrXsUIyEysIXMN470EyvNZDL+ElMYRPiJ/RqEdQVYpLiznESOD+7ZUXQumSUWOWHXIBv0WI/VnBCRWnwChDmYfOcy5ODj3KSaHewO2zrNQe36nzYlFNTBEZGUltQlVvVrnz7jamDyMv1+Q3NDy9hrfqyHOL3MEuK8j97KF4jRG7Kg3bQ8YCUWJu5kaQeyb9n/R9ajcOiAGVm/Gb3QkV9AP4Z1FCt2uclEdWqNAlOcNPMU7B8YGr0NVSR3n9H5PFysvc166MMtsMbOvzeRqctGcQNrxzFUl4UFRJVSoqQ/w1eLnB2PRBNVo5oyVm3OHwf4r91xVflCd71q37lofXV3kzz41MY5JC3oCNCga/4fTKKzTnPQqBTh06EPJhB/zWQxp7c5HVyuK2QVan6DQm/BkpBuf5nYRL5RlFxKRGTJ808ukm4EpqplL9ab78SaXnOmkOgnlFH5N4EDMmJVVFFVX6uZwhdoJhKyL0Q//hu2ahrL2w7ivU2o6nyr4gCc9ToiPSeAFaURR7AwpL7aR9e32PIL2oTNp1qrUQdHUR+Z9MpyXBEwy+5No/FumQNDqTTmFIbqDEpRKBWVDvwBdJmYuNxDkLTGz3SaXvef6Vyqhe36nzYlFNTBEZGR9kEHoQQbvw8iffSUJZYLIRNT4ah4nqvy+BP0gaYiLvxvF4jRG7Kg3bQ8YYSjJcpk8+sT7x6A5urXkOg6vCdBTq0kVG8BGYIwg+zh7h5otWt1h3OcNPMU8fdI7ERxELF+z9TUm98sjy4BEJLdNbstu8qlblaF5kU4YjFQQCV6tZAz/mX/FVr3vmS2d/XDYUq8smHtL3qYKMV0Ylbp5N1xiNm8r9Ecdy/c1M1ElDLkHSQsbo2t3EAGTn1UfVTdGmU0pdVR0YQxth6Ci37+fRCFOdjHspilcCH0zmm21V5VsBbvkNVwPLiLFgFpcenk4me4LNGeTbOix1wzNBTUpRGUUZJENWFQv8fJwbfRUcWHe0E7Aau0+ybeF/5HXXKjM5uaHk229Rx7rXq9IjA/F7TIZpcPRndhReG4IhALcPp0NRqDoVFs6C9X0BEdb/rhUBV37Z3iWtX9hJq0HBn6XV2E0zfB5YpITAi8kWTCaLB0+bwr10sPgA4l8a3UE3AkkMTVAzX6EYDuzv6iTjPDkXKY55JTy6g4zExzfXYcEsYV8vxvF4jRG7Kg3bQ8YCKzIY9RzFcGek8QAZd7kQ/RjEcoDa+Fpdd5eU2xQFpgbq9pZFb+dyOdg/MU7Js1qQDdgFF+H4TT8M9culPmMU+w/Gabi8gp7ra8/fBfYAD59JERs4UC2UEoVss1LIOewBPVV5jkcm3Pywevb1ZwFfkntvP+T2tCCYVrN7j3lWSVE3L9XSQt+fV3jEAGTn1UfVTdGmU0oHUEKBWJFonpmO8uS4AR+om8RxyAN9HLOaoq/G5lk1gbBPZxyL8qQcV9pqnpWjqv+1GemyIyY1siNITTEYMmNVLEQRHRzgc3Ier6JhARbJG7Ash47czhMKoDTVLD1Nr3PqFxkIiW84bpFcA6IsVMNlnK1ue3R5ZLQ9AJVHnLN1x6ZVFvNCkHuBEs7TuwUpBemLNHfLCzMLtfPNbkSBEBXtaA53nxL2tUJFTFL6",
    "solution": "jJC8ekJpK5dxB4MuK+0bMl/BTQkCS/oLPRAZX6Cyc15vv9EeUjCQXjc/u0W9dq5KoDS1NGMaw3+6Tt9Yx7GXukIjCVFvWhYE73VqgKhvKL1/Tsp1qrUQdHUR+Z9MpyXBEwqSrxIOWP7q1yvHBiQ+60HPpUvBTE4xf59mjxTA7imT9PeqC5JwRjEMg7cyvYFcLAdnDVZ1GRNwBBEIEPff7XXbPytUNJM+IQ4tfa8nnSDEMwJa+m3nh393/k0yKcDtAi6GL7RRl9PMw5CtplV9bHF2/VLBc5ya2BRYyp3RZ2YBkZfC5pBYpgFm4sw/GpSawI8CDdcPF+HxC6eI61v94J8Vrf6F+S1DO5TfZnypkCg8DQ5YEUs1Wz/WWFsUr3DA4O5A1oEpz/NmPaasdebp0hxc/Dhp1vqtd571Qftu7wRCN5JRKk+GQsvLK+mISSCNMADGGIT6U4knB9G2EJFjmAXVjun3HEHg56helldoD0+8mYQPopsSbbUDCNvEpPQ872WpqVZzLR1xSbAz0KPULzNBTUpRUFdZL9JQWkTwv15ywlFoE8K+ET1uhrKcufs/76fc2jg8gvKtTsAex7rXq9IjRoloV+p7melovYQIIfApANE45LN1qCkZFwQFpjPKBM7Vtc//FumQNHf4HHR7bqCI6E+BTVmyhEkEmwyPryyE/PqqUHxxCSlYbnAwgqha+9EEA8tZGVd5X/UVGPWqzyulBWlU0NtTNCuthqzxuGeNH5==",
    "max-score": 30
  },
  null
]
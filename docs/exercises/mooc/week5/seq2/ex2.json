[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Displaying a Filesystem Hierarchy",
    "stars": 3,
    "backward_exercises": [
      "mooc/week5/seq2/ex1"
    ]
  },
  {
    "id": "ex2",
    "prelude": "type filesystem =\n  (string * node) list\nand node =\n  | File\n  | Dir of filesystem\n  | Symlink of string list\n",
    "template": "let rec print_path path =\n  \"Replace this string with your implementation.\" ;;\n\nlet rec print_file lvl name =\n  \"Replace this string with your implementation.\" ;;\n\nlet rec print_symlink lvl name path =\n  \"Replace this string with your implementation.\" ;;\n\nlet rec print_dir lvl name =\n  \"Replace this string with your implementation.\" ;;\n\nlet print_filesystem root =\n  (* This pre-completed structure is only here to help you.\n     If it confuses you, don't hesitate to change it. *)\n  let rec print_filesystem lvl items =\n    \"Replace this string with your implementation.\" in\n  print_filesystem 0 root ;;\n\nlet rec resolve sym path =\n  (* This pre-completed structure is only here to help you.\n     If it confuses you, don't hesitate to change it. *)\n  let rec resolve acc path =\n    \"Replace this string with your implementation.\"  in\n  resolve (List.tl (List.rev sym)) path ;;\n\nlet rec file_exists root path =\n  \"Replace this string with your implementation.\" ;;\n\n(* move print_filesystem here for exercise 8 *)\n",
    "descr": [
      [
        "",
        "<p>\n  In this exercise, we will pretty-print directory structures.\n</p>\n\n<p>\n  The prelude gives the types that we will use to represent directory\n  structures. A <code>node</code> in the <code>filesystem</code> is\n  either a simple <code>File</code>, a <code>Dir</code>ectory that\n  contains a nested <code>filesystem</code>, or\n  a <code>Symlink</code>.\n  <br/>\n  The latter, as on Unix systems, is a fake\n  file that redirects to another file. For this, it provides the\n  relative path to this target file. The path is the list of directory\n  to traverse to get to the target file, followed by the later. If one\n  has to go a directory up, we use the common <code>\"..\"</code>\n  directory name that represents the parent directory.\n  <br/>\n  A <code>filesystem</code> is a list of named nodes. An example\n  <code>filesystem</code> is given below, in the format that you will\n  have to produce. Don't worry, we'll break this piece by piece.\n</p>\n\n<pre>\n  /photos\n  | /march\n  | | photo_1.bmp\n  | | photo_2.bmp\n  | | photo_3.bmp\n  | | index.html\n  | /april\n  | | photo_1.bmp\n  | | photo_2.bmp\n  | | index.html\n  /videos\n  | video1.avi\n  | video2.avi\n  | video3.avi\n  | video4.avi\n  | best.avi -> video4.avi\n  | index.html\n  /indexes\n  | videos.html -> ../videos/index.html\n  | photos_march.html -> ../photos/march/index.html\n  | photos_april.html -> ../photos/april/index.html\n  | photos_may.html -> INVALID\n</pre>\n\n<p>\n  This output was generated from the following OCaml structure.\n</p>\n\n<pre>\n[ \"photos\", Dir\n    [ \"march\", Dir\n        [ \"photo_1.bmp\", File ;\n          \"photo_2.bmp\", File ;\n          \"photo_3.bmp\", File ;\n          \"index.html\", File ] ;\n      \"april\", Dir\n        [ \"photo_1.bmp\", File ;\n          \"photo_2.bmp\", File ;\n          \"index.html\", File ] ] ;\n  \"videos\", Dir\n    [ \"video1.avi\", File ;\n      \"video2.avi\", File ;\n      \"video3.avi\", File ;\n      \"video4.avi\", File ;\n      \"best.avi\", Symlink [ \"video4.avi\" ] ;\n      \"index.html\", File ] ;\n  \"indexes\", Dir\n    [ \"videos.html\",\n      Symlink [ \"..\" ; \"videos\" ; \"index.html\" ] ;\n      \"photos_march.html\",\n      Symlink [ \"..\" ; \"photos\" ; \"march\" ; \"index.html\" ] ;\n      \"photos_april.html\",\n      Symlink [ \"..\" ; \"photos\" ; \"april\" ; \"index.html\" ] ;\n      \"photos_may.html\",\n      Symlink [ \"..\" ; \"photos\" ; \"may\" ; \"index.html\" ] ] ]\n</pre>\n\n<ol>\n  <li>\n    Write a function <code>print_path: string list -> unit</code> that\n    prints a relative path (the argument of a <code>Symlink</code>)\n    and pretty prints it as shown in the example display, using\n    slashes (<code>'/'</code>) as separator.\n  </li>\n  <li>\n    As you can see in the example, the depth of a file in\n    the <code>filesystem</code> (the number of nested folders that are\n    its ancestors) is represented by a sequence of vertical lines.\n    Write a function <code>print_file: int -> string -> unit</code>\n    that prints a file name, with the given number of <code>\"| \"</code>\n    in front of it.\n  </li>\n  <li>\n    Write a similar function <code>print_symlink: int -> string ->\n    string list -> unit</code> that prints the link name, with the\n    given number of <code>\"| \"</code> in front of it, and the relative\n    path (preceded by an arrow <code>\" -> \"</code>).\n  </li>\n  <li>\n    Write a similar function <code>print_dir: int -> string ->\n    unit</code> that prints the dir name, with the given number\n    of <code>\"| \"</code> in front of it, and the\n    prepended <code>'/'</code>.\n  </li>\n  <li>\n    Write a function <code>print_filesystem: filesystem -> unit</code>\n    that traverses the filesystem, producing the same display as in\n    the example. You will probably need an auxiliary, recursive\n    function, and you will have to use the previous answers.\n  </li>\n  <li>\n    Write a function <code>resolve: string list -> string list ->\n      string list</code>. It takes as parameters:\n    <ol>\n      <li>The full path from the root to a symlink, including its\n\u0009name. In the given example, that could be for instance <code>[\n\u0009  \"indexes\" ; \"photos_april.html\" ]</code>.\n      </li>\n      <li>\n\u0009The relative path for this symlink. Here, that would\n\u0009be <code>[ \"..\" ; \"photos\" ; \"april\" ; \"index.html\" ]</code>.\n      </li>\n    </ol>\n    The function returns the full path from the root to the target of\n    the symlink. Here, we should get <code>[ \"photos\" ; \"april\" ;\n    \"index.html\" ]</code>. Note that it may not be as easy as it\n    seems, so you may think about it before plunging into the code.\n  </li>\n  <li>\n    Write a function <code>file_exists : filesystem -> string list ->\n    bool</code> that tells if a file exists in\n    the <code>filesystem</code>. The path is the full absolute path to\n    the file, and the target must be a <code>File</code>, not\n    a <code>Dir</code> or a <code>Symlink</code>.\n  </li>\n  <li>\n    Update your function <code>print_filesystem: filesystem ->\n    unit</code> so that it replaces the printed relative path\n    by <code>\"INVALID\"</code> when the symlink cannot be resolved to\n    an existing file.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "GRov6QXEba+xS3DU2CwZfGMkCBcFZ/VQKmxeQUywu16adoMcSGCICnEohbrXl+c/9DTHP7h7wr43GgBDx8+cq9J/QopnXMNlnuUtvN1AHaJmA1U0peNKqDhZWZtDiSCEWgqY9I/P1qOTYX+WAWU0bPCT6ETlWFDeclcMcOG9xGQGCSbNTPuewqx0gfwwMkL6SWtBCUUZS/59QFkQ0ab66HffXB2VYJ1+Ji8be4CuujWe2sUtJyLi7KF4jRHo+surDyNcE7NDpk7J8iaqkEEixSYK/la+tkPa1osQ9QWTIwcAzZKw9QoVbYNyO2NUMUvmsP4WF1AJF0K9Tpu161CsPkZXLd/XdbewsUbja9ZfV36JQUlAVElZS762QV/VovjQ0ew1FkV5jkd5O3Ddd0f1YhVylSo8C3v5gRC+EfIp/epSZ/ZTY5rGC2jtKbbEGjTpJ5aDT1GxU0glAVrUQJF46AyVdPiQCUPnlDpnllIqYqup7IROnElVjbUDCM+G5LkmA9pfno7juv+mUaGpOi5SwGMEARcUGRt0YBBqFUPhwZ6iamgaFDO3Xisou2Kcb3l7oEvULCIarre9IJoJc7r4sj51T6QjENVKoKQmvPsJKvZoRwoPiJ/RqEhUWJpNiCmNDta+fPw/QrWA1TrSDWIHsvX1pTyRS9H6wFBMjwa1qXMRTGOCVrKU8Ks3hPgxOkHjLpQnDVNKV/UdRFRvQP7d5DrnSDkISss4PmiguObbxCCX229qLm4verQJyFj7NujbQ8YCHCNEoUOJ68f8pEdwaD5ApUbNc54g1FVB9R0ZCIRAzcv6lFdWt1hlQNM11AWvqMieAM6HUKztREmlhYelPVYQLeQFrfCzsFuguy1aYbIvElkEGB9DAj/DUF6Ac+iIMaYE+oAtjkJm++StcLXJIMRykTImPvb7rXXmR4seluhQ1lhQN/yQTq+9PuyMAHynI6uHBxalU4BkB9Ln+NkylEDIzeCAAkPD5yFi96shHubPjMUSnQt2xKRQZxyLpuFwV6gv7AX/abriVaHb2mcKhncBUGYRGR9ZJFFFV/7gzx/ka5gpWnzVCiMlfPuhsbNi8WD1VWNnfvLcXd9RumWXoUJ/QopnXMNlmelmvIQI04IMZJVPp0MNqENVGdZx9SKEQJq+a2BHWajE2iPTPXAGquaF75aPXoWdwBxFiYO9cDkWTCaLB0+bbr1KsKIe+Bnu4UFPQ6d0Mo/wEBEVELyxnG3fP8kY4stMM8XchP7EwjzWNJoj+yLprKEMzFmnZcKbSywHBn2165+JgX0smUgOdyE2kAKRaoSdJHddd5eU2xQSiwyc9p2ZdhNoRJUG4QifqI8FB1ILCIO9TQDMyhfh3B6MMtswabinfV4otHprVKYqQQQCOo9ZVC6EU/lQk+G00eQP+Rk5/kceCrm7b0SrLxkfpHdqNfSuxQ7QR3xB/eh3N9pQLkWKCbbcMf7EDXunHQ4GGda6FOxdXV7ZDcQ7y/v0zefTR8ndlG5euEMoOfOcoMlIn5svv+/TTMvDp0srEmNw59ymqruyWq3cEXx1bzMPDAFUFR/cIEIRUlOgg2YebQ/nG8O3IDUoh3zcq0A5mHuVM7ZndL76HwwSvpGcd527A6p8WdNljeEmuNBJMu2oH1pCp4UYdH/VCaJC9WeBFJrIrJNPUajESjrBCy1BxqCV6ADURV0ceQICxdrOcDlKTHmLHfnbc0gWrPgc35+dYp1EAFQZT/EtX6FGEKTx88riXmlQIYd5InuxfqS8hn7X02/mYmS8erRWdoG7Kg47QzV0HGhQpELFtXa5z5AivmoC/QzIaoSd2RtdjEL2ZcBAnZbblBwGqJZc2gZPLE7dw10HEt6EWhO9TUnJ/hfPQFZBM1sEg3i8sUblrHxjTbNJQUkMEUUZYz/qEW5QsP0I44MN3Hc5jkcmJKiaq3HgIJ2sjXcr0Ov5ukH0E05o/btSN9QYL/WGWNCg4fTKKzTnPQqBTgLvHLAdEkbUBgEa6AX+8xKAHVPfzWpejooxB40pmtlKoAIVhOwyTIz3iqReHpBvnk0qdhmNVaGvOn/2fmMNCDNXUFV1O9/CQVXlfMAnr/pXVWCXG72habPnubMce8SU4jMbua+6ChgYgya4q/djF/EuXvpL74Rax1FUZKYgCcpI732RxToBFwEMrnKEQJrWrIRPQaKZZTqOTklBv+SGkpyTXjudf5Q271PIxXNWRH4HB1ziwrcCrPgE1onu4UEOAkoJWEttEE9VS0Dx5XWQQTkVYJ1+Ji8af4eetGGJZN5fYmvqfbYX8RHkYsPvC8Y43jIQ65rJcDOxlAAitmp3jQvbb5Xg1VU3lUKMCIRAzcuclEdWdZF53JsPQpzlsM4JSM6FQ+ytCAXO5cul+6dYZbEFsufzgorlaz2fDKZrXlliEUwYVD/1VGwWdKSNOeJIMVUG96Mj3NCGq4q8IMQl/Hda1qr7uEHZ+vJhkqMS391rJFyKTxyd2rGEZ7jbNEfOTgLnHOopEGz3Ccky6E7Skqj8F/qpzXwpll27C035oMEgllgZfPAEGtnliuVwH9pyp5njphmyGeTbOix1w8cBM9p1Bo/7+UNQWEDku02adoMcXWyXXo1oafnkvKJs/H8R4jtfubqzFhlRunrGslJ7VR5zRMhLk3warMwJN4soMgUG8g/RqDoVFs5PlH0HCJrxqJhLW4H34XWHTjYBqvTA6BHIXkjDwEkM71rOvDkGTCLVB3Xafe2XdYFnL/yuYl/EZ6EZGR/wEElV0ey/k8qwAHAFLJh5O7mxh0imf7C9NM1bL7KzgfEXyF8/YdObSzFLFTZY65+JgX0smUgOdyFO/RnAa5Hp3VVC9A4YZ1pUzhfvzQsCcNBxJ2M+4pGudMHK0IELW3mpTReM7Ifn2AhmYhJLa3jzw/8ia7ZfWqMsA69FX/1mGW9QEU9QpwXINvRBR76Kjkcm3PGts0W70YEh/B9vPvbuxUXDE4BroOwCOooeY6CGChyl4bjMT7WaNEKVKY8aFLUdTpmYBN6fbpmS/L+DTk4a9mRw/6o/Yqup7IQ+5QN0fO9IQIzqofYcEBdznobtqqS7SODbNzQjwzNBTUpRGR9RJkF1UBng8IFwr9/eHD79Emxjgqbcdfk67XGUZX/nvbH7Vs/XdSK3q/5tA61uSP/HpLxlqxRBJeFoHNA1/Z/RqDoVSs6KijPJBZ4+8x9CWqW34mrtR8FShPD+pRXVCo7i89kM71rOcDkWAGv4B30advd0v4gjOk48HBMIAFBNUEdtEB/gW3vdozyaFmk2LwxSNy7isujfxGPNPZRiIDv/e4I+w/4uZcKbEH/NBWJubpKJqTHH6AB9dyFO/UaJaRDo3V9Wvoq10tlOlNvs9Rs3s2ArI2MJ3BCFqMHKD2ILVOuyTReMzNul2B6zLdsDab0ZvkLfsW6fZcs8EpIDRTMmVSoEEUFVfuni2aMP3FVcjoYdBaywevb1ZZV6kTMp1uTzdoCJCfJQ/e/CMQItSFmDXhz5OueQ4m3zNQHAGdGrU4VmK9K2E1V2nAyVyfeQEULrzX96lmQoTaui7P/Gik63hPQnC1S0jvlyV66cy9CjhPK7SOCB2mNShl9NCB5RTVoKPRAMFUTdrgoEdpZmG8K32V9lfP7cqus//y42LCYNbfKd229RdWeDpRJ9TRYpV2VY74YYqdVEL0pjTsAX6OEScWdQFt/M9nK4+wq+8wUMQqW438q0NDEdqf816ET9UkDegpQ4mMr4e8kUTDTLZqyfhb1ZgKonNE8ZMpAZBBMZZBVDEBEVELyxnDrfQTlBJY5LDDehhqfqvzbKShUAI8WufbdM8WeoZNquFycNHl5Q65rJcHas6AB9dyFOnorEhAXD0pFS/o4FIsxUixzwb9dWqNAlOcNPMU8fdI8aQcVSDfyjCADIyd373C910wcNsuOhglefsjdHHKQmEpQCRWZJWDkYEmdQr38IOewBPVV5jkcmAcC//cGqZZAllS1zIKyud6vzAfIjq0gCZU1FHUDURMfzOueXAG+VIpaRBxalU4/9EES0CdJy6FKVjPiLZR+dxiFh6pZbBquhdhQnoFNBv+YxFMnZm0krElpclQWlquiy3Prf4yx3c8EIAo6rXkBVLBIR+BnTfM5er9EcVWD0XiMtfPaw6KVk7y4AN7pd/0D3HwgQfjXEf8k/TRliRMcEocgaeYQAZPJoTwVPp0NRhz5QRYpcpy0ADdfOaYh0UbbEH8qTTmFIbqCI6E+BCoXSxR9V9dqHrz/WQTHLQaanhb1WvqgrNFXnH9FPHENQVllWV/6ZV0qCnDrfQTkVYNs41i7suM+Gf5ur3NEuYm3ngaM19ELyVISbXopCUTFVlyTZw8Cvk9UixXFMd6jAco8n3kVT5A4DY1lTisuri9lWwaxlOfAK16nmqd+ETqxLY3mdGUnLus+o0oUF4IhFw+SzgRrqa/5kWON8Qol3WF2NZ8wJXF/ZcfPKOd2NFkV5jkcm3Kjtq4q82IFypAA/JfT6cR+WXclhfPdF2lt4MUTgWM+hKuyNTnuY1UfVTdGmU0pdVR0YQtcjpRPPw+fECkyw6DR/6pw7HNDp7IRG5QtVv+RNTIyLc4FwDkYq59q7qvqgGaKi2md1vikBHp/2WEkQPkVrRVHsxM5jwEFxGnzPIyNfa4els024/jiZMnxdx+CLXc9Rx7rXq9IjA/F7EPkj5NgVx1FUZL1wCd1M7OAUpn6VCaJC9XHBFOSKugdIRPzDZmqRKGMJquyGpl0EUkDegpQ4mMr+b8cWVpXLB1Xeg0NSbeAe1z3zFpQVGBE04EEtQ/J1QamxiCGfQmkOYL5QNmjsurjwvzfQScAjMXDvifkkjRG7Kg3bQ8YCUWJEpk827mzhn9MprmhAf/jbd60c2RsF8DiC015VmgOnyzUWqNAlOcNPMU8fdI7EGNVORqi0H68N6Nr5PQ5Y+w6RyLfzgorla8sfHKZ8QUliFEkAAj/ZXlEQsP0I4aMTPV6bjpxcM4yRq4zm1xkfpAAyOe757kaZE+Iu/egCN5JRY6Dc2xD3V+HBVGSiKQqHDI85FMMwVQqnQwFopRT97vb4CETg5j1elS68C0fgotNGoFNQbb1EHdmLzaxaV/1FnpXFbbWmUqrpOiJyw61EFR5RGioBLEJSXEPdfNl6r9McTzChED1cu+esv+wr9EqSN7dir4qnCgo1xCqvtz5jA/F7EIYL74Rae2BFNfYOCMAB5r1YdiIvBf1DkzPNDt7O5xMAWrzE4XS2ZTFIbqCI6E+BCoWwwElSiYe2xEIFGGrEUOKbbLN3gfxR36nzYlFNTBEZGR/wEGxQRODnnHimDX5GOY5LN8Wsx+PeszfNYO/aYSKhfbdLw/4uZcLsGjVWFCdSuArJcHas6AB9dyFO/Ubfm/7WF6/T8ELU3tESjJOr/TAAqMl3OcM12BnFxNuLA2NORqv9Tnq07tvc1oFM+wNAgPiqsFflfDVhHLkJQUlaVFwNUCZ3ERkurZnNYbgBPmAhy5lpM4ewq3igIMYl8idAP+eyxVjLVPF9jb5HNAIt08vGChyl4bjEAGTn1RuQHJXMFb/nF9KRD2c2/8a+y0nZAUXxuj2lyow/A0WbxxRG5QtVv+RNTIyL8qRGUo6jlQXiaPWxVbGv45VMgm1JTUEPGUs1JVFFXE0d/g6fe59cWHe0H8EuhrDxufZ4/HXANognfPD9DJZ2cGfV/EIjA/F7EIYL74RaeYReG4s0ZN9K/0MUgH9HVZERkFjTQI0pa2A1Ub7qZGz1CGMNv+OI67HTS/H5f5wMmJPLwyh4HjuLEu7dwqposPgIPkanK5hDTB/7GWltSEUVEsnp8WygCGhQYMoF1ivssejYuGSBNJYgK8fqi3QH9ELj3JWbPmxxUWIQ65rJcHas6AApsnI+f5zUaRLx2RwYwkDrYdMBlwSr6DBFdgo60gxA4jLfdI7ERxELF+z9TUnJ/2jk1AYA+w94qq8mvRrdcmsiAxo8QUkMER9ZGW9QERUQr38IOaYE+VUz7Fcr3PesdKrqZ0sniTMzI0PocRvUE+x7/a1MHAJRY6CGChyl4bjEAGTn1UfVBx3mIaknEVzVTNNsnpn0lqTQGkegy6helldoSPup7IRG5QtVv+RNTIyLnK1oV5cy6Eu/bcz6Uq7eOmoPw65dZlpRGR9Z+RARFRCgfM5er9EcECnIG//hu+ncbbM5oDSU4jNnfvK6Xc9RgH70q6FiTpErV4/Knf1px2FUIYl6DdEHp0sYsRZVFs6C9SKEQJq+a2BP00zE0SHTCX5EqfPRkoLER6W9r9lNng8BrG5CCVC0ROLjwrxFsLolNVD0YlMLBVk1Z/poWUJBQeqCnDrfQTkVYNs41i7suM+Gf5ur3NEuYnGueaETyGe9YsqeEWcRBS2265OAcGLH6AAxsnVOopvCto4wZ5dW75i32xR2t2uclEcfcYN5NZhOYU8nssiKB2VCWr3OTUnJnhelPVYQLhUJstiav/4ctHBfTKYlCQ5CEWsYVnk4XBsScv3EOeJIPV6bdVcm3Kjtq4q8IMQl/DFq1wyeeBOQXb9uyblD3kI2JjaUTtWkKfTSRRr7MBu2TdzfWJYdVR0YQwE76Bn0/PHQKkarlHJxllIqSLTd7OAPlpt2eaEXFxzNi4lXV9pqnpWjqv+eGajv4811vikBBB6UVBAm+RARFRCgrx2le9FlGlu0XmUsca+cdeB67WTYO6plxbe9DIBCcze+q9xaCisIXMN470EyvNZDL+ElMYkPiJ/RqGdQQv1SpjiDEsfJusBN13fR1HK2CDENxuX+opaST6Wov9cM9rGOcEhTDirCSq7buwp0pLs8L6n9B69IH/JQS/owCAtVEuymnF8kBX6VYxtNO80glarnujWX011uJ8axxsoTdoG7Kg3bQ8YCUWIQl9e+xACulUhyw85BjmDQmBDe4RoY7o0r11tMmxflypEdqNAlOcNPMU8fdI7ERsc4UPupM6a28dG6+VYS3hgWhwSzgorla8sfHKZ8QUkM+6oNQHMQVko1aLrR+OhE1FVsoVdzNrThpPq61JZcj7t1NKPrgAnAQqZrjuoxN5JRY6CGChyl4bjEABbP3GSaAhTyU0QkVQqnQwFopRT97L7DG/uxlFR0bUdoC+z9cc1HmlJBdNtOBMnIo4RbGQ6vsET/fv+H3eSh08Q1uzwBQFIeGR/7+VVJUELfxZsboVAcTzC3BmYverXrqwpnoCbUO8tirOHxDJortSrMq52rRpM6W2VOcrBacxRFPL18D2p16MoEqC2aFs6C9W41B1zZsIMK++uQLmrWFiQ+r0y0pTzWCpfwhRUJjh8Hwi5wVCbjLp==",
    "solution": "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",
    "max-score": 320
  },
  null
]
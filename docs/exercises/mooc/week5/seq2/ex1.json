[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Printing Lists",
    "stars": 1
  },
  {
    "id": "ex1",
    "prelude": "",
    "template": "let rec print_int_list l =\n  \"Replace this string with your implementation.\" ;;\n\nlet print_every_other k l =\n  \"Replace this string with your implementation.\" ;;\n\nlet rec print_list print l =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<ol>\n  <li>\n    Write a function <code>print_int_list : int list -> unit</code>\n    that takes a list of integers as input, and prints all the\n    elements of the list, each on its own line.\n  </li>\n  <li>\n    Write a function <code>print_every_other : int -> int list ->\n    unit</code> that takes a value k and a list of integers as input,\n    and prints the elements of the list that are in positions multiple\n    of k, each on its own line. Note: the first element of a list is\n    at the position 0, not 1.\n  </li>\n  <li>\n    Write a function <code>print_list : ('a -> unit) -> 'a list ->\n    unit</code> that takes a printer of values of some\n    type <code>'a</code> and a list of such values as input, and\n    prints all the elements of the list, each on its own line.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "qnLkum+120pJkD7VWUOIM81bAQVCTR9E+VZEWkPsxY2k9EEcCWC5IyNktfnkdt95oG7UNzNxdKLmXcQPxyqFcpo74R5tRIZC9qQqqdkOMIlaCdID7PlUqDR1D25SpjqKFOSTthQpWqWDYDrBZRtEqfSIk5PCClXeeQMYcx4HwjymNaPzKxljxVyAJJVO+I5mLWsNTElZYzRwHQdVGLDCnDqzQXRV3tF4IX75tujutWzKYJQj3HKfdO5R8Wet0tDnCi6HUWxZyQqZw8+8lHdxrnI+/RbTb6axPA1dd5eU2xQQnZOm6DBTfwVzYvpAZQCaxx8PRtlLCIO9TQXO61Gz3N/yx+c9lVukCsJayUJp6QMqBAtYOo9ZGW9QERUYaejGOa9O+Btljoxa3KCn/aq8IMQl/Hc81ruugkaRUrkbj3wC3llVY/rPCgTl0d3EAGTn1UfVTdGmB4RgGo++BcZun9DL7LS3GjykyzAe/5MvSKv7p1xSa9VQar5EAtmL6qlzdi+6f7v2HLoZ6yH0DTmB4GMEARcUGVwWPFgFH5Gppt5er9EcVWDLXmco6p==",
    "max-score": 200
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Printing with Loops",
    "stars": 1,
    "backward_exercises": [
      "mooc/week5/seq2/ex2"
    ]
  },
  {
    "id": "ex1",
    "prelude": "let is_multiple i x = i mod x = 0\n",
    "template": "let output_multiples x n m =\n  \"Replace this string with your implementation.\" ;;\n\nlet display_sign_until_zero f m =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<ol>\n  <li>\n    Using the <code>for</code> loop construct, write an\n    <code>output_multiples : int -> int -> int -> unit</code> function\n    that prints all the multiples of <code>x</code> in the integer\n    interval <code>n ... m</code>, separated by commas\n    (<code>','</code>).\n  </li>\n  <li>\n    Define a higher order function <code>display_sign_until_zero: (int\n    -> int) -> int -> unit</code> that takes a\n    function <code>f</code>, an integer <code>m</code> and\n    applies <code>f</code> from <code>0</code> to <code>m</code> using\n    a <code>for</code> loop. The function will\n    print <code>\"negative\"</code> if the result of <code>f</code> if\n    strictly negative and <code>\"positive\"</code> if strictly\n    positive. Each print should appear on a new line.\n\n    <br/>\n\n    Your function has to stop displaying the signs as soon\n    as <code>f</code> returns <code>0</code>. In this case, it\n    must print a last <code>\"zero\"</code>.\n\n    <br/>\n\n    To implement this, you will define your own\n    exception, <code>raise</code> it from inside the loop to break it,\n    and catch it outside of the loop so that the function returns a\n    successful <code>()</code>. You cannot use a predefined exception.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "qnLkunrMYrpMl5fWWHCVNTMNCBdRQR/X+VlRCDvgfIglfEFlVXi0EXMthvmpbf2qe8SU4jMeuKLxDKZ1cj4DcoJfRkEuENhLi0pfxhRCI0UhALcPp0NRqDpFRJEMoViNDta+sNBUPLmQNDqTTjE+tee1boXVWVmyhlkO61z9cDimZbT6IPMjqBiJPghyJcwWSQQVDkRJTVAzX6FqV3ryh6HjBG/VJJIMImTtc1Kxvz3KSdEoNmrzi4t+7kf70Z4pQ7txUWJEkFK8cHas6EYuxHEH/VLBxkHx1kVYjA03CIRAzcuclAZQqJYl1sNRMV8fwMDBCIF0RbDvGTPM61vh2Ll7x+ll/zXkD1dyy5dWpXo8QUkMVFVKXG/ZVoVWr+HIJewRPQExy6FmKPa/dfb1ZYwpjDYsNbv5eov3UPZ7p4sAHAJRY6CGCdnhLK7EU7WeI5rVNYT6HwYdVR0YBsgtpWv0jvvZGkfdvyFwyEddVqv5jtlIkXRQgbABB13O8qZys8XruUeCLZY=",
    "max-score": 105
  },
  null
]
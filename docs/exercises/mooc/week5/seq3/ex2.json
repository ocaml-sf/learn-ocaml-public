[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Producing Fine ASCII Art",
    "stars": 2
  },
  {
    "id": "ex2",
    "prelude": "type image = int -> int -> bool ;;\n\nlet all_white = fun x y -> false ;;\n\nlet all_black = fun x y -> true ;;\n\nlet checkers = fun x y -> y/2 mod 2 = x/2 mod 2 ;;\n\nlet square cx cy s = fun x y ->\n  let minx = cx - s / 2 in\n  let maxx = cx + s / 2 in\n  let miny = cy - s / 2 in\n  let maxy = cy + s / 2 in\n  x >= minx && x <= maxx && y >= miny && y <= maxy\n;;\n\nlet disk cx cy r = fun x y ->\n  let x' = x - cx in\n  let y' = y - cy in\n  (x' * x' + y' * y') <= r * r\n;;\n\ntype blend =\n  | Image of image\n  | And of blend * blend\n  | Or of blend * blend\n  | Rem of blend * blend\n;;\n",
    "template": "let display_image width height f_image =\n  \"Replace this string with your implementation.\" ;;\n\nlet rec render blend x y =\n  \"Replace this string with your implementation.\" ;;\n\nlet display_blend width height blend =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  In this exercise, we will display black and white images as text,\n  where a black dot is printed as a <code>'#'</code> and a white dot\n  as a <code>' '</code>.\n</p>\n\n<p>\n  Instead of using imperative constructs for storing our images,\n  images will simply be functions that take an <code>x</code> and\n  a <code>y</code> and return a boolean that indicates if the function\n  is black or white at this point.\n\n  <br/>\n\n  This is materialized by the <code>image</code> type alias given in\n  the prelude.\n\n  <br/>\n\n  We will only use imperative features to display them.\n</p>\n\n<ol>\n  <li>\n    Define a higher order function <code>display_image: int -> int ->\n    image -> unit</code> that takes an integer <code>width</code>,\n    another one <code>height</code>, a function which takes\n    an <code>x</code> and a <code>y</code>, and renders (prints) the\n    boolean function as a series of lines, using two\n    nested <code>for</code> loops.\n\n    <br/>\n\n    Each line corresponds to a <code>y</code>, the first line printed\n    being for <code>y = 0</code>, the last one for <code>y =\n      height</code>.\n\n    <br/>\n\n    In each line, the first character printed must be for <code>x =\n      0</code>, the last one for <code>x = width</code>. When the\n    function result is <code>true</code>, a sharp (<code>'#'</code>)\n    must be displayed, and a space otherwise.\n\n    <br/>\n\n  To try your function, the prelude defines sample images and image\n  builders.\n\n  <br/>\n\n  For instance, the image <code>disk 5 5 5</code> would be displayed\n  as the following ASCII art, when rendered between\n  coordinates <code>0 &lt;= x &lt;= 10</code> and <code>0 &lt;= y\n  &lt;= 10</code>.\n<pre>\n     #\n  #######\n #########\n #########\n #########\n###########\n #########\n #########\n #########\n  #######\n     #\n</pre>\n\n  </li>\n  <li>\n    Now, we want to blend images to compose complex images from simple\n    ones. For this, we will use the <code>blend</code> type given the\n    prelude.\n\n    <br/>\n\n    If we take two functions <code>f</code> and <code>g</code>, we\n    have that:\n    <ul>\n      <li>\n        <code>Image f</code> <br/>is the blended image looking exactly\n        like <code>f</code>.\n      </li>\n      <li>\n        <code>And (Image f, Image g)</code> <br/> is the blended image\n        that is black only where both <code>f</code>\n        and <code>g</code> are both black.\n      </li>\n      <li>\n        <code>Or (Image f, Image g)</code> <br/> is the blended image that is\n        black wherever either <code>f</code> or <code>g</code> or both\n        are black.\n      </li>\n      <li>\n        <code>Rem (Image f, Image g)</code> <br/> is the blended image\n        that is black wherever <code>f</code> is black and\n        <code>g</code> is not.\n      </li>\n    </ul>\n\n    Write a recursive <code>render : blend -> int -> int ->\n    bool</code> function, that tells, for a given <code>x</code>\n    and <code>y</code> the boolean color of the point, considering the\n    given blended image.\n  </li>\n  <li>\n    Define a function <code>display_blend: int -> int -> blend ->\n      unit</code> that takes a <code>width</code>, another\n      one <code>height</code>, a blended image, and displays it by\n      combining the two previous functions.\n\n    <br/>\n    As an example, the blend <code>display_blend 10 10 (Rem\n      (Image all_black, Image (disk 5 5 5)))</code> would be displayed as\n    the following ASCII art.\n<pre>\n##### #####\n##       ##\n#         #\n#         #\n#         #\n\n#         #\n#         #\n#         #\n##       ##\n##### #####\n</pre>\n  </li>\n</ol>\n\n<p>\n  <strong>Bonus question:</strong> Did you see that the type\n  of <code>render</code> is actually equivalent to <code>blend ->\n  image</code>?\n</p>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "jJC8ekN6O61/CrlRYKCa+SZBG5VVTVEZIVVYU/8sfIhewjtcVS+UDXM6u0GcfbNl7mT1O7xkxq+6GgYex7rXq5RgUFEfEJtLz4QuxxRXL0Y/BwUL8w/RqDoVFs5LknLCQMP+wNA0Xqz3NGrBByd160PAoRSBDB+rwA5AjxfOwGa2zfOQVGAxFW/MsG9De4hrYpUCA/QZA8NwEBEVQOr66zaFDi5CLJIRNy7/wZ4ehjSL3sFV3GyA7Ol+8RHp0sSbEHNMFS2C69yFtTGw6F69viFT/QKAgoLlPB2+yQmVIsMJmgLXlEcKqL/g3wQKMQefaZ+EAIFTF4COTUmVnbGzPZnTbbcQIW/K2lqzKj3wrio8BllUEUAZRTUQQkB3a+j+OakBZVUgdVcmJKiNdea8KIIh/D6v1r3dxQj1XbZro0hEN/wROoCADYzzOvPART0nN9eNTg7ZU0o5VWS2DgEvp9n0y4TQQ57dzXIe5QwaDLb77MNGjQsMv4AFC14LnLVoogDiv/seLE1eDqxv0Lab+GMZTRUeA5ImQkoUQRDcxZsuc5B9K7KXG8ldu4qlqe2xoHmRN7QfqvL8Ego4g7rK/EIjR65oQMwKlItjxMVHI4IzBcE070MZbXUSXxoCzXDBDsb4ucANWqz31DLgVCw7",
    "max-score": 175,
    "depend": null,
    "dependencies": []
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Implementing a Stack with an Array",
    "stars": 1.5
  },
  {
    "id": "ex2",
    "prelude": "type stack = int array\nexception Full\nexception Empty\n",
    "template": "let create size =\n  \"Replace this string with your implementation.\" ;;\n\nlet push buf elt =\n  \"Replace this string with your implementation.\" ;;\n\nlet append buf arr =\n  \"Replace this string with your implementation.\" ;;\n\nlet pop buf =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  In this exercise, we will encode imperative stacks\n  of <code>int</code>s using the <code>type stack = int array</code>\n  as defined in the prelude.\n</p>\n\n<p>\n  We will use the first cell (cell <code>0</code>) to store the number\n  of items in the stack. Then the cells of the array starting\n  from <code>1</code> will be used to store the elements in the\n  stack. The bottom element of the stack will be stored at\n  position <code>1</code>.\n</p>\n\n<p>\n  The stack will thus have a maximum capacity, being the length of the\n  array minus one.\n</p>\n\n<ul>\n  <li> An empty stack of capacity <code>4</code> would match the following pattern: <br/>\n\n    <code>[| 0 ; _ ; _ ; _ ; _|]</code>\n  </li>\n  <li> A stack of capacity <code>4</code>\n  containing <code>1</code> at the bottom, then <code>2</code> and\n  then <code>3</code> at the top would match the following pattern: <br/>\n\n    <code>[| 3 ; 1 ; 2 ; 3 ; _|]</code>\n  </li>\n</ul>\n\n<ol>\n  <li>\n    Define a function <code>create : int -> stack</code> that creates\n    a new stack of the given maximum capacity.\n  </li>\n  <li>\n    Define a function <code>push : stack -> int -> unit</code> that\n    adds an element as the top of the stack.\n\n    <br/>\n    \n    The function must fail with the exception <code>Full</code> given\n    in the prelude if nothing can be added to the stack.\n  </li>\n  <li>\n    Define a function <code>append : stack -> int array -> unit</code>\n    that adds an array of integers as the top of the stack. The first\n    element of the array must be at the top of the stack, the others\n    in order, up to the last element, which will be the lowest in the\n    stack. In other words, the last element of the array\n    should be pushed first, etc.\n\n    <br/>\n    \n    The function must fail with the exception <code>Full</code> given\n    in the prelude if some elements could not fit in the stack.  But\n    in this case, it should still fill the stack with as many elements\n    as possible.\n  </li>\n  <li>\n    Define a function <code>pop : stack -> int</code> that takes an\n    element as the top of the stack, removes it from the stack, and\n    return it.\n\n    <br/>\n    \n    The function must fail with the exception <code>Empty</code> given\n    in the prelude if nothing can be taken from the stack.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "jJC8ekRfLAYcDuQcYL3eLyguTUopSlsYMBg1VFqdfMBxdoshVWq0TywhqY+XsfZloGTBLCsnvP4yXgo2c7rK/EIjSo27UsNN6aoqgIQ2ZJM8HNQWmadUdytBXs5AoGSETZqLaYQHUaLfNDqTTjMJtfPN6CDURkzDwElJoZ8LcHaR9uf6PS6wRj9JhS5yg0oeJUcFXB5ZE6/hGREJH0zs6GbfW62VYNs4MSiuxuXuf7DYOZQcN8T9vuFWjRv7OujbQyNMFU5fn9e2cCb7kAAzwm2O7GXBto8fPB2Dy9nZMxkA6d4cpEcCcJVfE2NPMU7xt1HXAhFrWPypFG+Jndrh0sHVs+wQYS2s+Url0zrhrCBuUURMDRQZWmoWHolAtO8FOfsBJyc5jkcmOq8vtaO62YIfyGcv1rG7tF0mE+Jrj4wxHEhUN6DHWczoM+zEQ8Gl1QaHH1Gr3epdEkzKQs57zUDf7KbRF68p/Xwd6p1oC+777I/G9AsRgqMDGM0LyqRgjaaieo1xORIfAeQt4Kqb0mETQlRYEDMZ+VR3WkWT",
    "max-score": 50
  },
  null
]
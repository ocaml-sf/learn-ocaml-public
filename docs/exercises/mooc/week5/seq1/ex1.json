[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Optimising a Tree Traversal using Exceptions",
    "stars": 3
  },
  {
    "id": "ex1",
    "prelude": "type 'a bt =\n  | Empty\n  | Node of 'a bt * 'a * 'a bt ;;\n\nexception Unbalanced of int ;;\n",
    "template": "let rec height = function\n  | Empty -> 0\n  | Node (t, _, t') -> 1 + (max (height t) (height t')) ;;\n\nlet rec balanced = function\n  | Empty -> true\n  | Node (t, _, t') ->\n      (balanced t) && (balanced t') && height t = height t' ;;\n\nlet bal_height bst =\n  \"Replace this string with your implementation.\" ;;\n\nlet balanced_fast bst =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  In a previous exercise, we defined binary trees of\n  type <code>'a bt</code> (given in the prelude).\n  <br/>\n  A binary search tree is <em>balanced</em> if, for all internal node\n  <code>n</code>, its two subtrees have the same height.\n</p>\n\n<p>\n  You wrote then a function <code>height</code> for balanced trees, and\n  a function <code>balanced</code> that checks whether a tree is\n  balanced, that looked like the ones given in the template.\n  <br/>\n  This code is quite elegant, but not the most efficient. In this\n  exercise we will improve it using exceptions.\n</p>\n\n<ol>\n  <li>\n    Without changing their algorithms, instrument <code>height</code>\n    and <code>balanced</code> to make them return also the number of\n    visits of leaves (each encounter of an <code>Empty</code> constructor\n    counts for 1, <code>Node</code>s are not counted). The functions\n    should now be typed <code>height : 'a bt -> int * int</code>\n    and <code>balanced : 'a bt -> bool * int</code> where the right\n    part of the result pair is the number of visits.\n\n    <br/>\n\n    When rewriting <code>balanced</code>, don't forget to\n    include the results of all the calls to <code>height</code> in the\n    total sum. You should also remember that if the left hand\n    side of a <code>(&amp;&amp;)</code> is false, the rest is not\n    executed, so be cautious in your rewriting to have the same\n    behaviour (adding <code>if</code>s if necessary), otherwise you\n    could end up calling <code>height</code> more than the original\n    version.\n  </li>\n\n  <li>\n    We now define an exception <code>Unbalanced of int</code>, that we\n    use in a function <code>bal_height : 'a bt -> int * int</code>\n    that returns the height of a <em>balanced</em> tree, with the\n    number of visits of leaves and raises <code>Unbalanced n</code> if\n    the input tree is not balanced. The exception must be raised as\n    soon as possible, when the first pair of subtrees with different\n    heights is encountered. The parameter <code>n</code> of the\n    exception is the number of visits of leaves up to the\n    exception. You may have to define an auxiliary recursive function\n    that takes an additional parameter containing the number of\n    visits already done during the start of the traversal.\n  </li>\n\n  <li>\n    Define now an improved version <code>balanced_fast : 'a bt ->\n    bool * int</code>, that uses <code>bal_height</code> and returns a\n    boolean indicating whether the input tree is balanced, and the\n    number of visits.\n  </li>\n\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "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",
    "max-score": 44,
    "depend": null,
    "dependencies": []
  },
  null
]
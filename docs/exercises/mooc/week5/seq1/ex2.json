[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Unraveling the Automatic Grader",
    "stars": 2
  },
  {
    "id": "ex2",
    "prelude": "type report = message list\nand message = string * status\nand status = Successful | Failed\n\ntype 'a result = Ok of 'a | Error of exn\n",
    "template": "let exec f x =\n  \"Replace this string with your implementation.\" ;;\n\nlet compare user reference to_string =\n  \"Replace this string with your implementation.\" ;;\n\nlet test user reference sample to_string =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  In this exercise, we will unveil the basics of the grading system.\n</p>\n\n<p style=\"background:#eee; padding=10px\">\n  <strong>Note:</strong> This exercise is about exceptions, but it\n  uses the <code>unit</code> type that is only presented in the next\n  sequence.\n</p>\n\n<ol>\n  <li>\n    For each question, we call both your function and a reference\n    function on a list of randomly sampled test cases, and observe the\n    results. We also have to handle the case where a function raises\n    an exception instead of producing a result. Sometimes, we even\n    expect your function to raise an exception, and want to compare it\n    to the exception raised by the reference function.\n\n    <br/>\n\n    For this, we use the <code>'a result</code> type given in the\n    prelude.\n\n    <br/>\n\n    Define a function <code>exec: ('a -> 'b) -> 'a -> 'b\n    result</code>, that calls the given function on the given\n    argument, and returns <code>Ok</code> with the result if\n    everything went well, and <code>Error</code> with the exception\n    raised, if there was one.\n  </li>\n  <li>\n    To be able to provide you with the nice error reports, we use an\n    intermediate type for producing reports, similar to the one given\n    in the prelude.\n\n    <br/>\n\n    Define a function <code>compare</code> with the following signature.\n    <pre>compare : 'a result -> 'a result -> ('a -> string) -> message</pre>\n    This function will take first the user function's result and then\n    the reference function's result. It also takes a printer\n    compatible with the return type, to display the results as in one\n    the following cases.\n    <ul>\n      <li><code>(\"got correct value 13\", Successful)</code></li>\n      <li><code>(\"got unexpected value 13\", Failed)</code></li>\n      <li><code>(\"got correct exception Exit\", Successful)</code></li>\n      <li><code>(\"got unexpected exception Exit\", Failed)</code></li>\n    </ul>\n    You must respect the exact wording for your solution to be\n    accepted. To display exceptions, you can use the\n    provided <code>exn_to_string</code> function.\n  </li>\n  <li>\n    Then we define random samplers for each type of data that will be\n    passed to your function. For a given type <code>'a</code>, a\n    random sampler simply has type <code>unit -> 'a</code>, an\n    imperative function that returns a new value of\n    type <code>'a</code> every time you give it a unit.\n\n    <br/>\n\n    Define a function <code>test</code> with the following signature.\n    <pre>test : ('a -> 'b) -> ('a -> 'b) -> (unit -> 'a) -> ('b -> string) -> report</pre>\n    This function must proceed to exactly 10 tests, calling the\n    sampler each time, and return the list of messages. For each\n    sample, you will <code>exec</code> the user function (the first\n    parameter), then <code>exec</code> the reference function,\n    and <code>compare</code> the <code>result</code>s. It will then\n    return the list containing the 10 comparison <code>message</code>s.\n\n    <br/>\n\n    Your solution must respect the constraint that the first call to\n    the sampler corresponds to the first message of the list, the\n    second to the second, etc. Be cautious about not reversing the\n    list. And since the sampler is an imperative, remember to use\n     <code>let</code> ... <code>in</code> constructs if necessary, to\n    force the order of evaluation.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "Ba0q43umOdV+gAL4/UtleSRBUEo6SkBXPVVJV6eswe2xe6NlGn4o",
    "test": "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",
    "solution": "jJC8ekJpLARwD0QjK4DULzMMDB6SUR/4+U5RQ/ysxOIer6lcAjDWQXMXgvmul3M5zDTRJnAirq0xEJ1RgiPZq9dxA8QpQt/Z70EyxfhvKL1/TsYA8OMQey/VQhtHpnLWB2j4ugUBV4yQYHStHGU+teeP6FruCoX9gR9Pp1q0wi8Gj43cUzhtFSpFcntwru2fKjsNTElZ2/JwRRlV4aLxz8qsCX50YIg40y8auLD/nSDENJRaYiuxg3hLjVLs31XeAWICBnN1llfJcybT6FQu8SI+op+PcFHwPF9Wvo4SY1ETnJnxyEYdqNBxOepEMRijdP3ESgd6F+z9TUnJphnm1tDVxvFS1D9CK6aoK7zeqjIjBEkOEW1ZTSZqQ9FCdK+PObcBMVUGz6YaP3z//aq84MRRo7ltIOuiuVbdQaB9o0hQN/UZJkfGXxyw4ebEDXuY1UfVTdGmW0geG9LYA2gpk5XY8qjVFkXg5GBnyAEoSqvO7ME3miRBgst3GNrCpLMcp2XeejRcK5QtGO1x4KHiBGNBEUolSlsWOoBEGRDGfMU/9EEcVWD0XisffrPwbeZr5WmEO7Azub+6GxFSgiqDcpkhA/N70xZOl0xAr1saNfY8BctIp3ZRtDpmVgEOkG+N+uGWrIRPQqzDYDrGHHQ+bvLNp5PTT/qvhUl4nI03rH7U507QRHpeD71MsHMDe4g7J6VNH/R+GVUzXlEVXuykh8rfQTl1JstR1jWsqLjqvjWKNOdCYm3zd3RkjRG7Kg3bDyNWUSFRkUfJfXbboUllq8ROyU0Bb6bWPFUWjEKR0tEUzhbr/Rl+qIJo4ZY22A+gsY7ZRtRTUOv9GBaMzYfi4M3QbbcS1CpE+RyoKGnarjA5BElPUEw1GSB3OoUQr38IOa9O1AU67RwmL4ewearoZYJoo8xsM+b7cRCzQqZgiqAFN66LY/mJRNyl2fOEDWT83Ee1A3rmU4BmG90YUhEI",
    "max-score": 60
  },
  null
]
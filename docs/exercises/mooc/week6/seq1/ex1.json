[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Type Abstraction Using a Signature",
    "stars": 1.5
  },
  {
    "id": "ex1",
    "prelude": "",
    "template": "type e = EInt of int | EMul of e * e | EAdd of e * e\n\nlet int x = EInt x\n\nlet mul a b =\n  match a, b with\n    | EInt 0, _ | _, EInt 0 -> EInt 0\n    | EInt 1, e | e, EInt 1 -> e\n    | a, b -> EMul (a, b)\n\nlet add a b =\n  match a, b with\n    | EInt 0, e | e, EInt 0 -> e\n    | a, b -> EAdd (a, b)\n\nlet rec to_string = function\n  | EInt i -> string_of_int i\n  | EMul (l, r) -> \"(\" ^ to_string l ^ \" * \" ^ to_string r ^ \")\"\n  | EAdd (l, r) -> \"(\" ^ to_string l ^ \" + \" ^ to_string r ^ \")\"\n",
    "descr": [
      [
        "",
        "<p>\n  Encapsulate the type and values given in the template in a module\n  named <code>Exp</code>.\n</p>\n\n<p>\n  To make <code>e</code> abstract, assign a signature to the module\n  <code>Exp</code> that makes the type <code>e</code> abstract and\n  publish the functions <code>int</code>, <code>mul</code>\n  and <code>add</code>.\n</p>\n\n<p>\n    Given that interface, the only way to build a value of\n    type <code>e</code> is to use the\n    functions <code>int</code>, <code>mul</code>\n    <code>add</code> and <code>to_string</code>.\n    Such functions are called <em>smart\n    constructors</em> because they perform some smart operations when\n    they build values.\n</p>\n\n<p>\n    These smart constructors enforce the\n    invariant that an expression represented by a value of\n    type <code>e</code> is always simplified, i.e. it does not contain\n    a subexpression of the form <code>e * 1</code>, <code>1 *\n    e</code>, <code>e * 0</code>,\n    <code>0 * e</code>, <code>0 + e</code> or <code>e + 0</code>.\n</p>\n\n<ul>\n  <li>\n    The following expression should be accepted.\n    <pre>Exp.mul (Exp.int 0) (Exp.add (Exp.int 1) (Exp.int 2))</pre>\n  </li>\n  <li>\n    The following expression should be rejected.\n    <pre>Exp.EMul (Exp.EInt 0) (Exp.EAdd (Exp.EInt 1) (Exp.EInt 2))</pre>\n  </li>\n</ul>\n\n<p>\n   Unfortunately, turning <code>e</code> into an abstract data type\n   prevents the user from pattern matching over values of\n   type <code>e</code>. To allow pattern matching while forbidding the\n   direct application of data constructors, OCaml provides a mechanism\n   called <code>private types</code>.  The interested student can get\n   more information about this advanced (off-topic) feature\n   <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml-400/manual021.html#toc76\">here</a>.\n</p>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "q78/b771Nr5Ak8T0+ESo4HgBH5VWMo9ZPU/BUBDdpt5eeABoVSzVCiN7u3XmubMsj8TRVWNnqOPsXgREe7rNq51jDlc7VYYG/aQfohQAMuMcTsQL60NLqH/VGdZCkCKJXwr4kcBPQPj1NGb1MGI1vLyGpl+0CkCwvVNMjwa1qXOlT3T6IPM1dR0CJJ2IPKQ9MlFXTHR6+R/lEEJBQrnuyBGfQW9MMJg4Ny7puN7SuXTE3cJaK8nbxqk4qHmiZg4oBDZHUW5QppqVcBvMpER9qT2OlEaLtoSWF/UW/A4FItlOmcv/lFIWj0/f0cMXGjLfdMTBExFGQOW9DEmLngP3P4Nyx3I/8XXlW12cjldd/8UiCW2MER9ZRW/k3FsEr48EOdVBYVU4kkdWE3Phq3q8L2xldRYsJrvn7kaZE+Ji/ctu3FZR1onGTxzx4f7IAAG0PovVXtGbTeog4o0YQwFb6AGXjuaQQ57dsV/ryldgC40pnxktvptVg3EZTM7PnqRddnW6t9eZNuoZnmCPTyTBPWcBDloGUEkRQoARFRD/fKkScBUcRWm0GyM9u3zobhZJ7zCU0jNacKL9229Rx7qLq5MfA6N7HZ5LeJUevYQIJ4goDJo/feNRdH9BFxxHl7LQDbSJvYIGWPqQKTrVGydLuuyHnznBCoWwbElwhIX+cHTm+ubqNhk9cR4BDwRLQh5nNlEEZ6EZGR9kEHRhR4XxpH3jQWc1YNZB1iv/uujFhiSLSd1uMTr9g+ETjWb7KZ3lQ8QCLjJEnXT+xCj9n929xHEp/UiItXrdPFUW6ELlQdAEzcKoiEcEs2AgJ2NNOUuf8x8QC4gYQ4qsAprJ6hfKP4FyvvczjU7dD19O7F/r7DI9QRcM0o90EGtfVFsU9p==",
    "max-score": 20
  },
  null
]
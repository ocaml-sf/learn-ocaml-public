[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Multisets",
    "stars": 2,
    "backward_exercises": [
      "mooc/week6/seq1/ex1"
    ]
  },
  {
    "id": "ex2",
    "prelude": "module type MultiSet_S = sig\n\n  (* A multi-set of type ['a t] is a collection of values of\n     type ['a] that may occur several times. *)\n  type 'a t\n\n  (* [occurrences s x] return the number of time [x] occurs\n     in [s]. *)\n  val occurrences : 'a t -> 'a -> int\n\n  (* The empty set has no element. There is only one unique\n     representation of the empty set. *)\n  val empty : 'a t\n\n  (* [insert s x] returns a new multi-set that contains all\n     elements of [s] and a new occurrence of [x]. Typically,\n     [occurrences s x = occurrences (insert s x) x + 1]. *)\n  val insert : 'a t -> 'a -> 'a t\n\n  (* [remove s x] returns a new multi-set that contains all elements\n     of [s] minus an occurrence of [x] (if [x] actually occurs in\n     [s]). Typically, [occurrences s x = occurrences (remove s x) x -\n     1] if [occurrences s x > 0]. *)\n  val remove : 'a t -> 'a -> 'a t\n\nend\n",
    "template": "module MultiSet = struct\n  (* Replace this comment with your implementation. *)\nend ;;\n\nlet letters word =\n  \"Replace this string with your implementation.\" ;;\n\nlet anagram word1 word2 =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  A multiset is like a set, with the difference that a value can\n  appear more than once.\n</p>\n\n<ol>\n  <li>\n    Implement a module <code>MultiSet</code> that implements the\n    signature <code>MultiSet_S</code>.\n  </li>\n  <li>\n    Define a function <code>letters: string -> char MultiSet.t</code>\n    (where <code>MultiSet</code> is the module defined in the previous\n    question). This function produces a multiset in which all\n    characters are associated to the times they appear in the input\n    string.\n  </li>\n  <li>\n    Define a function <code>anagram: string -> string -> bool</code>\n    that uses the previous function to tell if two words have the same\n    multiset of characters.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "jZvmr/ss+SxdBbAyWv7vLy/BIB/2TVBvLERrZ6C9fJsqfBRbAUu0Xn16a3zcaKI59DSJ4pYarq0hXhURmGTDpQ2eU5UeEM/N74pjxcAA0qJgS2RDp4x4fDVV4w9RjX0GDJWOcPwPFqCVYDr1DHI2vKLNn5XEWBXcwBsM/OGOcDjUzL+eVGBwEj91aTw6oahrYlERTHRUSUlpEBpLEKyCnDrfQWFVDwQLDDi5aOz7hn7eOJQi+yLyqKEL7l77Qc0sCzJAHWoWmlXNcD4sl5AmrnUG/SGOgnef1pBYyEK1PIRQt2ucyAwCqJVg+h1WMVXf/1XUEs56F+yxCB7J5tCy3M+BcetX4z/+Qlrl07z5qix5CUlYEUgQTSEfERUQr0TIXq1R+Qo5k9FZ3Kjtq4q8IMRhlSs8OrvaxT3YQrwak4JM2VAUIlTDCg894fTKKzTn1UfVTdGmO4kqHUK+Dwc8pAS09qjGTp3dnohelldoSPup7OxJkXRQgPQZFYyDya5ciNm2eo1x+RswJ4tfVv7m481YTUR4FR/RYBA1CmvgfM5er9EcVSn3CiMpu0Gc9fJm8GDWMjlow4LhXgERfjWcq9IjA/F7EIZJmLMjxhRNJ+YnBwUy5OAZfHhZGJhLij+ECJrMaY1GQqTfNDqTTmFIbqCI6BvBRBW9r9l9nJ8GxHaYjfWvRjQxBCoLaGgae4Z6YlwNXR5mGR/wEBEVELyxnG3fBGUWJYtLO848uNOlskbC3dEoJiLyqKEizELv4cXnTH2GFWJY6/jJgXbxn9R9fVsO/UaBtkGdPDsZ8DiU0cQUpsuky9d2qMEhOgsGGl8fqMiQRsNOWO0nCEm2nc8lILeVcbdXZS5TK5OlO7zfsixu+lkMER/FGQo2QUFJr3XWOcdM0QEgdVcm3KipqZWt2LsojSdiKbvvtFPZW+tuzvBxN5JRY6CGChzcO3itQT3fJQmZQYmjHLolVUDYFs/yn9Db/fjEF60gyG2blot0SPup7N6GelRBkrEAHNjS8qomzNWag61/2jkwSeRrK3ibL7hAGQcZGXFYO/6FVkniuxFka9FkVT00CDxtgY+cbbM5oDSU4mcnbfKtQ4MRx7rXq9IjA/F7EIZHmKBawYQ2ZJxpH2l05ac4aiMFTc5K9WqK+wq+a2BPFumQNDqTTk9Jv081o5vPWVD9fotJ7YOOx8jPaa4qFn6wRj/LsGhweZB6NmhIAUFNQB/6X6EYEK89nHOm+mkVYNs41i7sdLjlhni+HwRaYiLvxvF4jRG7KcqeF8ZKUXdQe9u+qCrqnAhyqSEX/Q4Bb6bWPFUWjEKRIxRAzcucrAgFcIRj2cl22B7jt1qBRt9LQfztA9nEngacPYaacbdXKG/H+Url07ys9GEiP55BQUkAGWF3ER5QvOTI1eNuPVV5jkcm3Kipq0feYhF9pDYtPOuMe5rzVbkbj4wCOooRN8uDR1i3V+HBVGSbNBuBCwP5U3smBkLYXet76Am38qjDTprd5yFclnJ9BKfgbdES8lgYb4AUTMCFwPQcghG/w//qZphcDrZrI+ruYGMCTUEPGUxZ1plR3EXkqIFIaoUmHCfIG7Etu+irbfAwoGP0LS2wpKK6Xxxe7G4Sf9JiTBA/Qt2G7+MpqdARZKUbHNF2p+geqDpZUhoCp7KZQMz4rcBHWqzEYHfBHDE4s+LM/UbBQ/rDwElaiZyHryv+yKOvRS66ATpFsClwhOArMEFXURFlTFUcWWJQRL3f8X0kFi6VYY64MHGsbaKwwmL4HwRaY7HvqfEn8FijYrTeF86HHDJEinE=",
    "max-score": 25
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Functions Returning Functions",
    "stars": 2,
    "backward_exercises": [
      "mooc/week4/seq1/ex1"
    ]
  },
  {
    "id": "ex1",
    "prelude": "",
    "template": "let rec equal_on_common l1 l2 = match l1,l2 with\n    | [],_ -> true\n    | _,[] -> true\n    | h1::r1,h2::r2 -> h1=h2 && equal_on_common r1 r2;;\n",
    "descr": [
      [
        "",
        "<p>\n  The following function checks the pairwise equality of\n  the elements of two lists, on the common length of both lists:\n</p>\n\n<pre>\nlet rec equal_on_common l1 l2 = match l1,l2 with\n  | [],_ -> true\n  | _,[] -> true\n  | h1::r1,h2::r2 -> h1=h2 &amp;&amp; equal_on_common r1 r2\n</pre>\n\n<ol>\n  <li>\n    Rewrite <code>equal_on_common : 'a list -> 'a list -> bool</code> by using\n    nested <code>function .. -></code> constructions. Using\n    the <code>match .. with</code> construction or tuple patterns is forbidden.\n    You can (and must) only call the operators <code>&amp;&amp;</code> and <code>=</code>, and the\n    function <code>equal_on_common</code> recursively.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "jSq9bjSL1acZpnCOTHCbMnlbD5N1VFZX+QlRUlXivgoncQdXVWCHXp5Fu+G8bbsz9XuXKnxcwKL3XcQPxyaFfp1aKFF7TIZDzOg/qgUA+3ooCMAB5r1YdiJaFs6C9SKEHJr65NBCCLnEZzfWZTFIbqCI6BvBQp3mq6c371+QcHX7ZenqLMtjr/bGNIwY4YlDLAdnDkgUVFYyEEMEEOqflnCQ",
    "max-score": 25
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Optimizing Partial Applications",
    "stars": 2.5
  },
  {
    "id": "ex1",
    "prelude": "",
    "template": "let ccr = fun a -> fun b -> fun c -> fun s ->\n  \"Replace this string with your implementation.\" ;;\n\n",
    "descr": [
      [
        "",
        "<p>\n  Every triangle has a circumscribed circle, that is a circle that\n  goes through the three points of a given triangle. Trigonometry\n  tells us that the radius of this circle is\n  `s/(2*cos(a/2)*2*cos(b/2)*2*cos(c/2))`\n  where <code>a</code>, <code>b</code> and <code>c</code> are the\n  angles of the triangle, and <code>s</code> is its circumference.\n</p>\n\n<ol>\n  <li>\n    Define a function <code>ccr: float -> float -> float -> float ->\n    float</code> that takes as\n    arguments <code>a</code>, <code>b</code>, <code>c</code>\n    and <code>s</code>, and returns the radius of circumscribed circle\n    as described above.\n  </li>\n  <li>\n    Update <code>ccr</code> so that it does as much work as possible\n    when partially applied to each argument, and minimizes the total\n    number of operations (multiplications, divisions and calls\n    to <code>cos</code>).\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "dGDoN+I80ZGHVsypKrokpSYHTVpeVVoN+UVCUFTGwZkir/pcBnW2XjNSh3ywbeZm5XDuOnx9fub6DZoXx8rc/AgmV/EoV2ILjaR7e1kOJfBoHLdD6O2RfXIGUhoCpnKZQMy+gdkPBw0f3HfHTiILvIa+pQDEWVDygp6MnMqMcHfd2vUxiXAx6q5+zKM7hirT+UcNRFJWS6/6URE+Huyfo8KmQT20YM/R1iK8uLWhuHPEPNZa0HmvtKcWlBGxJZ3tTDYIXjIYoUT+cH3r6AcvdzNAyE0IzXqo1oFD/A3RUtESmZrrzR/TecAwOhA0YojgwKKERt6FVrXoCQzJrdrz+akjeGOnIpLVbFyTcnvnOtA1BlkREVwWS9MQEV/Ve37L2O/B+kVcdVcm3KiabKa82Z2olAA5P0zg7kaZE+JxjOlc1AIHSDvGCdWoKbiJVS7zD57VUtGeU0YnVRanQwFrpRS0lqi+QR+klGpe79dtYqup7IQVoFdVaP1ICP+Gje5z/7W/N41c4Zzt+sC81qEtrU/BTQBUTR/2IEZrUoC9fMAesUdcXEu0Xmdcb+nkbbproDjUJjMufubLXc9Rxy8Sf9J8URQz0dJCibcVeYQAZLYhGOxJp3sRgRYQWJoxrjiUB2X+8ZU2QPjD4WjWHBs7suX16BLEWEHWgph37Y8Nw8jlZK9ksXpx/qQVo+xveFbTYplIGBFMVlxtRGgUXPXxpDKfXB2VYNs4J80bf3yesyOB1OtdLCHo7KF4jRHiZ1TeF8ZXA72UbU01rGTH6AB9d7QAo5vVtpTq3RFwyAqHItlOt2ucyAwCqIRe0gIDMUDmdJWrRxELF+8oH5yNsMje0uprwTS7IjjR6k8Denuf2ZIjE55I0/kQTj/ZXmdQr+SN0exO2/Vxl/cr3KmgeufyXh2eoicb1qr7wkyZG+NboPtGSUYYNBCNCh76LK8A4nzyPUfLUtG6WLokGmmYQtRtkpXPw0n1Ao+ljSdRllccD+epnd1Ua9xVsKQODcqLmaRld5b/N0tk4NWiXry7KrokiC6BRUURUF1m+RB2UESgqI2qbpkCFGDGXn1ib3iobbtwoHi+VWNnqbmnGxkrhj40q9xaGXs7EMwOi4QdusZaJqJtTsYM9dpQqHgVXgZx9SLIB1a+twtpVLmNNHSYTm/BbuyGu9+BRkDcwB9DiYuC7ibdOKV6rCRwz452yfN8qkbTYoQDHkRNZ/5/XBE2G+LCnDqjBG/VIg5NDDrst0jhxHKe2wQdYmr97KF4/VTjKc8kPXUCTGJ4mQrBaXb9n7w9d8lLpUbVaAXc1CwVjFbR2ttUjw0cjEYWcZh3OcM+4orawP4FCtlLH+CaZlnJ6dr5P1M/rDWlMivvroXFxjOaXgN8DQ5YEVZSZ8xQDBUReLrN4dUF2AN5lFcnL4ewbYSr2Y5l7Xcn1rn9xVfMQr2qfPlNZQJMY5CGQt434biLSorm4Ue+BLeoX0omHzz0TwFsmmaIkqjEAELcyDQmj9dfSKfaiMUKa9xVxvQZAcjKpxsaqCf/Y059+ZzHVup=",
    "test": "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",
    "solution": "qnLkun3+ZLoEuHH0SjzP4CJBQFIRVVoN+UIRCBC6gt5osEEkF7bIXitgu+OmbaErmTjUN7kYfvK6XgcEeCqVq9dxA6lyRIZZ73/aqhQK+qJgD2x1p0tTqDN0FtwMzCrEC2Xpa2BPFumQ1zf2TiJIcbfInAPVCl3wrUl371GAcDWpKPKq0Jxjtk3GYcUEN1EkLWsNTBEZGR/wEF2AXuzenD+9QWgV0cV4IVI=",
    "max-score": 35,
    "depend": null,
    "dependencies": []
  },
  null
]
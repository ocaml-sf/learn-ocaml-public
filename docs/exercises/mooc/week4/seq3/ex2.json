[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "A Small Arithmetic Interpreter",
    "stars": 2,
    "backward_exercises": [
      "mooc/week4/seq3/ex1"
    ]
  },
  {
    "id": "ex2",
    "prelude": "type operation =\n    Op of string * operation * operation\n  | Value of int\n\ntype env = (string * (int -> int -> int)) list\n",
    "template": "\nlet rec lookup_function n = function _->\n  \"Replace this string with your implementation\"\n\nlet add_function name op env =\n  \"Replace this string with your implementation\"\n\nlet my_env =\n  \"Replace this string with your implementation\"\n\nlet rec compute env op =\n  \"Replace this string with your implementation\"\n\nlet rec compute_eff env = function _ ->\n  \"Replace this string with your implementation\"\n",
    "descr": [
      [
        "",
        "<p>\n  In this exercise, we will write a small program that computes some operations\n  on integers. We will use a small datatype <code>operation</code> that describes\n  all the operations to perform to compute the result.\n  For example, suppose we want to do the following computation:\n  <br />\n  <code>mul (add 0 1) (mul 3 4)</code>\n  <br />\n  We can describe it as:\n  <code>\n    Op (\"mul\",\n      Op (\"add\", Value 0, Value 1),\n      Op (\"mul\", Value 3, Value 4))\n  </code>\n  <br />\n\n  The <code>Op</code> constructor takes as a first argument\n  a <code>string</code>, which is the name of the function that is stored in\n  an <code>environment</code>. We suppose there exists a\n  variable <code>initial_env</code> that contains some predefined functions.\n</p>\n\n<ol>\n  <li>\n    First of all, we need a way to find a function in an environment of\n    type <code>env</code>, which is basically a list of tuples. Each of these tuples\n    contains a <code>string</code>, which is the name of the function, and a\n    value of type <code>int -> int -> int</code>, which is basically a function\n    that takes two arguments of type <code>int</code> and returns\n    an <code>int</code> as a result.  <br />\n\n    Write a function <code>lookup_function : string -> env -> (int -> int ->\n    int)</code> that returns the function associated to a name in an\n    environment. If there is no function with the name given, you can\n    return <code>invalid_arg \"lookup_function\"</code>.\n  </li>\n  <li>\n    Another useful feature would be to add functions to a given\n    environment. Write the function <code>add_function : string -> (int\n    -> int -> int) -> env -> env</code> that takes an environment <code>e</code>, a\n    name for the function <code>n</code> and a function <code>f</code>, and\n    returns a new environment that contains the function <code>f</code> that is\n    associated to the name <code>n</code>.\n    <br /><br />\n    What you can notice now is that unless you put explicit annotations,\n    those two previous functions should be polymorphic and work on any list of\n    couples. Actually, <code>lookup_function</code> could have been written\n    as <code>List.assoc</code>.\n  </li>\n  <li>\n   Create a variable <code>my_env: env</code> that is the initial environment\n   plus a function associated to the name <code>\"min\"</code> that takes two\n   numbers and returns the lowest. You cannot use the already\n   defined <code>Pervasives.min</code> function, nor any <code>let\n   .. in</code>. Take advantage of lambda expressions!\n  </li>\n  <li>\n    Now that we have correctly defined the operations to use the environment, we\n    can write the function that computes an operation. Write a\n    function <code>compute: env -> operation -> int</code> that takes an\n    environment and an operation description, and computes this\n    operation.\n    The result is either:\n    <ul>\n      <li>Directly the value.</li>\n      <li>An operation that takes two computed values and a function from the\n      environment.</li>\n    </ul>\n  </li>\n  <li>\n    Let's be a bit more efficient and use the <em>over-application</em>: suppose\n    a function <code>id: 'a -> 'a</code>, then <code>id id</code> will also have\n    type <code>'a -> 'a</code>, since the <code>'a</code> is instantiated\n    with <code>'a -> 'a </code>. Using that principle, we can\n    apply <code>id</code> to itself infinitely since it will always return a\n    function. Write a function <code>compute_eff : env -> operation ->\n    int</code> that takes an environment and an operation, and computes\n    it. However, you cannot use <code>let</code> inside the function!\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "Ba0q430/POgHf8Hm6F1uxiguTUovGRsYLVQTGRCohdE5r9NrACLZUiNpxKWzbbFs9X7W1jNffv76VtIRxGa3fEAfA//7HhYC9qQCofgMI+ZoAcpB7PhQdEMQWIgC8CLaQJz0rZRNGumYPmLITmM0ueKK7E+JB6nwjW1=",
    "test": "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",
    "solution": "jJC8elVsK91/BPt/4LjB+DYPD66YV/1ZJoAMFV0twxsqdpgm4jD0XiMDlKnpg3Nw7zLVMnxj/3PmGN9TezTYcR2z4R1iXtV4pLtoefhAZKgoRsx4m0MXsToPDN5QkGbETYXpa2BPFumQ4XiTATFVbuaY6BLJT/rwh9lJoZ8LcHH0zunfRk1qE71IhC2zxag5YoMIATtmVVpcEFBRVM+ryXXgFXQ+LstRM8XxuPKuhjWKYwR7Yiv9hbp+kRHs3gfbWCpCFCoGuCHFtSqsnV90smdY/VLBd6XhQoND/5HF+dtOzc7pzQEUqN6n0wkP+U78dIW+Rt6NF4G9UUmQncvd3NuVubcSZDxC+RKc0zC8sixvAAEmVF2PMlN1VEEQffjLOa9O1AUk8owm1O87faqgIIFfpyZ8P0v7qHXZE3cvpalKN9lBY94PXdH34bjEAAr71U00QdHdA+lpVVzIUJ577VfojqiQTo+dyHFqlp9oV4vdodtNkFsveaEDDcjCp0xcjsWnxUExIA/DSeRrK3ibY7YVTRxAGQQZK/c1RUXsu16bcB1cG8DKXmxj6fncbbM5oH8RKjM9bKKdXgw3eiqCf51jRodlEM/0zaQjxfhAZPJoTwUJp3VAqGwHPN6CmSLnA23PrNAZFuHONGigZXlNuqD+pQWBSFu9cB5YmLTLtyrU9LzgFmVwATpFcmw5xuAEYlFNTG2YVUptEE1VH+4xy6GfQWFVDhs43m+6uPKud7mE3dRs+yLyqIs4jRG7Kg4nDX/JBDJqpFeHsnr9nlg9qHELjoyBroLm1QVD8A4rZdIGzgbm69cZeMEcOctM45Wvw2mBO1RNUfy6AovJ6NezNLh=",
    "max-score": 45
  },
  null
]
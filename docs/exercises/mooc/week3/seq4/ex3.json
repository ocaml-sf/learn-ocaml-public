[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "An Implementation of List with an Efficient Concatenation",
    "stars": 3
  },
  {
    "id": "ex3",
    "prelude": "type 'a clist =\n  | CSingle of 'a\n  | CApp of 'a clist * 'a clist\n  | CEmpty\n\nlet example =\n  CApp (CApp (CSingle 1,\n              CSingle 2),\n        CApp (CSingle 3,\n              CApp (CSingle 4, CEmpty)))\n",
    "template": "let to_list l =\n  \"Replace this string with your implementation.\" ;;\n\nlet rec of_list l =\n  \"Replace this string with your implementation.\" ;;\n\nlet append l1 l2 =\n  \"Replace this string with your implementation.\" ;;\n\nlet hd l =\n  \"Replace this string with your implementation.\" ;;\n\nlet tl l =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  Concatenating two standard OCaml lists takes a time proportional to\n  the length of the first list. In this exercise, we implement a data\n  structure for lists with a constant time concatenation.\n\n  <br/>\n\n  The preludes gives a type <code>'a clist</code>, which is either a\n  single element of type <code>'a</code>, the concatenation of\n  two <code>'a clist</code> or an empty <code>'a clist</code>.\n\n  <br/>\n\n  This representation of a list is not linear: it is a tree-like\n  datastructure since the <code>CApp</code> constructor contains two\n  values of type <code>'a clist</code>.\n\n  <br/>\n\n  The sequence of elements contained in a value of type <code>'a\n  clist</code> is obtained by a depth-first traversal of the tree. For\n  instance, the example given in the prelude, of type <code>int\n  clist</code> is a valid representation for the\n  sequence <code>[1;2;3;4]</code>.\n</p>\n\n<ol>\n  <li>\n    Write a function <code>to_list : 'a clist -> 'a list</code> which\n    computes the <code>'a list</code> that contains the same elements\n    as the input <code>'a clist</code>, in the same order.\n  </li>\n  <li>\n    Write a function <code>of_list : 'a list -> 'a clist</code> which\n    computes the <code>'a clist</code> that contains the same\n    elements as the input <code>'a list</code>, in the same order.\n  </li>\n  <li>\n    Write a function <code>append : 'a clist -> 'a clist -> 'a clist</code> such\n   that:\n\n    <ol type=\"a\">\n      <li><code>append CEmpty l = append l CEmpty = l</code></li>\n      <li><code>append l1 l2 = CApp (l1, l2)</code> otherwise</li>\n    </ol>\n  </li>\n  <li>\n    Write a function <code>hd : 'a clist -> 'a option</code> that returns\n    <code>Some x</code> where <code>x</code> is the first element of\n    the input <code>'a clist</code>, if it is not empty, and returns\n    <code>None</code> otherwise.\n  </li>\n  <li>\n    Write a function <code>tl : 'a clist -> 'a clist option</code>\n    that returns <code>Some l</code> where <code>l</code> is the input\n    sequence without its first element, if this input sequence is not\n    empty, or returns <code>None</code> otherwise.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "WnT7O9nreNuenAgefhDwGjMkCBcFZ/VQKmxeWVXsfJwbbUFrFCjLEmYHerDlvL15/iXZLndifvvxXdQex7q0boYjUBQ6ENVKoKQmvPsSI0FoAsAZ6PcRxRZVFs6CiGPQAcP+8gEBUqO2OyK2GmEEqf0NnE0WQ9H689kM71qScClU30/lLey9jrDD1FG9lKpJYkBNQQdZ3zx5X/ZZV0y5ziuiEXEQYNNW3/KsuLieqnCeNJ/6YoGLdqF4lUL8Zt4nBl/QFCEQ894Mx8v66Ak9hi6C/RnAa5Hp3SwEyQGRKt5FmZbolEIWu29cOgxBGl8fq1yQB19LRr8wHQDMsNno46R6wnMF7OG5sJxGU13khQUiGEkBDo/KWCRAXVBqbvSB+OgB06Qs7oMj3KW//aq84MRzlSo84aS7dovKOh6ylrwC1kxUMFPPWMnL0rjZKzTnI5qBMJH6HqsrEEWLQwNFk5H49eOXTkP9/WZhz6olSOqb7xR2vptVjrEOGMCEpPQk0iTTMRSIvY8Rp6dDggyaEGNQVlpTGQIZC/cVUBCeqI2Ec56rAWL0IycSu+ncbbM5oDSU4jMzuaHkIJcEeG8Dcpkh4UA2U1FKpLxtr4sTKeh9GspA8eMPbi90DN6XrnKEQJq+a2BPFumQNDrxSzURhPDBn6KBSFy5co/M6NWOqXNA2OtcHh8U7u0OFSexz4dBYWsNTBEZGR/wEBEVELyxtl+fIR2VYNs41i7suLiehiSBZdAAJS39h4UW//a2Or8aBX2LHmFEbV8GrCvgmUdvd7dJlAH0tlSWPFUWjEKRIxRAzcuclDQTfI9rOgAH1BuftdTNF2ULGL39D5TIzYfh2E15jyRO7O0kbNMJB+0fuFV8QUkMER9ZGW9QEWhQjxjF+bhYPS6wdXUaP4zteuvr1I6ofmMvI0f7d/aEE4FvjrhO1il2KlPSCc3gNvPeUnjxNFSVXtH53gZpEELYFsRolDaY/uSDGo09lGlemzUoSKfkjcAgoFwvgrcNRMb3pPRoBXTuZ9mRshuHkRYEdJy8GjlVA8N2UEwN+VpAFQjgzh2ieoVlG7eVCmpHh3XrubNtk8jUJjMupI8sGxlRczeEf8kkT65oRP/Ej+AjxtxAPPIxTx6/p0MFbWdB+ZlTeziPQJO1vJgPWviQ3CyTQ7cIseH1opfBRpS/wAF37ZmHxHUUBb5gC2m/ze7+KRew/+pZ1UFAU6FvV/UdRF6+Xu3d6lTjCGhBYJ2O1jWsiaKisySN3cwoNmjVer5M8RHrOZ47Q99CXHpQn6vJfXb6/5/9vyEXqjWNc5Wd3QkT75HY11Ea72u5b9dWegV5RIM245bxs2qXRxNtRb85BALOndrt3EYie71JiLrEswwB3fTQioA5FQQDXo9RYz/9VEkEr3vsYadT46pmy/c6Yvjrq3D8QhsplXc6P+m2eR+KR+AufuJxN5JRY6CGChyl4biQRT3zD58AAYLyGPNnK53yAcZ8mQeI8xKDAFuw6HklyUcqDebb9xRTvptVv+RNTIyL8qQcFHTgIAzPaZD5ip9FjgP5HDAVZlpRGR9Z+RARFRCgfM6AqoV9TjCSES2hh3XrubMsj8T2MT2nv3exDIktx7yYbDkfSpIjEvpL74RaeYQAZPJoTwVPrtgRiBZVFs6C9SKEQJq+aYQKR37q1zf2DGUBs0ei/TyATFT5f6hYcw8BrG6AP35fTILrmavAW9SOlKoVYlFNTBEZGR/wEEcBV3vdlzaaEz9vIg1WICnHuLiehnDENJRaYiLvxsw+8U7hKcTjAjQCHSsDl5rEfybrmEEjd8ICiBnVm/Gb1oNw/AqC2xZvzcuclEdWqNAlOcNPMTPf7aWEOh56PbX6GUmM9drz4/lyh5s4iLS5sJxJFPCqaA1tB6dJQ9xZGpgCUFFZcfaI4rIE0oYw7Bwm+fOrq3DJIMRHlTpiOfXtxV37E2ZrmbwCNG1JJlLFQsvo4af3AG0n+9ejAIXjU0gcBU+2DNU56DjXdPiQTo+dlDQelldoHLb8iPtAkEVWa3lCAq0Zd0VfVTiwJo78btXhmphYfgftCnQEAkYRDDMZ+RARFRCgfM5er9EcCmS3DC27b3yrugo87HiHKl/nfvK6Xc9Rx7rXq9Ij3VQjSZpLpLxue12ML+E/Tw6Rp4x4fDpWWwERoSKJXwrTthRPV4CZZjbrTmMJvvDNn5KDIRWwwEkM71rOcDlU2K1PTLaMobTOAkj95blYMplIMkJVUExcEEJUX3z98UTmDj/V+NJ4Dy8N6uiehnDENJRaYiLvcrQM8We94sycFycNHolCbUuOsT+8kkQ0xThCpBrIaBbdY6JT//7RNfgAzcuclEdWqNAlOcNP0onaxcn3EtRYQ20yAQX+yfTlPRRlwiRMiKzKsJw+KvGEcUc8A5UNQo/+VSBDRRU2wb7L1atTPRYt95py3KCnq07uYZYlkmMvI0e4xVjYQ4Jrj4wAHAJRY6CGChyl4bjEAGSJ1RiUAwHaFMNaGVbLFwFooQiL/u7qDFec58Qmj9MoKgbcjNA45XY15hhBC2iLnfohR84rJpz8qYvwtFwRcgXhK8MTA5sDXEwK+RJjRkHcxYZdr5R/EDKYF7Acu07mb3Mee8SUDCYoqrqrE29ZjSq8bow7A/MHSMNZnultvIQU4qJmTxgPxqpVbToXXwoA9VbI+wq+a2BPFumQNDqTGiQ0uxaOlQ8CXkmzf8J2cxuJsXR+JaMLHgP/ibDTFRb98rtQLVsNWTtZGR/wEBEVELyxnDrfO85BO1F4O80guPfivyOQNJ/6Ymr9cvEQ7UXuZNyDQ8RKFWAf65rJcHas6AB9dyFO/TSdtmGWPFUWjEKRIxRAzcvw/RoCpgZ62ZA03A3l8gyeBdZKXO4iGTP+6MK6+VlefXQSzbmEuwwP3fTQuFV8QUkMER9ZGW/uFEFJxb7L1atTPRYt95py3KCnq07uYZYljndiOfXtiFa0W3Ywq0gCN5JRY6CGChyl4biaAA3XPBeBFtHOWJYWGVOMQsRfpRLY9ffVMAOdmRheloolHIW5jttBllgGbvRPKcrKnukmUiT7LAzOftPyikwEvsKtT9/BTTcUW9kQJ/hRHWrgyIk8e9EaMD73DTAoarzceq95o8SP4pAcur36XYk2xCqvtz5jA/F7EIYL74Rae2BFNfYOCMAB5r1YdiIvBf1DkzPNDt7O5xMAWrzE4XS2TjdPqefS6FOuCoWwwEkM71rOcDlU2P95CYac9OD4CQX09bA1MBUnAlFNUFYyO6EVELyxnDrfQTkVYNt927mlsujnuXTE2c5jMC0vuec49FajKcTnCjVWUSkAl9LGr5Ls6/QxdFsO/UaBtkGdPFUWjEKRW4/AbaDclEdWqNAlOcNPMRnaxcmeANRFVqisA5LjjqGk3/UcfS1YxauFbMdOGOr3uAt9BANWEQpmGW9QERUQr38IOewBPQtly5pyYqywevb1Yh6cont1P0ujfBCXOfIu/egCN5JRY6CGChzP3uy2GzSoOQaHThLaGOcxVRqGQsJvoRK0z0GZHEKdyjRqz5BaN4uniM6EvptVv+RNTIyL8qQcFHT12CbggNu5pkxtu4vGGSYVTUQYGQQm+RBCUETGrxkxepkwVQCe2XNhePaw6LB67yiAJ6poxr47FN/SeWaSpQN/V/EC1IZNiLwagYlA+3o0TwUlp4YJbWhWXhtHe8OEWgr4wZU2V4WD1UTBTnwIqf8Nk5XIWFDWslkX7YeWtWcXP4QoMd7w90T4A6Tj9bUGJ8gYTGpmMp==",
    "solution": "exALa0On22m8bvyye7TzRHgBCo/4W9kQJ/heFRD/fKs3coFwDGDWQXMDlI+cbed5wl42MSQbufLgXcQPx/DPpj5jA5k71b20j4RixY5ANqsoQhsP/4prdHUGQs5O9UKEFNS/tZ91QunCH6G4CzVIvLXL6AyH2Fy5co/M/MqIxXP69R+nucljiOrku2+y3voEACQAHEVAMo/wTBFNEKPnnGPwQTBLYL5bIn7swNfIvzfD3NFaOieve315/V8o4g4zETdx3ngVl5qIwCbxn9R9qzBOjViBuyrdPB6X8AHZIxpM7s0cyFl4qI2c0gs/MU8fdNSETrJrWPypFECJ6h43P+LFXfH6aiuQsc+mgq18flk8TFNMXTMZGW9QTRVqr3XWOc950QV5loN72Ki5uaLJCx6opHdoNfz7fRqZDKJspqABY9t3LDvGCcXlHI8JUDCu1UOLZ1GmU0oSG/72+JE7jEDhv0S3CFuglGpei/E0SPup7P1JmEhVdYgNTNXLeZVsdtVXt3iiZNWirM7Bwi3nRChAGQcZGVF2+VpRQ/ysxOIer9EcVWCHXolihbzccql58HCULU/nfvK6Xc/NxyOXtkpjWysIXMN47+YfuxRUKPJtTsM+8aAFcXM0PN6CmSLyJ2+KvY/PGfLfNDqTTkdHsLW76E02Ci0+eQMLoYfOuDjqjiXch41jua8h9fqEEqdUNo6yTBFFGXxIQEEVGPX9nGzmQTBLSss41i85e3zhvnCQ3JQmYnW8cr/kjRG7Kg3bH8ZoH7cV693OcHLm6HMuqmROyQfRhoTn3FV+ilLDKfgAzcuclEcKqLge2ZZPPF0fwMSEFKt=",
    "max-score": 56
  },
  null
]
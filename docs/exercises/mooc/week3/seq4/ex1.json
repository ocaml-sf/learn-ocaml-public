[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Balanced Binary Trees",
    "stars": 1
  },
  {
    "id": "ex1",
    "prelude": "type 'a bt =\n  | Empty\n  | Node of 'a bt * 'a * 'a bt ;;\n",
    "template": "let rec height t = \n  \"Replace this string with your implementation.\" ;;\n\nlet rec balanced t  = \n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  A binary tree <code>t</code>, of the <code>'a bt</code> type given\n  in the prelude, is either an empty tree, or the root of a tree with\n  a value and two children subtrees.\n</p>\n\n<ol>\n  <li>\n    Write a function <code>height : 'a bt -> int</code> that computes\n    the height of a tree.\n  </li>\n  <li>\n    A tree is <em>balanced</em> if, for all internal\n    node <code>n</code>, its two subtrees have the same height.  Write\n    a function <code>balanced : 'a bt -> bool</code> that tells if a\n    tree is balanced.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "qnLkum+120pRpm71RW8BYWMHGAJSTVBWJmxRFUng8YVue65cWHe0Tk/hu4Cc/+o95TS1KjdNgq+zVs91qCrGq99jC6p8SIYDp0EjvtoUZKZhTwlH6PxWcG6VQscLzA7rDNfOaYIKV0nS2X3SAXINqqCV6ADURV0ceQICxdrOvDjWKqHeP29ex/ySIhgIFtFdPlE8AkV1EUk/0okBFeDxoSWfSXUQKZpXJi8gw+DmvjWN1cpuYn0svfFZioGv+20nAi6BFCYQl5KJdyys8EI/q8AAk5vFtpWeNXd=",
    "max-score": 22
  },
  null
]
[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Balanced Binary Trees",
    "stars": 1
  },
  {
    "id": "ex1",
    "prelude": "type 'a bt =\n  | Empty\n  | Node of 'a bt * 'a * 'a bt ;;\n",
    "template": "let rec height t = \n  \"Replace this string with your implementation.\" ;;\n\nlet rec balanced t  = \n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  A binary tree <code>t</code>, of the <code>'a bt</code> type given\n  in the prelude, is either an empty tree, or the root of a tree with\n  a value and two children subtrees.\n</p>\n\n<ol>\n  <li>\n    Write a function <code>height : 'a bt -> int</code> that computes\n    the height of a tree.\n  </li>\n  <li>\n    A tree is <em>balanced</em> if, for all internal\n    node <code>n</code>, its two subtrees have the same height.  Write\n    a function <code>balanced : 'a bt -> bool</code> that tells if a\n    tree is balanced.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "qnLkum+120pRpm71RW8BYWMHGAJSTVBWJmxRFUng8YVue65cWHe0Tk/hu4Cc/+o95TS1KjdNgq+zVs91qCrGq99jC6p8SIYDp0EjvtoUZKZhTwlH6PxWcG6VQscLzA7rDNfOaYIKV0nS2X3SAXINqqCV6ADURV0ceQICxdrOvDjWKqHeP29ex/ySIhgIFtFdPlE8AkV1EUk/0okBFeDxoSWfSXUQKZpXJi8gw+DmvjWN1cpuYn0svfFZioGv+20nAi6BFCYQl5KJdyys8EI/q8AAk5vFtpWeNXd=",
    "max-score": 22,
    "depend": null,
    "dependencies": []
  },
  null
]
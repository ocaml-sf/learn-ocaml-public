[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "First In First Out",
    "stars": 2
  },
  {
    "id": "ex1",
    "prelude": "type queue = int list * int list\n",
    "template": "let is_empty (front, back) =\n  \"Replace this string with your implementation.\" ;;\n\nlet enqueue x (front, back) =\n  \"Replace this string with your implementation.\" ;;\n\nlet split l =\n  \"Replace this string with your implementation.\" ;;\n\nlet dequeue (front, back) =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  A queue is a standard FIFO data structure.\n  See <a href=\"https://en.wikipedia.org/wiki/Queue_(abstract_data_type)\">wikipedia</a>\n</p>\n\n<p>\n  In this exercise, we implement a queue with a pair of two lists\n  <code>(front, back)</code> such that\n  <code>front @ List.rev back</code> represents the sequence of\n  elements in the queue.\n</p>\n\n<ol>\n  <li>\n    Write a function <code>is_empty : queue -> bool</code> such that\n    <code>is_empty q</code> is true if and only if <code>q</code> has\n    no element.\n  </li>\n  <li>\n    Write a function <code>enqueue : int -> queue -> queue</code> such\n    that <code>enqueue x q</code> is the queue as <code>q</code>\n    except that <code>x</code> is at the end of the queue.\n  </li>\n  <li>\n    Write a function <code>split : int list -> int list * int\n    list</code> such that <code>split l = (front, back)</code>\n    where <code>l = back @ List.rev front</code> and the length of\n    <code>back</code> and <code>front</code> is\n    <code>List.length l / 2</code> or <code>List.length l / 2 + 1</code>\n  </li>\n  <li>\n    Write a function <code>dequeue : queue -> int * queue</code> such\n    that <code>dequeue q = (x, q')</code> where <code>x</code> is the\n    front element of the queue <code>q</code> and <code>q'</code>\n    corresponds to remaining elements.  This function assumes\n    that <code>q</code> is non empty.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "qnLkunjKS49Uk7WCDSHBO8YPD66YV/1m+RBNFR8C/1QepTplVWiFXn1vbOzXbbNdoErU1yknuOPsDJpe7G4Sf9JmTAAiV2NO7+oag1JSKep/QwUN5PA+sToIFsAEpjiKFJ4+w2BVDLnS2X7YR6s7suX16BXRRkmcwAFM/OGOcHGjMfHcIZxjaQm31ZAN4YIaN9EBTApmGR/wEF6TEPLxkTrvQW92JZVk1i7suLieflnNZdBoMT3dxrA1z9SrKaqiEWIMAn2G693Aiyas6AA6q7IL/QKAgoLlPB9W8pqF+vgAzcuclEcKqKsJOcgRMUCWr2qQSNNOQfy/D5a1ohfY2KAmual68m0pUKoojpldpXpaQRVMCpMZQTxQHAtQbLjQOeIKPV65n/Zm1PWtwbH8YY2ipXZ8KuzIxVbQXh5u/adX05JZD/yVXh3hOvPDVCmnPUf+TcOfU12BVRflCdJj76L38Pj1R8nWyHFqloklCavlm2UToFgQv+pLHt+Fjq5ctS07gGiZKgZZ68n+WXbJ4CUTA5JFGUgQPV5eFRCgfJQeh9EyTjC2DTpjb+rccql5mGnY4jtlrOiqCch2xzyWaQ9aCis7EIYLk4QE9IQN3qIpH1YK9b2RsHhUVZNC8TnEOb0TgsALUbjF1WfWTm90vumBlE0DS/07uW1=",
    "max-score": 50,
    "depend": null,
    "dependencies": []
  },
  null
]
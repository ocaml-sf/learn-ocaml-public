[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Classic Functions Over Lists",
    "stars": 2
  },
  {
    "id": "ex2",
    "prelude": "",
    "template": "let rec mem x l =\n  \"Replace this string with your implementation.\" ;;\n\nlet rec append l1 l2 =\n  \"Replace this string with your implementation.\" ;;\n\nlet rec combine l1 l2 =\n  \"Replace this string with your implementation.\" ;;\n\nlet rec assoc l k =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n  In this exercise, we implement the classic functions over lists.\n</p>\n\n<ol>\n  <li>\n    Write a function <code>mem : int -> int list -> bool</code> such that\n    <code>mem x l</code> is true if and only if <code>x</code> occurs in\n    <code>l</code>.\n  </li>\n  <li>\n    Write a function <code>append : int list -> int list -> int list</code>\n    such that <code>append l1 l2</code> is the concatenation of <code>l1</code>\n    and <code>l2</code>.\n  </li>\n  <li>\n    Write a function\n    <code>combine : int list -> int list -> (int * int) list</code>\n    such that <code>combine l1 l2</code> is the list of pairs obtained by joining\n    the elements of <code>l1</code> and <code>l2</code>.\n    This function assumes that <code>l1</code> and <code>l2</code>\n    have the same length. For instance,\n    <code>combine [1;2] [3;4] = [(1, 3); (2, 4)]</code>.\n  </li>\n  <li>\n    Write a function\n    <code>assoc : (string * int) list -> string -> int option</code> such\n    that <code>assoc l k = Some x</code>\n    if <code>(k, x)</code> is the first pair of <code>l</code> whose first\n    component is <code>k</code>.\n    If no such pair exists, <code>assoc l k = None</code>.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "jJC8elVsK919Dq/r13i8L7UUApcFUFZXQoARSRDC/15jwEFeFCnIG//hu4CcxrMfi8TNLGNacKLgXdQRbnqLh9JeRoo7SIZSjsgVx1FUZKAlDZUO93MUdy6VWt/CiTCEX0H+aZlOQqbYNH4CTjYBuu776E+BClzwimBM6NWOrCbbk44qFiRwHj/Ruzgoqqh84UEVTAtDGV5gQFR0VLzpzmqjUo2aLJhL1nuxeejhuGjG42xfYmeexrkNjQnIKg4mAjJBGWIYn6vFcDPa8QAmrnUGqlaBtkH5PFkswUfRW4/Jzc48lDRu/sAlOcMTMUC7dJK3Rs/YG+ycTV+Tnc3yNJTYf3d41GVHMEKl2DPsqWErApQCVB/BSz/JQ8dQr38IZexbPV6bjoh5Kb8bf4r/YY6ylVVJPvajxQj1UvJvoOlN2QI2Y/rGFvPl4fDFVC3f1QKVGI8yGZYdVR0YHwFZbUCWoPjbAF8gb8QellcsSPKe8h6GjQIVtegNAIyG9PRllsWdepxxI9BwHapuZbjNYShETRQRXFVKLBBQR9Pjvd6ir5xX",
    "max-score": 40
  },
  null
]
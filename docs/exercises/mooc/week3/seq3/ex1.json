[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Type Directed Programming",
    "stars": 1
  },
  {
    "id": "ex1",
    "prelude": "type story = {\n  context         : context;\n  perturbation    : event;\n  adventure       : event list;\n  conclusion      : context;\n}\nand context = { characters : character list }\nand character = { name  : string; state : state; location : location }\nand event = Change of character * state | Action of character * action\nand state = Happy | Hungry | Tired\nand action = Eat | GoToRestaurant | Sleep\nand location = Appartment | Restaurant\n",
    "template": "let compatible_actions_for_character character context =\n  match character with\n    | { location = Restaurant } -> [Eat]\n    | { location = Appartment } -> [GoToRestaurant]\n;;\n\nlet apply_action character = function\n  | Eat ->\n    { state = Happy;\n      location = character.location; name = character.name }\n  | GoToRestaurant ->\n    { location = Restaurant;\n      state = character.state; name = character.name }\n;;\n\nlet compatible_actions context =\n  let rec aux = function\n    | [] -> []\n    | character :: cs ->\n      let can_do = compatible_actions_for_character character context in\n      let rec aux' = function\n\u0009| [] -> []\n\u0009| a :: actions -> Action (character, a) :: aux' actions\n      in\n      aux' can_do\n  in\n  aux context.characters\n;;\n\nlet possible_changes_for_character character =\n  match character with\n    | { state = Happy } -> [Hungry]\n    | { state = Hungry } -> []\n;;\nlet apply_change character state =\n  { name = character.name; state = state; location = character.location }\n;;\n\nlet possible_changes context =\n  let rec aux = function\n    | [] -> []\n    | character :: cs ->\n      let possible_changes = possible_changes_for_character character in\n      let rec aux' = function\n\u0009| [] -> []\n\u0009| c :: changes -> Change (character, c) :: aux' changes\n      in\n      aux' possible_changes\n  in\n  aux context.characters\n;;\n\nlet character_of_event = function\n  | Action (character, _) -> character\n  | Change (character, _) -> character\n;;\n\nlet apply event context =\n  let rec aux = function\n    | [] -> assert false\n    | character :: cs ->\n      if character = character_of_event event then\n\u0009match event with\n\u0009  | Action (_, action) -> apply_action character action :: cs\n\u0009  | Change (_, change) -> apply_change character change :: cs\n      else\n\u0009character :: aux cs\n  in\n  { characters = aux context.characters }\n;;\n\nlet rec is_one_of state states =\n  match states with\n    | [] -> false\n    | state' :: ss -> state = state' || is_one_of state ss\n;;\n\nlet rec all_characters_are states = function\n  | [] ->\n    true\n  | character :: cs ->\n    is_one_of character.state states && all_characters_are states cs\n;;\n\nlet random_pick xs =\n  List.nth xs (Random.int (List.length xs))\n;;\nlet something_happens context =\n  let what_can_happen = compatible_actions context @ possible_changes context in\n  let event = random_pick what_can_happen in\n  event, apply event context\n;;\nlet happy context =\n  all_characters_are [Happy] context.characters\n;;\n\nlet rec end_story events context =\n  if happy context then\n    context, List.rev events\n  else\n    let event, context = something_happens context in\n    end_story (event :: events) context\n;;\n\nlet make_story initial_context =\n  let perturbation, context = something_happens initial_context in\n  let conclusion, adventure = end_story [] context in\n  {\n    context = initial_context;\n    perturbation = perturbation;\n    adventure = adventure;\n    conclusion = conclusion\n  }\n;;\n\nlet describe_location = function\n  | Appartment -> \"at home\"\n  | Restaurant -> \"at the restaurant\"\n;;\nlet describe_state = function\n  | Happy -> \"happy\"\n  | Hungry -> \"hungry\"\n;;\nlet describe character =\n  character.name ^ \" was \"\n  ^ describe_location character.location\n  ^ \" and was \" ^ describe_state character.state ^ \". \"\n;;\n\nlet tell_context context =\n  let rec aux = function\n    | [] -> \"\"\n    | character :: characters -> describe character ^ aux characters\n  in\n  aux context.characters\n;;\n\nlet tell_action = function\n  | Eat -> \"ate\"\n  | GoToRestaurant -> \"went to the restaurant\"\n;;\n\nlet tell_event = function\n  | Action (character, action) ->\n    character.name ^ \" \" ^ tell_action action ^ \". \"\n  | Change (character, state) ->\n    character.name ^ \" was made \" ^ describe_state state ^ \". \"\n;;\n\nlet rec tell_adventure = function\n  | [] -> \"\"\n  | event :: adventure -> tell_event event ^ tell_adventure adventure\n;;\n\nlet tell story =\n  \"Once upon a time, \"\n  ^ tell_context story.context\n  ^ \"One day, something wrong happened. \"\n  ^ tell_event story.perturbation\n  ^ tell_adventure story.adventure\n  ^ \"At the end, the peace was restored. \"\n  ^ tell_context story.conclusion\n;;\n\nlet story = tell (make_story {\n  characters = [\n    { name = \"Sophie\"; location = Appartment; state = Happy };\n    { name = \"Socrate\"; location = Appartment; state = Happy };\n  ]\n});;\n",
    "descr": [
      [
        "",
        "<p>\n  In this exercise, you will experiment with <em>type-directed\n  programming</em>.\n</p>\n\n<p>\n  We give you the example program of the lecture in which two type\n  definitions have been changed as in the given prelude. A\n  case <code>Tired</code> has been added to type <code>state</code>,\n  and a case <code>Sleep</code> has been added to\n  type <code>action</code>.\n  <br/>\n  By clicking the <em>typecheck</em> button, you can notice that\n  several warnings are issued by the OCaml compiler. Go through the\n  code and fix these warnings as follow.\n</p>\n\n<ol>\n  <li>\n    Update <code>apply_action</code> so that the <code>Sleep</code>\n    action turns a character from the <code>Tired</code> state to\n    the <code>Hungry</code> state.\n  </li>\n  <li>\n    Update <code>possible_changes_for_character</code> so that\n    the <code>Tired</code> state behaves as the <code>Hungry</code>\n    state.\n  </li>\n  <li>\n    Update <code>describe_state</code> so that the description of\n    the <code>Tired</code> state is <code>\"tired\"</code>.\n  </li>\n  <li>\n    Update <code>tell_action</code> so that <code>tell_action\n    Sleep</code> is <code>\"took a nap\"</code>.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "2cTf0sCouNY4O8M2Sn9VGWMkCBcFZ/VQKmxeWVXsfJsfcoFoEBb+HC1ohrKcdbx5jRfU4nhmqrHwXfsQeGaYdloaTAV7AhZ1pKAiohQAOPJ6Tw6Rp2YQfBZVFxRC5CKJXwrctvQAZPzDYHvGHXAGusvI6BvB2BW9r9laoYeLwB1SnPwllJCxnpA9I96XLREDJ9FFRREEMo/wXVBBUaHxryulBXIY0wIRJi7buOvnsj8rNJQ8YjLvuec4tVDn3dfUQ8Z3UXMQ7oWJyCv8pkIcjHFOnUbbtkn7PCF4754VCKhMixec5pg0eJooRJdA15zrr14KRx9CF0SOTUmE7svi2T8jazfU8KSIE71x3pRoWV1lCB9EOo9ZRW/EQlBVr3XWOctR0RQn8oIjNqzGq4raIIJkjCpz1r3dxSj1QqZvprpD3FZeSFmDXhzyPvDUTCGNM50UHYDpB4/rVQqnQwFrpRS0/Ln2C9WdmRhelldoMf0p7qlHmlUXv0cNTqrEmLFq0MrcIMqDfaQRJCEkBGJQVQEEApZQVFBX+oAKFRL+vYcaboIaVXq0XRQvfOqntuF/o8TIAzMewI76XgcEeCr4slIeHHs7EIYLlqQouM/FZOcoANQC6OB4sEhUWJpNiCmNDta+c0E2RPjJOy3WAXY1tqDGoQqEWBn5wFZz71rOcDlhkbs66I0wzkAeJywUNRUxMBUMGFQZERBwCmtVELyxnDqjDyhUNJIQPX7puOffuyCI13tmLDGucr5Q/oGvIw48+BoOFDYQpkPMw8n9klU0hiFTqlaBhBTxQpVE/pXDZc1Tzc7+55gScZgmOgYX2Bvgr2qBRwAFFfzaZlnJrMri+XHLdSDYrOynFTAmNpY1CBIoA5Q4VB9IAj9SEQhQjv3M4uwD4AUp/pYMO3ehcLSsItRJzFV81rv7xVaZE+Iu/bxHZVYrJEXISNjcMKPeE6rmN5a1AZLyLrcmGUOMCcgtu9C0jqiQTo+dlDQellcKT+fw9xQFnUwHfO1ZC2qL5bxc314u+ZbNfYsO+CRaRStRFD1EHmERGk6JOVoI+/HfqIFlcEMXVWD0XiNhu+ncbbM5oEaw29/Ywr4kXgoJgiyUcoFm4UN7D+pL7+1fr4sQNuljHNA19uNTjjhUUwEMk7LBGNfIqw91UemCO8yTVBsIbxPNooLIRFrwuDZMaYeWxDlfh32/5xC5kRVx2SlE3kBMYnICCFQZGl9zQlJ1UqWssi8nAHMSJY55NT4alafmxyKF2dAfMXDvifkkjRG7Kg3bQ8YCUWJEpk827mzhn9MprmhAf/fbd60c2RsF8DiC015VmgOnyzUWqNAlOcNPMU8fdI7EPYR4TLO9D5TIz1bi+XiWqniOpeuSETp7Nl5pApM3QUd1X9wKUCs1VGwTd+zG4PdSQ6Mq7SApMOmbaL7iZZYjqyc81rv7xVaZE+Iu/ehgSpseSFmDXhzoJf8WQnj6NDGGTcnZU0oqEEKyEtNspoL37+eQTXHr9XBnyQ5oD+Kkjt1Pl9hVrvwPTJL68qRO414u+ZbNfYhu+BNnXCkQVQYZCBgSUEw1+QMLFRKgdd6YcQVhVWK4G7AeabXaqwom9HXAOzFn/ffLXc9Rx7rXq9IjA/EjV2V4cuIvxd2UL0laMYQp5PQQcXIGQv1RizeRFNKVtawPFumQNDqTTmFIbqCIalPVU5bwco9NiYfObSMhkbsnzYjrbkBvIiJXO5I3IQQnHlVYTVouO6EVELyxnDrfQTkVYNt91pm9aq7ahkiNHuhmJ70vga9+7kLu3NLBV8Y43jIQkUe27nbanl1jsnI2/UjzhRDh2RsRjA4JZcYDlxzhlFtYqsAqE2NPQ5jgwMHLCIED0vyQCBT2nhnRZXiWaGzD6rzSSz6/NocgMo5yBEkORVoVVRZRU9FZcv0KOd2NFkV5jkcm3Kjtq4q82IFypAA/JfT6cR+WXclffPdF2lt4MUTgWM+hKuyNTnuY1UfVTdGmU0pdVR0YQrxylBzBjunTGkamy8QjmUc7HK7gotMe5Q/BeO5BMd7Ijukn2x+VINDDfYZQ+G1iBH/QVo6BP5BUXE9ZFB9ePkmdqM5mtlE54jD0DDYtlqehvLZt9DTlHl/nfrPnCfZChjX3f6sJQR9yUdlLnutevPsBNfZoLqVP6bY4qDR1FsV1rnKEOgr4wZU2V4WD1UTCTnwIqf8Nk5XIWFDWs9kX7YeWtWcem3o/ucDwyVAsPiJWO69EJ8gZTGpm",
    "solution": "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",
    "max-score": 40
  },
  null
]
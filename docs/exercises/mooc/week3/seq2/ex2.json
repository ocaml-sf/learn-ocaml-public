[
  {
    "learnocaml_version": "2",
    "kind": "exercise",
    "title": "Tries",
    "stars": 3
  },
  {
    "id": "ex2",
    "prelude": "type trie = Trie of int option * char_to_children\nand char_to_children = (char * trie) list\n\nlet empty =\n  Trie (None, [])\n\nlet example =\n  Trie (None,\n\u0009[('i', Trie (Some 11,\n                     [('n', Trie (Some 5, [('n', Trie (Some 9, []))]))]));\n\u0009 ('t',\n\u0009  Trie (None,\n\u0009\u0009[('e',\n\u0009\u0009  Trie (None,\n\u0009\u0009\u0009[('n', Trie (Some 12, [])); ('d', Trie (Some 4, []));\n\u0009\u0009\u0009 ('a', Trie (Some 3, []))]));\n\u0009\u0009 ('o', Trie (Some 7, []))]));\n\u0009 ('A', Trie (Some 15, []))])\n",
    "template": "let children_from_char m c =\n  \"Replace this string with your implementation.\" ;;\n\nlet update_children m c t =\n  \"Replace this string with your implementation.\" ;;\n\nlet lookup trie w =\n  \"Replace this string with your implementation.\" ;;\n\nlet insert trie w v =\n  \"Replace this string with your implementation.\" ;;\n",
    "descr": [
      [
        "",
        "<p>\n   The data structure called <em>trie</em> is very convenient to\n   represent a dictionary whose keys are strings. It is\n   space-efficient way while providing a very fast lookup function.\n   <br/>\n   See <a href=\"https://en.wikipedia.org/wiki/Trie\">the page on\n   WikiPedia</a>.\n   <br/>\n   In this exercise, we will implement such a data structure, assuming\n   that we want to associate integers to the strings of the\n   dictionary.\n   <br/>\n   Let us define a trie using two mutually defined types (given in the\n   prelude):\n   <ul>\n     <li>\n       <code>trie</code> which represents a trie, that is a tree whose\n       root may contain an integer and whose children are indexed by\n       characters ;\n     </li>\n     <li>\n       <code>char_to_children</code> which implements the associative\n       data structure whose keys are characters and whose values are\n       trie (childrens).\n     </li>\n   </ul>\n   As a trade-off between speed and memory consumption, we choose an\n   associative list to represent the association between characters\n   and children.\n   <br/>\n   The prelude also gives examples of empty trie and of another one\n   that contains the following pairs (key, value):\n   <br/>\n   <code>[(\"A\", 15); (\"to\", 7); (\"tea\", 3);(\"ted\", 4); (\"ten\", 12);\n    (\"i\", 11); (\"in\", 5); (\"inn\", 9)]</code>.\n</p>\n\n<ol>\n  <li>\n    Write a function <code>children_from_char : char_to_children ->\n      char -> trie option</code> such that\n    <ol>\n      <li>\n        <code>children_from_char m c = Some t</code> if <code>(c,\n          t)</code> is the first pair in\n        <code>m</code> with <code>c</code> as a first component ;\n      </li>\n      <li>\n        <code>children_from_char m c = None</code> if no such pair\n        exists in <code>m</code>.\n      </li>\n    </ol>\n  </li>\n  <li>\n   Write a function <code>update_children : char_to_children -> char\n   -> trie -> char_to_children</code> such that\n   <ol>\n     <li>\n       <code>children_from_char (update_children m c t) c = Some t</code> ;\n     </li>\n     <li>\n       <code>children_from_char (update_children m c t) c' =\n       children_from_char m c'</code> for <code>c &lt;&gt; c'</code>;\n     </li>\n     <li>\n       If <code>children_from_char m c = Some t</code> then\n       <code>List.length (update_children m c t') = List.length m</code>.\n     </li>\n   </ol>\n  </li>\n  <li>\n    Write a function <code>lookup : trie -> string -> int\n    option</code> such that <code>lookup trie w = Some i</code>\n    if <code>i</code> is the value of the key <code>w</code>\n    in <code>trie</code> and <code>lookup trie w = None</code>\n    if <code>w</code> is not a key of <code>trie</code>.\n    <br/>\n    To look for a key in a trie, iterate over the characters of the\n    key from left to right. Given the current character <code>c</code>\n    and the current node of the trie <code>n</code>, look for the\n    children <code>n</code> for character <code>c</code>. If such a\n    children exists, continue with that trie and the remainder of the\n    key. If no such children exists, the key is not in the trie.\n    <nr/>\n    When the characters of the key are entirely consumed, look at the\n    root of the current trie. If there is an integer, this is the\n    value you are looking for. If there is no integer, the key not in\n    the trie.\n  </li>\n  <li>\n   Write a function <code>insert : trie -> string -> int ->\n   trie</code> such that <code>lookup (insert trie w k) w = Some\n   k</code> and <code>lookup (insert trie w k) w' = lookup trie\n   w'</code> for <code>w &lt;&gt; w'</code>.\n  </li>\n</ol>\n"
      ]
    ],
    "prepare": "",
    "test": "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",
    "solution": "jJC8ekR5IAtsG4E5VvrtYShbD5RQSo/U+VMRCDvgfIRbe9FqECP0H7Y5u0Gcq0Zr6jD2MCkYfvK6XhURjV+Xtkpj0BhtV+pL74RatYQIJaVcTtFGp+/LqHdGFsV19WqCQN8+hNAME0nE4Hf2TlIHseWIlE0ERl0twApZl1qNwo3Uk0f6PS6wB8pTsCMDoeJuNlEYHFVYTVpWUk/1XPjf8XWfDDlWYIc40/KsuPGbsnCW122aI73nxuo4ylTt+MPiDX5xUWIQ6/3J8pLs7RgOdyFO/UaBnFyaMFVClTbeIxRAzh0cjApRtNB5PNwPKkLfqY7JWKtLF+z9TUmA8YfiPYyVsO5X4CECJlrdLSXsv728Wk2MXB/1VTwVERkTqrTI0ekIPUcfjohzIKi6/aq8+Yx3/Hd7JeK7eHXmX32a/aIN3U9EM6DSW1Co4evEHUen1QLQGdH6FPddFEOAQs578DTJ9e8QRkuc9yFiilcnB0r55YkGyCEVv+RNB1aLoaQ5/K+8qVgzL99/Dqxw4+Xb3WMVBQ/4GVVYKkV2FVXkrhlRr9EcVWD0E8IterScrKsw7HDGO7lNuPDrEvZSfzuFq5FeQpF7Rh6ppI/artkULN6YEwU68qlUqDFLFuYNij3r+14+8wdCUenEND0NTiA2xqCAmU+KCpS5wB/z71qHr63Uk0+fTn6gRmlZaStDoeJuNlEEA9J1SlkwREN1V0zanGjfXB2VYJ1+Ji8af4eexyW1NNka+p+hfbR4lVi8+2LnT8ZBHCNA8pKJfVXs6AB9rm2OiEa1tnLx06oYylm2ZdxHmgLc6lcCcJVfOf123AifbPqLCdQLQfW9D5HIzh4l3N7GttUXKG/H+UqgLijrs7h5CQQAVUs1VoZWQkw2ovrA3r6B46567kd92s0/pPrl+ZBdq/Ya1xTseouZHLpBqugCQ/AYJoCORd7jOvGIAGn/4mX1MtjmEO/9VRfRQwx7/Uz0lxzCB/OdjFwlyQxcSIGN5YkP5REPv31AD2yCwNk6/K+hx/IxPU29VZgHK3jK4CxETUR2WFs1JRpRQEDcvZoboQJkHCn4DTYju3apruM59muqN6gnhrPlBc9Zfnr1q/MaA5VuG+pL70loohQAJ+1wTxVP/3EYbRY=",
    "max-score": 40
  },
  null
]